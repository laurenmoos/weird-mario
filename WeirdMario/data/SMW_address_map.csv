,Address,Size,Type,Description
0,8257536,16,Misc.,"Scratch RAM, is and can be used for a big number of purposes. The general purpose is temporarily preserving a value for later use in a routine.

Of note is the following address, used in LM ASM hacks:

$7E:0003 (16-bit) - Block number from LM Map16 editor. Also used in the custom Map16 tile change routine."
1,8257552,1,Flag,"If the value in it is not zero, run the actual game; otherwise, loop forever. It's set to a non-zero value during NMI, and it's set to zero after the game mode has been run, so that the game runs exactly once a frame - one NMI trigger per frame."
2,8257553,1,Flag,"Used to distinguish IRQ #1 from IRQ #2's code. (Inside the Morton/Ludwig/Roy room, where IRQ is used twice, although it can be used in other areas that run IRQ as well.) #$00 = IRQ #1; #$01 = IRQ #2."
3,8257554,1,Graphics,Stripe image loader - value must be divisible by 3.Valid Values
4,8257555,1,Counter,"""True"" frame counter. Increments once per frame, except when the game is lagging. Note that $7E:0014 is better suited for most purposes."
5,8257556,1,Counter,"""Effective"" frame counter. Stops when, for example, RAM addresses such as $7E:009D are not zero (lock sprite flag, usually indicates the player is dying, grabbing a powerup, or something similar). Inside sprite code, this address is often preferred over $7E:0013, especially in graphics routines, as graphics will not be updated when the player dies if this address is used as an index to the tilemap."
6,8257557,1,I/O,"Controller buttons currently held down. Format: byetUDLR.

b = A or B; y = X or Y; e = select; t = Start; U = up; D = down; L = left, R = right."
7,8257558,1,I/O,"Controller buttons newly pressed this frame. Format: byetUDLR.

b = B only; y = X or Y; e = select; t = Start; U = up; D = down; L = left, R = right."
8,8257559,1,I/O,"Controller buttons currently held down. Format: axlr----.

a = A; x = X; l = L; r = R, - = null/unused."
9,8257560,1,I/O,"Controller buttons newly pressed this frame. Format: axlr----.

a = A; x = X; l = L; r = R, - = null/unused."
10,8257561,1,Player,"Player powerup/status:

$00 = small

$01 = big

$02 = cape

$03 = fire

$04-$FF = invalid (may crash the game if powerup items, including 1-Up mushrooms, are grabbed)."
11,8257562,2,Hardware mirror,"Layer 1 X position, current frame. Mirror of SNES register $210D."
12,8257564,2,Hardware mirror,"Layer 1 Y position, current frame. Mirror of SNES register $210E."
13,8257566,2,Hardware mirror,"Layer 2 X position, current frame. Mirror of SNES register $210F."
14,8257568,2,Hardware mirror,"Layer 2 Y position, current frame. Mirror of SNES register $2110."
15,8257570,2,Hardware mirror,Layer 3 X position. Mirror of SNES register $2111.
16,8257572,2,Hardware mirror,Layer 3 Y position. Mirror of SNES register $2112.
17,8257574,2,Misc.,"Depending on Layer 3 tides being activated or not, it's either:


Not activated:

Layer 2 X position minus Layer 1 X position.

Activated:

Layer 3 X position minus Layer 1 X position.


Used for various things, among which interaction with multiple layers is included."
18,8257576,2,Misc.,"Depending on Layer 3 tides being activated or not, it's either:


Not activated:

Layer 2 Y position minus Layer 1 Y position.

Activated:

Layer 3 Y position minus Layer 1 Y position.


Used for various things, among which interaction with multiple layers is included."
19,8257578,2,Hardware mirror,"Mode 7 Center X position. Mirror of SNES register $211F, + #$0080."
20,8257580,2,Hardware mirror,"Mode 7 Center Y position. Mirror of SNES register $2120, + #$0080."
21,8257582,2,Hardware mirror,Mode 7 matrix parameter A. Mirror of SNES register $211B.
22,8257584,2,Hardware mirror,Mode 7 matrix parameter B. Mirror of SNES register $211C.
23,8257586,2,Hardware mirror,Mode 7 matrix parameter C. Mirror of SNES register $211D.
24,8257588,2,Hardware mirror,Mode 7 matrix parameter D. Mirror of SNES register $211E.
25,8257590,2,Misc.,"Mode 7 rotation. Its values are calculated and stored into the respective Mode 7 parameter mirrors at $7E:002E through $7E:0035.

Values #$0000 through #$01FF are all different values, after that it's the same pattern - that is, if you add this 16-bit address with #$0200, there is a 360 degree rotation.

Furthermore, this address is used in the brown chained platform code as an index to the sine and cosine tables at $07:F7DB."
26,8257592,2,Misc.,"Mode 7 scaling; that is, making Layer 1 shrink or grow. Its values are calculated and stored into the respective Mode 7 parameter mirrors at $7E:002E through $7E:0035.

The first byte - $7E:0038 - is used for horizontal scaling, whereas the second byte - $7E:0039 - is used for vertical scaling.

Default value is #$20. The closer to #$00, the more the layer grows, the further from #$00, the more the layer shrinks. Value #$10 makes the layer twice as large as value #$20, value #$40 makes the layer twice as small as value #$20, etc."
27,8257594,2,Hardware mirror,Mode 7 Layer 1 X position. Mirror of SNES register $210D.
28,8257596,2,Hardware mirror,Mode 7 Layer 1 Y position. Mirror of SNES register $210E.
29,8257598,1,Hardware mirror,"Background mode select applied with IRQ below status bar (so the area above IRQ is not affected by this). Format: 4321pmmm.

4321 = Layer 1/2/3/4 uses 8x8 tiles when clear, 16x16 tiles when set; p = Layer 3 absolute priority (only in background mode 1); mmm = background mode # (0-7).

Mirror of SNES register $2105."
30,8257599,1,Hardware mirror,"OAM Address, low byte. Also known as the mirror of SNES register $2102. High byte is at $00846B. Is sometimes used to alter priority of various sprite tiles, such as with the sprite backgrounds in the boss rooms."
31,8257600,1,Hardware mirror,"CGADSUB settings. Format: shbo4321.

s = 0 for adding color layer, 1 for subtracting color layer; h = half-color enable; b = backdrop enable; o = object (aka sprite) enable; 4321 = enable Layer 4, 3, 2, 1 (Layer 3 is only affected below the status bar). Mirror of SNES register $2131."
32,8257601,1,Hardware mirror,"Layer 1/2 window mask settings. Format: aaaabbbb.

aaaa = Layer 2 window settings; bbbb = Layer 1 window settings. Mirror of SNES register $2123."
33,8257602,1,Hardware mirror,"Layer 3/4 window mask settings. Format: aaaabbbb.

aaaa = Layer 4 window settings; bbbb = Layer 3 window settings. Mirror of SNES register $2124."
34,8257603,1,Hardware mirror,"Object and color window settings. Format: aaaabbbb.

aaaa = color window settings; bbbb = object window settings. Mirror of SNES register $2125."
35,8257604,1,Hardware mirror,"Initial settings for color addition. Format: aabb00cd.

aa = main color window on/off; bb = sub color window on/off; c = fixed color add/subtract; d = direct color mode for 8bpp backgrounds. Mirror of SNES register $2130."
36,8257605,2,Camera,"Column/row of Map16 tiles to use for VRAM upload when layer 1 is scrolling left/up. Its value is equal to $7E:001A (or $7E:001C if vertical) divided by #$10, minus #$08."
37,8257607,2,Camera,"Column/row of Map16 tiles to use for VRAM upload when layer 1 is scrolling right/down. Its value is equal to $7E:001A (or $7E:001C if vertical) divided by #$10, plus #$17."
38,8257609,2,Camera,"Column/row of Map16 tiles to use for VRAM upload when interactive layer 2 is scrolling left/up. Its value is equal to $7E:001E (or $7E:0020 if vertical) divided by #$10 (16), minus #$08."
39,8257611,2,Camera,"Column/row of Map16 tiles to use for VRAM upload when interactive layer 2 is scrolling right/down. Its value is equal to $7E:001E (or $7E:0020 if vertical) divided by #$10, plus #$17."
40,8257613,2,Camera,"Last X/Y value of layer 1 where VRAM upload of Map16 tiles was performed when scrolling left/up.

The low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.

It is used to determine if a VRAM update is necessary during scrolling."
41,8257615,2,Camera,"Last X/Y value of layer 1 where VRAM upload of Map16 tiles was performed when scrolling right/down.

The low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.

It is used to determine if a VRAM update is necessary during scrolling."
42,8257617,2,Camera,"Last X/Y value of interactive layer 2 where VRAM upload of Map16 tiles was performed when scrolling left/up.

The low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.

It is used to determine if a VRAM update is necessary during scrolling."
43,8257619,2,Camera,"Last X/Y value of interactive layer 2 where VRAM upload of Map16 tiles was performed when scrolling right/down.

The low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.

It is used to determine if a VRAM update is necessary during scrolling."
44,8257621,1,Camera,"Direction of scrolling for Layer 1.

#$00 = left (or up); #$02 = right (or down).

Used to index the various camera tables at $7E0045 to $7E0048 and $7E004D to $7E0050.


When handling routine $00F70D, it is set to $00 if the player's on-screen X position is less than the value of $142A and $02 otherwise. This is used to determine which side to enable spawning sprites depending which side the player is on compared to $142A.


It is also temporarily set to #$01 during level load for loading onscreen sprites."
45,8257622,1,Camera,"Direction of scrolling for Layer 2.

#$00 = left (or up); #$02 = right (or down).

Used to index the various camera tables at $7E:0049 through $7E:004C and $7E:0051 through $7E:0054."
46,8257623,1,Blocks,"Used in the level loading code. It's the position within the subscreen.

Format: yyyyxxxx, where yyyy is the Y position (units of 16 pixels) and xxxx is the X position."
47,8257624,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
48,8257625,1,Blocks,"Used in the level loading routine as an indicator for the size of the object, or extended object type depending on what object is being loaded. Could be used as scratch RAM (except in ObjecTool and similar codes)."
49,8257626,1,Blocks,Used in the level loading routine as  the object number. Could be used as scratch RAM (except in ObjecTool and similar codes).
50,8257627,1,Misc.,"Screen mode: CD----Vv.

C = Collision with layer 2.

D = Disable collision with layer 1.

V = Vertical layer 2.

v = Vertical layer 1.

- = unused.


This address is set by a table at $05:8417, which is indexed by the level mode setting."
51,8257628,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
52,8257629,1,Misc.,Number of screens in level.
53,8257630,1,Camera,"In horizontal levels, used as the level's width in screens, i.e. the screen number (plus 1) at which the camera should stop scrolling rightwards. Equivalent to the ""number of screens"" dropdown in Lunar Magic's ""Change Properties in Header"" dialogue. Not used in vertical levels; see $5F instead."
54,8257631,1,Camera,"In vertical levels, used as the level's height in screens, i.e. the screen number (plus 1) at which the camera should stop scrolling downwards. Equivalent to the ""number of screens"" dropdown in Lunar Magic's ""Change Properties in Header"" dialogue. Not used in horizontal levels; see $5E instead."
55,8257632,4,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
56,8257636,1,Misc.,"Properties (YXPPCCCT) byte for most sprites inside levels - including the player. Exceptions to this include sprites that mess with sprite priority in a different way, such as Piranha Plants, items coming out of a box (and inside the item box) and Net Koopas behind the nets."
57,8257637,3,Pointer,24-bit pointer to layer 1 data - both level and overworld.
58,8257640,3,Pointer,24-bit pointer to layer 2 data.
59,8257643,3,Pointer,24-bit pointer to low byte of Map16 block data. Used during level load.
60,8257646,3,Pointer,24-bit pointer to high byte of Map16 block data. Used during level load.
61,8257649,1,Player,Player animation trigger.Valid Values
62,8257650,1,Player,"Player is in the air flag, as well as the actual pose value to store to $13E0 while the player is in midair. This is set to a certain value depending on how the player got in the air in the first place, and in what state he is currently (rising or sinking).

This address is not affected by phases such as climbing. It is, however, also used in swimming animation.


Notable values:

#$0B = Jumping/swimming upwards.

#$0C = Shooting out of a slanted pipe, running at maximum speed.

#$24 = Descending/sinking.


The address in general is used in many instances.

For example, the game checks if this address is #$0C. If not, the player cannot ascend properly with the cape. Furthermore, the Layer 3 smash won't hurt the player if he's not on the ground (any non-zero value) and this address prevents the player from locking in place when still airborne during the Morton/Roy/Ludwig battle."
63,8257651,1,Flag,"Player is ducking flag. #$00 = No; #$04 = Yes. However, any value that is not zero also counts as 'Yes', SMW just stores that specific value to it."
64,8257652,1,Player,"Player is climbing flag: format: n--sifhb

n: Net/vine flag. 1 - net, 0 - vine. Determines whether Mario can move diagonally.

s: Side body collision point with climbing. If clear, block horizontal movement.

i: Side head collision point with climbing.

f: Feet collision point with climbing.

h: Head collision point with climbing.

b: Body collision point with climbing."
65,8257653,1,Flag,Player is in water flag. #$00 = No; #$01 = Yes.
66,8257654,1,Player,Player direction. #$00 = Left; #$01 = Right.
67,8257655,1,Player,"Player blocked status - Used to check if player is blocked in a certain direction. Format: SxxMUDLR

The M bit means that the player is in the middle of a block.

The S bit indicates that the player is touching the side of the screens while horizontal screen scrolling is disabled.

UDLR = up, down, left, right (contact with walls).


L is checked each 4 frames when the player have negative X speed. Others frames is zero.


R is checked each 4 frames when the player have positive X speed. Others frames is zero."
68,8257656,1,Player,"Used to hide the player partially or fully. Format: dlucapLU.

d = used in conjunction with all other set bits in order to disable processes such as the star timer decrementing.

l = hide lower extra player tile when in flight (hovering with the cape).

u = hide upper extra player tile when in flight (hovering with the cape).

c = hide regular cape tile.

a = hide attributive 8x8 tile.

p = hide extra player tile that is shown during the inflated P-balloon pose (does not apply if the player is small).

L = hide lower half of the body.

U = hide upper half of the body."
69,8257657,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
70,8257658,1,Player,"Accumulating fraction bits for fixed point player X speed (fractions of 256, see code around $00D792, this handles horizontal movement with the player and when the player is on the slope).


Not to be confused with $7E13DA, which handles X position."
71,8257659,1,Player,"Player X speed (8-bit, 2-complement signed), in 1/16s of a pixel per frame.

$80-$FF: leftwards speed, with $80 fastest.
$00: Not moving horizontally.
$01-$7F: rightwards speed, with $7F fastest.


Note: Player's maximum X speeds, while holding left or right oscillates between (inclusively) $13-$15 (walking) and $2F-$31 (dashing). The oscillation is due to the code applying deceleration when Mario is at or above the max speed, rather than just setting his speed to the max value."
72,8257660,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
73,8257661,1,Player,"Player Y speed (8-bit, 2-complement signed), in 1/16s of a pixel per frame:


$80-$FF: Upwards speed, with $80 being the fastest (launches the player the highest)
$00: Not moving vertically.
$01-$7F: Downwards speed, with $7F being the fastest.


Note: $43 (when holding jump) $46 (not holding jump) is the maximum fall speed. Although $40 is the intended max speed (see at $00D7AF), the code first caps the downwards speed, and then apply the gravitational acceleration (increases Y speed by $03 or $06) afterwards.


When jumping, $B3 is the normal jump speed, and #$A4 is the jump speed when fully running."
74,8257662,2,Player,"Player X position (16-bit), within the borders of the screen."
75,8257664,2,Player,"Player Y position (16-bit), within the borders of the screen.

Note that this value may be displaced by $1888 (the screen shake), in addition to small one-pixel displacements based on Mario's powerup status and walking animation frame."
76,8257666,3,Pointer,"Points to how steep the various slopes are and which parts of the slopes they represent. Points to $00:E5C8 in tilesets 0 and 7, and $00:E55E in others.

The table this one points to has one byte per block, from tile 16E to tile 1D7.

The value in these tables is then multiplied by 16, the lowest nibble of the sprite/player X position is added, and this is then used as an index to $00:E632 to tell how many pixels the sprite/player should move down from the nearest 16x16 tile."
77,8257669,1,Flag,Water level flag. #$00 = No; #$01 = Yes.
78,8257670,1,Flag,Slippery level flag. #$00 = No; #$01 through #$7F = Half-slippery; #$80 through #$FF = Yes. Possible values in the clean ROM are #$00 and #$80.
79,8257671,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load.

Note that this address is used as freeram by the SA-1 patch."
80,8257672,1,Player,"How long player goes into a pipe until he warps to another level.


Also used as a timer in the castle destruction scenes for holding inputs."
81,8257673,1,Player,"Action to take when the player enters or exits from a pipe (see valid values).


It also serves as a timer for the No Yoshi cutscenes for each controller command (for the table at $00:C848).Valid Values"
82,8257674,3,Misc.,"Used for quite a number of things.


Altogether, it's a 24-bit pointer to the location of the compressed graphics files inside the ROM.


Furthermore, these addresses all appear to be used as scratch RAM. For example, solely $7E:008A is used as number of options to select in a blinking cursor menu."
83,8257677,3,Misc.,"This forms a 24-bit pointer to part of the decompressed graphics; starts at $7E:ACFE/F and keeps decrementing.

The three seperate RAM addresses have multiple purposes, however.


Notes:

-During code at $00E940, $8F is a backup of $72 (player in the air flag). The code at $00EC06 is used for detecting when entering doors."
84,8257680,1,Player,Player Y position within a block.  Calculated with $7E:0096 & #$0F. Indicates whether the player is touching the top or the bottom of the block.
85,8257681,1,Player,"The direction to move the player out of a block.

#$01-#$07 are up, #$08-#$0F are down. Directly storing to it is ineffective as $7E:0090 will be used to overwrite it at $00:EE19."
86,8257682,1,Player,Player X position within a block. Calculated with $7E:0094 + #$08 & #$0F.
87,8257683,1,Player,The side of a block the player is on. It's set to #$00 for the right side and #$01 for the left side.  This address is relative to the block the player is currently inside.
88,8257684,2,Player,"Player X position (16-bit) within the level, next frame (calculates player position one frame ahead, as opposed to $7E:00D1).

It's also used as a player X position on-screen on the overworld border."
89,8257686,2,Player,"Player Y position (16-bit) within the level, next frame (calculates player position one frame ahead, as opposed to $7E:00D3).

It's also used as a player Y position on-screen on the overworld border.


Note: During levels, the player's Y position is unaffected whether or not he is crouching or not, as well as if the player is small or big, thus his origin point is actually always 32 pixels up from where his feet is at. Being on yoshi, however, his Y position is offset by -$0010 (1 full block up)."
90,8257688,4,Misc.,"Position (in pixels) of the collision point currently being processed for player interaction with blocks in the level. Also used in the creation of various sprite types/other blocks.


$98-$99: 16-bit Y position

$9A-$9B: 16-bit X position


Note that this position is with respect to the top left of the layer being processed. Hence, if Layer 1 and Layer 2 are offset from each other, this value will differ between the two, even when Mario is at the same position with respect to the level.


Also note that, in vertical levels, the X and Y position may be swapped after running certain block changing routines (e.g. $00BEB0 or the ChangeMap16 routine included with various tools)."
91,8257692,1,Blocks,Map16 tile to generate (used with $00:BEB0).Valid Values
92,8257693,1,Flag,"Lock animation and sprites flag. Most codes will still run if this is set, but almost nothing will move or animate."
93,8257694,12,Sprites,"Sprite number, or Acts Like setting for custom sprites."
94,8257706,12,Sprites,Sprite Y speed table.
95,8257718,12,Sprites,Sprite X speed table.
96,8257730,12,Sprites,"Miscellaneous sprite table. In SMW, it's commonly used as a pointer to different parts of a sprite. More information can be found here."
97,8257742,3,Pointer,24-bit pointer to level's sprite data.
98,8257745,2,Player,"Player X position (16-bit) within the level, current frame (as opposed to $7E:0094)."
99,8257747,2,Player,"Player Y position (16-bit) within the level, current frame (as opposed to $7E:0096)."
100,8257749,3,Pointer,Pointer to X and Y positions of Wiggler segments. Table at $7F9A7B.
101,8257752,12,Sprites,"Sprite Y position, low byte."
102,8257764,12,Sprites,"Sprite X position, low byte."
103,8257776,16,Empty,"Used by Lunar Magic for various purposes.

$7E:00FE is the current level number plus 1 (so Yoshi's Island 1 would store #$0106 here). It's used for the custom palette loading code. #$0000 means that the custom palette won't be loaded (this is probably used for castle intros and/or credits).

The rest is unknown.


Originally, this address is empty, and it's cleared at reset, titlescreen and overworld load."
104,8257792,1,Misc.,Game Mode.Valid Values
105,8257793,4,Misc.,Currently loaded sprite GFX files - stored in reverse order.
106,8257797,4,Misc.,Currently loaded layer GFX files - stored in reverse order.
107,8257801,1,Misc.,"When set to a non-zero value, the overworld loading routine is overridden by loading a level value stored here, minus #$24 if it's above #$24. For example, the intro level (level C5) is loaded this way by storing #$E9 to this address.

Depending on whether the player is on the main overworld or a submap, the level in question is either in the 0xx or 1xx area."
108,8257802,1,Misc.,Current save file number.
109,8257803,245,Misc.,Stack. The first two bytes is the current level number in most hacks.
110,8258048,544,I/O,"OAM table - handles all sprite tiles. There are 0x80 (128) slots for tiles. Generally, the table is indexed from either $0200 or $0300, with $0300 being used for normal sprites (and Mario) and $0200 being used for various other sprite types.

Note that tiles are drawn to the screen from top to bottom of the table; that is, a sprite in slot 0 will always appear visually on top of a sprite in slot 1.


The actual OAM table consists of two sub-tables:

- $7E0200-$7E03FF (512 bytes): Each slot consists of four bytes in the order of: X position, Y position, tile number, YXPPCCCT. Unused tiles are generally marked by giving them a Y position of #$F0 (which is offscreen).

- $7E0400-$7E041F (32 bytes): Each slot gets 2 bits, used to handle a 9th bit of the X position (for handling sprite tiles that go past the left edge of the screen) and a ""size bit"" which (generally) controls whether the tile is 8x8 (0) or 16x16 (1). Since each tile only requires 2 bits, each byte of this table actually handles four separate tiles; see the details table for more information. It is not recommended that you write to this table directly, though, and you should use the table at $0420 instead.


Various tiles are documented here. Note that:
Code$7E0310-$7E0313 is for the player's upper half

$7E0314-$7E0317 for the player's lower half

$7E0318-$7E031B is for the player's hand.$0400 formatting"
111,8258592,128,Sprites,"A table that determines the size of a sprite tile - 8x8 (#$00) or 16x16 (#$02). Each byte corresponds to four OAM bytes. Stores to $7E:0400-$7E:041F (where each two bits correspond to four OAM bytes.)

The lowest bit (#$01) is also used for the high bit of the X position."
112,8258720,448,Misc.,"HDMA table for windowing effects, such as with the keyhole, level ending and titlescreen."
113,8259168,32,Misc.,"Gets overwritten by the HDMA table for the level ending circle. If the player gets above or below the borders of the screen, it can even run into $7E:0680 and beyond.

Otherwise cleared on reset and titlescreen load, but usage as empty RAM is definitely not recommended."
114,8259200,1,Palettes,"Index to the palette updating tables, that are uploaded every frame.

#$00 = Use table at $7E:0682.

#$03 = Use table at $7E:0905.

#$06 = Use table at $7E:0703."
115,8259201,1,Palettes,"Index to the table at $7E:0682 during the time when data is stored to this table in the lightning, Magikoopa and Big Boo Boss codes."
116,8259202,19,Palettes,"Used for uploading palettes dynamically. SMW uses this in the lightning/Magikoopa/Big Boo Boss palette effects. $7E:0682 holds the amount of bytes to transfer, $7E:0683 holds the color number (stored to SNES register $2121), the bytes afterwards hold the actual color values transferred to the CGRAM.  Further, this table may be indexed by $7E:0681 to add more color destinations; it's terminated by a #$00. The format is the same as before, just at the new location.

This table doesn't actually have to end at $7E:0694, but SMW never goes beyond this. As such, the area after this address is listed as ""empty""."
117,8259221,108,Empty,"100 bytes used in LM 1.70+ for VRAM modification.


In the clean ROM, it's empty (cleared on reset and titlescreen load)."
118,8259329,2,Palettes,Background color. Used during gameplay in conjunction with $2132.
119,8259331,512,Palettes,"The entire palette. It is only uploaded to CGRAM during the level loading routine. Also used during overworld load, but not all of it."
120,8259843,2,Palettes,Copy of background color $7E:0701/2.
121,8259845,496,Palettes,"Copy of palettes 0-F from $0703-$08F2.  Only the first half of palette F is included.  It is used in overworld path events fading in ($04:EAA0), and level ending fade in/out ($00:AF9D)."
122,8260341,1,Empty,Cleared on reset and titlescreen load. Also cleared after a boss had been beaten - this can be disabled by changing [9C 5C 0A] at $00:B08D to [80 01 EA].
123,8260342,256,Misc.,"Used for three different things:

1. Decompressed overworld graphics, animated tiles. For that it also cooperates with $7E:0BF6-$7E:0C55.

2. Iggy's/Larry's platform interaction. (16x16 tiles in a 16x16 square.)

3. Various tables for the Yoshi eggs at the credits, such as how much time must be waited until a new egg breaks, Y speed tables.  See this post.


In addition, Lunar Magic 3.00+ uses part of this region to support the expanded horizontal level system. Addresses are as follows:


$0BEE: Used if the Smart Spawn option is set to check if the screen has scrolled horizontally this frame.

$0BEF: Used if the Smart Spawn option is set to check if the screen has scrolled vertically this frame.

$0BF0-$0BF1: Minimum Y offset from the screen that a sprite can be in order to spawn.  Set depending on the spawn range index.

$0BF2-$0BF3: Maximum Y offset from the screen that a sprite can be in order to spawn.  Set depending on the spawn range index.

$0BF4: Extra flags for sprites, s-----rr.  s = Smart Spawn flag, rr = spawn range index, - = unused bits.

$0BF5: Extra flags and horizontal level mode, tbnmmmmm.  t = flags the level as using a non-background Layer 2 or 3, b = show the bottom row of the level, n = use the new sprite system, mmmmm = horizontal level mode (see here for more info)."
124,8260598,384,Misc.,"Decompressed GFX for tiles #$4A-#$4F, #$5A-#$5F of SP1.


In addition, Lunar Magic 3.00+ uses this region to support the expanded horizontal level system. Addresses are used as follows:


$0BF6-$0C55: Table of up to 32 24-bit pointers to the low byte of the object data in each screen.  These point to locations in $7EC800.  $0C26-$0C55 is used for Layer 2/3 data in levels with a Layer 2/3 foreground.

$0C56-$0CB5: Table of up to 32 24-bit pointers to the high byte of the object data in each screen.  These point to locations in $7FC800.  $0C86-$0CB5 is used for Layer 2/3 data in levels with a Layer 2/3 foreground.

$0CB6-$0CD5: Copy of the low bytes of the table at $0BF6.  $0CC6-$0CD5 is used for Layer 2/3 data in levels with a Layer 2/3 foreground.

$0CD6-$0CF5: Copy of the low bytes of the table at $0C56.  $0CE6-$0CF5 is used for Layer 2/3 data in levels with a Layer 2/3 foreground.

$0CF6-$0D35: Table of up to 32 16-bit pointers to the sprite data in each screen.  These are used to change $CE-$CF.

$0D36-$0D75: Table of up to 32 16-bit values, one for each screen.  The low byte is used to modify the sprite's Y position, while the high byte indicates the number of the sprite within the level (or the number of sprites that have been processed in the level so far)."
125,8260982,2,Graphics,Used during the GFX33 DMA routine.  It holds the first of three possible source addresses for the animated graphics.
126,8260984,2,Graphics,Used during the GFX33 DMA routine.  It holds the second of three possible source addresses for the animated graphics.
127,8260986,2,Graphics,Used during the GFX33 DMA routine.  It holds the third of three possible source addresses for the animated graphics.
128,8260988,2,Graphics,Used during the GFX33 DMA routine.  It holds the first of three possible VRAM addresses for the animated graphics.
129,8260990,2,Graphics,Used during the GFX33 DMA routine. It holds the second of three possible VRAM addresses for the animated graphics.
130,8260992,2,Graphics,Used during the GFX33 DMA routine.  It holds the third of three possible VRAM addresses for the animated graphics.
131,8260994,2,Pointer,16-bit pointer to the player palette. #$B2C8 = regular Mario; #$B2DC = regular Luigi; #$B2F0 = fire Mario; #$B304 = fire Luigi. Always uses #$00 for bank byte (the first bank).
132,8260996,1,Misc.,"Used in Player Graphics DMA routine. This holds the amount of tiles to load. Is #$0A in levels (because of Yoshi) and #$06 on the overworld.

If it's set to zero, the player palette isn't reloaded. The presents screen makes use of that."
133,8260997,20,Sprites,"16-bit pointers in bank $7E for uploading the player's, Yoshi's and Podoboo's on-screen tiles.

They're divided in two sets of 10 bytes, each two bytes being used for two 8x8 tiles. The first 10 bytes are for the top half of each 16x16 tile (player's head, player's bottom, cape, Yoshi's head/Podoboo, Yoshi's bottom), while the latter 10 bytes are for the bottom half of each 16x16 tile (same order).


The format to calculate the tile used is as follows: ([8x8 tile number] - $900 * $20) + $2000.
NOTE: The tile number is only applicable to page 9 onwards."
134,8261017,2,Graphics,Holds the lower two bytes of the 24-bit RAM address (bank byte is $7E) of tile 7F's graphics; used during the player graphics DMA routine.
135,8261019,1,Misc.,"Activates different IRQ/NMI behavior for various game modes, depending on the following values:

#$00 = Regular level.

#$01 = Mario Start, Time Up, etc. + Title Screen + Castle destruction scene.

#$02 = Overworld.

#$80 = Iggy's and Larry's battle mode.

#$C0 = Reznor's, Morton's and Roy's battle mode.

#$C1 = Bowser's battle mode."
136,8261020,1,Empty,Empty. Cleared on reset and titlescreen load.
137,8261021,1,Hardware mirror,Main Screen and Window logic mask setting of current level mode (000abcde - a = Object layer; b = Layer 4; c = Layer 3; d = Layer 2; e = Layer 1). Appears as TM in Lunar Magic. Mirror of SNES registers $212C and $212E; transfer only occurs on level load.
138,8261022,1,Hardware mirror,Sub Screen and Window logic mask setting of current level mode (000abcde - a = Object layer; b = Layer 4; c = Layer 3; d = Layer 2; e = Layer 1). Appears as TD in Lunar Magic. Mirror of SNES registers $212D and $212F; transfer only occurs on level load.
139,8261023,1,Hardware mirror,HDMA Channel Enable: abcdefgh a = Channel 7 .. h = Channel 0: 1 = Enable 0 = Disable. Mirror of SNES register $420C.
140,8261024,1,Misc.,"Which controllers are plugged in (00 = port 1, 01 = port 2). Used to determine which port to accept data from when only one controller is plugged in.


If the high bit is set, then both controller ports are plugged in and $0DB3 will be used instead to determine the active controller."
141,8261025,1,Empty,Empty. Cleared on reset and titlescreen load.
142,8261026,1,I/O,"Copy of controller data 1 ($7E:0015). Format: byetUDLR.

b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.

Used by player 1 (Mario)."
143,8261027,1,I/O,"Copy of controller data 1 ($7E:0015). Format: byetUDLR.

b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.

Used by player 2 (Luigi)."
144,8261028,1,I/O,"Copy of controller data 2 ($7E:0017). Format: axlr----.

a = A; x = X; l = L; r = R, 0 = null/unused.

Note that the upper two bits are also used by controller data 1 at $7E:0015, so that A/B and X/Y are combined.

Used by player 1 (Mario)."
145,8261029,1,I/O,"Copy of controller data 2 ($7E:0017). Format: axlr----.

a = A; x = X; l = L; r = R, 0 = null/unused.

Note that the upper two bits are also used by controller data 1 at $7E:0015, so that A/B and X/Y are combined.

Used by player 2 (Luigi)."
146,8261030,1,I/O,"Copy of controller data 1, one frame ($7E:0016). Format: byetUDLR.

b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.

Used by player 1 (Mario)."
147,8261031,1,I/O,"Copy of controller data 1, one frame ($7E:0016). Format: byetUDLR.

b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.

Used by player 2 (Luigi)."
148,8261032,1,I/O,"Copy of controller data 2, one frame ($7E:0018). Format: axlr----.

a = A; x = X; l = L; r = R, 0 = null/unused.

Note that the sixth bit is also used by controller data 1 at $7E:0016, so that X/Y are combined.

Used by player 1 (Mario)."
149,8261033,1,I/O,"Copy of controller data 2, one frame ($7E:0018). Format: axlr----.

a = A; x = X; l = L; r = R, 0 = null/unused.

Note that the sixth bit is also used by controller data 1 at $7E:0016, so that X/Y are combined.

Used by player 2 (Luigi)."
150,8261034,1,I/O,"Controller 1 button disable flags ($4219), one frame. If a bit is set here, that bit will be disabled in $16/$0DA6 (but not $15).

Format: byetUDLR.

b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right."
151,8261035,1,I/O,"Controller 2 button disable flags ($421B), one frame. If a bit is set here, that bit will be disabled in $16/$0DA7 (but not $15).

Format: byetUDLR.

b = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right."
152,8261036,1,I/O,"Controller 1 button disable flags ($4218), one frame. If a bit is set here, that bit will be disabled in $18/$0DA8 (but not $17).

Format: axlr----.

a = A, x = X, l = L, r = R, 0 = null/unused."
153,8261037,1,I/O,"Controller 2 button disable flags ($421A), one frame. If a bit is set here, that bit will be disabled in $18/$0DA9 (but not $17).

Format: axlr----.

a = A, x = X, l = L, r = R, 0 = null/unused."
154,8261038,1,Hardware mirror,"Handles brightness and force blank. Format: f---bbbb. f = force blank flag, --- = unused bits, bbbb = brightness setting. Mirror of SNES register $2100."
155,8261039,1,Misc.,Mosaic direction. #$00 = shrinking mosaic; #$01 = growing mosaic.
156,8261040,1,Hardware mirror,"Current mosaic pixel size on level load. Mirror of SNES register $2106, though bits 0 and 1 are always set ($2106 = $7E:0DB0 | #$03)."
157,8261041,1,Timer,"Is used to keep a mode active. If the respective value is positive, the game mode doesn't change. This is primarily used in the fading routines (example: from overworld to level and vice versa)."
158,8261042,1,Flag,Two player game flag. #$00 = No; #$01 = Yes.
159,8261043,1,Player,"Which character is in play. #$00 = Mario; #$01 = Luigi. If you prefer Luigi to be #$04, use $7E:0DD6."
160,8261044,1,Player,"Mario's lives. Note that this is only used in two player games, you'll want $7E:0DBE in 99% of the cases."
161,8261045,1,Player,"Luigi's lives. Note that this is only used in two player games, you'll want $7E:0DBE in 99% of the cases."
162,8261046,1,Player,"Mario's coins. Note that this is only used in two player games, you'll want $7E:0DBF in 99% of the cases."
163,8261047,1,Player,"Luigi's coins. Note that this is only used in two player games, you'll want $7E:0DBF in 99% of the cases."
164,8261048,1,Player,"Mario's powerup/status. Note that this is only used in two player games, you'll want $7E:0019 in 99% of the cases."
165,8261049,1,Player,"Luigi's powerup/status. Note that this is only used in two player games, you'll want $7E:0019 in 99% of the cases."
166,8261050,1,Yoshi,Mario's Yoshi color. #$04=yellow; #$06=blue; #$08=red; #$0A=green
167,8261051,1,Yoshi,Luigi's Yoshi color. #$04=yellow; #$06=blue; #$08=red; #$0A=green
168,8261052,1,Player,Item in Mario's item box. #$00 = None; #$01 = Mushroom; #$02 = Fire Flower; #$03 = Star; #$04 = Feather. Note that you'll want $7E:0DC2 in most cases.
169,8261053,1,Player,Item in Luigi's item box. #$00 = None; #$01 = Mushroom; #$02 = Fire Flower; #$03 = Star; #$04 = Feather. Note that you'll want $7E:0DC2 in most cases.
170,8261054,1,Player,"Current player lives, minus one (#$04 here means that the player has 5 lives)."
171,8261055,1,Player,Current player coin count.
172,8261056,1,Counter,"Green star block coin counter. Starts at 30 (#$1E) at the beginning of a level, and decrements for each coin that is collected. Adjusts content of green star block when it hits zero. (A 1-Up mushroom comes out, instead of a spinning coin.)

It is also used in Chocolate Island 2 to count how many coins have been collected since the start of the level, and determine what sublevel data should be loaded."
173,8261057,1,Yoshi,Player can carry Yoshi over levels flag. #$00 = can't carry over levels; #$01 = can carry over levels.
174,8261058,1,Player,Item in current player's item box. #$00 = None; #$01 = Mushroom; #$02 = Fire Flower; #$03 = Star; #$04 = Feather.
175,8261059,4,Empty,"Empty. Cleared on reset and titlescreen load. $7E:0DC3 is also cleared when selecting how many players to use, but this can be disabled with no known side effects by setting $00:9E48 to [80 01 EA]."
176,8261063,2,Player,Overworld X position where Mario should be going to. Is used by overworld path tiles to indicate Mario's direction. Updated as soon as Mario starts moving - zero otherwise.
177,8261065,2,Player,Overworld Y position where Mario should be going to. Is used by overworld path tiles to indicate Mario's direction. Updated as soon as Mario starts moving - zero otherwise.
178,8261067,2,Player,Overworld X position where Luigi should be going to. Is used by overworld path tiles to indicate Luigi's direction. Updated as soon as Luigi starts moving - zero otherwise.
179,8261069,2,Player,Overworld Y position where Luigi should be going to. Is used by overworld path tiles to indicate Luigi's direction. Updated as soon as Luigi starts moving - zero otherwise.
180,8261071,2,Player,"Player X speed on the overworld. Added with $7E:13D5, which does happen to be zero all the time."
181,8261073,2,Player,"Player Y speed on the overworld. Added with $7E:13D7, which is zero most of the time."
182,8261075,1,Overworld,Player direction. #$00 = up; #$02 = down; #$04 = left; #$06 = right.
183,8261076,1,Should be 00,"This address is effectively the high byte of $0DD3 on the overworld and should not be touched there, though in levels it is unused. It is also referenced once as the low byte of $0DD5, though its value isn't used there.

Cleared on reset and titlescreen load, and when Mario starts walking on an overworld path."
184,8261077,1,Misc.,"Used to indicate how a level has been exited, and hence what events to activate on the overworld.Valid Values"
185,8261078,1,Player,"Which character is in play. Used on the overworld. The value of this address is actually $7E:0DB3 * 4.

#$00 = Mario; #$04 = Luigi."
186,8261079,1,Should be 00,"An address that is expected to be #$00 throughout the entire game. $7E:0DD6 (current player) is sometimes used in 16bit mode, so using this address for different purposes is a bad idea."
187,8261080,1,Flag,"Used to tell if the game is currently switching between Mario and Luigi or not.

#$00 = Not switching between Mario and Luigi.

#$01 = Switching between Mario and Luigi, during the fade-out."
188,8261081,1,Empty,Empty. Cleared on reset and titlescreen load.
189,8261082,1,Misc.,"Back-up of the music register. Gets its value from the level music table at $05:84DB.

Bit 7 of this address is set when the player has a star powerup or presses a P-switch; when this is cleared again, the music ends.

This address is also set to #$FF when the level ends, either by beating it or by dying.

Bit 6 is similar but is used to not reupload all music.  This is used when changing from the Mario start screen to the level game mode."
190,8261083,3,Empty,Empty. Cleared on reset and titlescreen load.
191,8261086,1,Misc.,Which files to delete on the erase file screen. Format: xxxxx123. It is also used as an overworld sprite index.
192,8261087,1,Sprites,Starting OAM index for overworld sprites. Appears to be used only by the cloud sprites.
193,8261088,5,Sprites,"Used for the overworld cloud sprites. This table is used in such a way that clouds check each other's 16-bit Y positions. By doing this, they can maintain their speed, making it the same for all clouds on-screen."
194,8261093,16,Sprites,Overworld sprite number.Valid Values
195,8261109,16,Sprites,Miscellaneous overworld sprite table.
196,8261125,16,Sprites,Miscellaneous overworld sprite table.
197,8261141,16,Sprites,Miscellaneous overworld sprite table.
198,8261157,16,Sprites,Miscellaneous overworld sprite table.
199,8261173,16,Sprites,"Overworld sprite X position, low byte."
200,8261189,16,Sprites,"Overworld sprite Y position, low byte."
201,8261205,16,Sprites,"Overworld sprite Z position, low byte; distance that the sprite is from the ground."
202,8261221,16,Sprites,"Overworld sprite X position, high byte."
203,8261237,16,Sprites,"Overworld sprite Y position, high byte."
204,8261253,16,Sprites,"Overworld sprite Z position, high byte; distance that the sprite is from the ground. Probably has no real purpose in the original SMW; it may not be anything but #$00."
205,8261269,16,Sprites,Overworld sprite X speed.
206,8261285,16,Sprites,Overworld sprite Y speed.
207,8261301,16,Sprites,Overworld sprite Z speed.
208,8261317,16,Sprites,Accumulating fraction bits for overworld sprite X speed.
209,8261333,16,Sprites,Accumulating fraction bits for overworld sprite Y speed.
210,8261349,16,Sprites,Accumulating fraction bits for overworld sprite Z speed.
211,8261365,1,Overworld,"This would be used to check whether the Koopa Kid should activate. Most likely it was used to prevent the Koopa Kid from triggering multiple times. Uses bits 5-7 only (#$80, #$40 and #$20). 

This address can be used as empty free RAM if you do not use the overworld koopa kids, it is cleared on reset and titlescreen load."
212,8261366,1,Overworld,"Indicates which of the koopa kid triggers you are standing on.  By default the tiles are: #$49, #$4A and #$4B.  These correspond to index #$00, #$01 and #$02 respectively. This address is unused in the original SMW and can be used as empty free RAM, it is cleared on reset and titlescreen load."
213,8261367,1,Misc.,"If bit 7 is set (#$80-#$FF) and the player is located on a level tile, he will enter it directly."
214,8261368,1,Flag,Yoshi has been saved for the first time flag - used for Yoshi's thank message.
215,8261369,55,Misc.,"Status bar tilemap.View tiles as a table
Diagram"
216,8261424,1,Counter,"Timer frame counter. When this address reaches #$00, one second is subtracted from SMW's timer, after which this address is set to #$28. This means that a SMW second is only 40 frames - in NTSC (60Hz), three SMW seconds = two real seconds"
217,8261425,3,Counter,"Timer.

$7E:0F31 = Hundreds.

$7E:0F32 = Tens.

$7E:0F33 = Ones."
218,8261428,6,Counter,"24-bit player score:


$7E0F34-$7E0F36: Mario.

$7E0F37-$7E0F39: Luigi.


Note: SMW stores the scores internally as the number displayed on the status bar divided by 10 (""1234560"" shown is 123456 ($01E240) stored in memory).


Note: This number is stored in little endian the same way 16-bit values are stored ($01E240 is [$40, $E2, $01])."
219,8261434,6,Empty,Empty. Cleared on reset and titlescreen load.
220,8261440,2,Counter,"Amount of score to add up to the score total, at level end. Decrements as total score increments."
221,8261442,6,Empty,Empty. Cleared on reset and titlescreen load.
222,8261448,1,Counter,Mario Bonus stars.
223,8261449,1,Counter,Luigi Bonus stars.
224,8261450,20,Sprites,"Cluster sprite table. Is used for the castle background flame's frame to display, as well as Boo ring's speed - #$00 = still; #$01-#$7F = counter-clockwise; #$80-#$FF = clockwise.

Is also used for several other sprites that are generated, such as the ghost ceiling, but not necessarily for the same purpose."
225,8261470,20,Empty,"Empty. Cleared on reset and titlescreen load. This table was probably meant to function as a cluster sprite table, but it was never used as such."
226,8261490,20,Sprites,"Cluster sprite table. Could be used for any purpose - in the original SMW, it holds the index of each individual Boo in a Boo ring (#$00-#$09). It is also used in the death bat ceiling to keep track of the bats' Y position."
227,8261510,20,Sprites,"Cluster sprite table, used for various purposes including determining which Boo ring is which and determining whether or not a particular ""death bat"" is visible."
228,8261530,20,Sprites,"Cluster sprite table. Its purpose in SMW are the following: act as a timer for determining when death bats will fly, and as a timer to freeze an active Boo in the ghost ceiling."
229,8261550,2,Sprites,"Low byte of the angle of the Boo rings. $7E:0FAE is for the first Boo ring active; $7E:0FAF is for the second Boo ring active.

Note that this is not reset on level or overworld load."
230,8261552,2,Sprites,"High byte of the angle of the Boo rings. $7E:0FB0 is for the first Boo ring active; $7E:0FB1 is for the second Boo ring active.

Note that this does not reset on level or overworld load."
231,8261554,2,Sprites,"Boo ring center X position, low byte. $7E:0FB2 is for the first active Boo ring; $7E:0FB3 is for the second active Boo ring."
232,8261556,2,Sprites,"Boo ring center X position, high byte. $7E:0FB4 is for the first active Boo ring; $7E:0FB5 is for the second active Boo ring."
233,8261558,2,Sprites,"Boo ring center Y position, low byte. $7E:0FB6 is for the first active Boo ring; $7E:0FB7 is for the second active Boo ring."
234,8261560,2,Sprites,"Boo ring center Y position, high byte. $7E:0FB8 is for the first active Boo ring; $7E:0FB9 is for the second active Boo ring."
235,8261562,2,Sprites,"Offscreen flag for the Boo ring. If a byte is set to 01, the ring is offscreen and doesn't show up. $7E:0FBA is for the first Boo ring active; $7E:0FBB is for the second."
236,8261564,2,Sprites,"Boo ring index to level table (see $7E:1938). They are never erased, though, so they will always be reloaded."
237,8261566,1024,Pointer,"16-bit pointer table, indexed by Map16 tile number*2. Points to the image to use for a certain Map16 tile. Usually starts with #$8000 or $9100 (levels) or #$D000 (overworld) and the value counts up with eight per two RAM addresses. Bank byte should be #$0D (levels) or #$05 (overworld)."
238,8262590,1,Misc.,Item memory settings from header.
239,8262591,1,Misc.,"Translevel number, set during transfer from world map to level. This identifies the first room of the current level. To convert this to a room number (the ""level number"" in Lunar Magic), if > #$24, then add #$DC.


In the clean ROM, the actual formula is more complex. If translevel number > #$24, then subtract #$24. Then check RAM $7E:1F11 or $7E:1F12. If the player is in a submap (not the big world map), then add #$100. The submaps of SMW use translevel numbers > #$24, and the big map uses numbers <= #$24, so the simplication is that #$100 - #$24 is #$DC; Lunar Magic forces this simplification to remain."
240,8262592,1,Should be 00,"While this is never non-zero in the original SMW, $7E:13BF (level number) is sometimes used in 16bit mode, so using this address for different purposes is a bad idea

To make this one become useful free RAM, change $05:D9C9 to [E2 10 AC BF 13 B9 08 D6 8D EA 1D] (header : lorom : org $05D9C9 : SEP #$10 : LDY $13BF : LDA $D608,y : STA $1DEA)."
241,8262593,1,Overworld,Current Layer 1 overworld tile the player is standing on.
242,8262594,1,Should be 00,"Used occasionally on the overworld as the high byte of $13C1, and thus should be kept as #$00 there. It is safe to use in levels, however.

Cleared on reset, title screen load, and when walking onto a new overworld tile."
243,8262595,1,Overworld,"Current player submap. #$00 = Main map; #$01 = Yoshi's Island; #$02 = Vanilla Dome; #$03 = Forest of Illusion; #$04 = Valley of Bowser; #$05 = Special World; #$06 = Star World.

Note that it is sometimes inaccurate. It is wiser to use $7E:0DB3 and $7E:1F11."
244,8262596,1,Should be 00,"An address that is expected to be #$00 throughout the entire game. $7E:13C3 (current player submap) is often used in 16-bit mode, so using this address for different purposes is a bad idea, unless you make sure it's cleared on overworld load. Is also cleared during the switch between Mario and Luigi. Furthermore, cleared on reset and titlescreen load."
245,8262597,1,Counter,"Increments each time a 3-Up moon is collected, serves no other purpose. (Its value is never loaded.)"
246,8262598,1,Misc.,"Used by SMW's cutscenes. Goes from #$01 to #$08 and these values are in the order of the boss battles, e.g. #$01 = Iggy's castle, #$02 = Morton's castle. #$08 is the value used for the credits.

Set to #$FF (in conjunction with $7E1493) to end the level as a boss fight: Mario won't walk during the fanfare, and it will trigger the boss cutscene set in Lunar Magic for the current level (if any). This also works for triggering the credit sequence."
247,8262599,1,Yoshi,Yoshi color. #$04=yellow; #$06=blue; #$08=red; #$0A=green. Refreshes on level change
248,8262600,1,Empty,Empty. Cleared on reset and titlescreen load.
249,8262601,1,Flag,"Show ""Continue/End"" menu flag.

#$00 = Don't show it; #$01 = freeze player, but don't load the text yet; #$02 = freeze player, load ""Continue/End"" menu."
250,8262602,1,Flag,Show save prompt flag. It actually triggers when you get on a new level tile. #$00 = Don't show save prompt; #$01 = show save prompt.
251,8262603,1,Misc.,"This has been left out in the current SMW version.


When you hit a goal tape, and spawn a starman (which never happens), this is set to #$01. Now each time you switch an area in a level, this gets multiplied by 2. When this reaches #$80 (changed area seven times), you will start the area with the star power. The instruction which sets this address to #$01 is located at $00:FB5C."
252,8262604,1,Counter,"The value you store here is the amount of coins that are being added up, once per frame, to the total (done by incrementing the coin count and decrementing $13CC until 0). This is originally to allow the coin incrementing animation instead of instantly showing the total. This is handled by a code at $008F1D-$008F27.


Usually, $7E:13CC is either #$00 or #$01 (Sprite $7E (unused flying red coin)), but it can be set to other values in order to add up multiple coins at once."
253,8262605,1,Misc.,"If set to #$00, the midway point won't trigger if grabbed (it'll still make you big, but it won't set the midway flag). Never has any effect in the original SMW, probably left over from a beta.

Lunar Magic disables this effect (see $00F2DB) and uses this for different purposes. For example, it's used during level load, in the routine at $03BCDC and during level scroll code."
254,8262606,1,Flag,"Midway Point flag. #$00 = Midway Point not crossed; #$01 = Midway Point crossed.


Also used on the overworld as a flag to to indicate the level should activate an event."
255,8262607,1,Flag,"Used to override the castle/ghost house entrance cutscene after you collect the midway point.


#$00 = Show castle/ghost house entrance cutscene after collecting midway point.

#$40 = Don't show castle/ghost house entrance cutscene after collecting midway point. Note that any non-zero value will work, this is just what SMW uses.


Change $05:D9DE to #$9C to make the cutscene play regardless."
256,8262608,1,Overworld,"Index to what tile should be stored to VRAM during the castle/switch palace/fortress destruction sequence.

#$00 = Pressed green switch.

#$01 = Pressed yellow/red/blue switch.

#$02 = Destroyed fortress.

#$03 = Destroyed castle with exit.

#$04 = Destroyed castle without exit.

The tile data is then read from $04:EE7A through a 24-bit pointer at $7E:000A (scratch RAM)."
257,8262609,1,Overworld,"Holds the value of the listed castle/fortress/switch tile that must be destroyed, by checking which event it uses (table at $04E5D6). For example, event #$06 (Iggy's Castle destroyed) makes this address hold value #$00 (it's the first slot in the table).

This address is then used as index to the address where the destroyed tile is uploaded to VRAM."
258,8262610,1,Misc.,"Color of the currently pressed switch palace, or #$00 for None. It's set to #$01 when the player hits a switch palace, and then set to the correct color (#$01 for Yellow, #$02 for Blue, #$03 for Red and #$04 for Green, others are oddly colored and/or flipped) by the message box routine. It creates both the ! blocks in the message boxes and on the overworld."
259,8262611,1,Flag,"Timer that disables Start from flipping the Pause flag when its value is not #$00 (thus, #$01-#$FF). If it is #$00, being able to press Start to get into the Pause mode is possible."
260,8262612,1,Flag,"The pause flag for levels, and the ""look around the map"" flag on the overworld.


In a level: #$00 = off, #$01 = Paused

On the overworld: #$00 = off, #$01 = Look around, #$02 = Return to Mario"
261,8262613,1,Misc.,"A flag that determines whether or not Layer 3 should scroll with the screen. If this is zero, Layer 3 will scroll depending on the tileset and tide setting; if it is any other value, Layer 3 will always be at the same position relative to Layer 1.

Also used on the overworld as accumulating fraction bits for player X speed (see $04:9801)."
262,8262614,1,Timer,"Amount of time to wait until the score-incrementing drumroll begins when you beat a level.  Any time you enter a level, this address is set to #$50.  Once you beat the level and the number of bonus stars you won and the score is displayed (or just the score if you didn't cut the goal tape), this timer will decrement itself once per frame.  Once it reaches a negative value or zero, the drumroll will commence. 

Once the drumroll ends, this is set to #$30, and then set to zero upon going to the overworld.  It serves the same purpose after you beat a boss as well."
263,8262615,2,Overworld,"Y position fraction bits for the intro march (walking to Yoshi's House). Treated as 16-bit, but the high byte is effectively unused outside of being written to.


With Lunar Magic v3.00, this address gains a new purpose in horizontal levels, being used to hold the height of the level data (in units of pixels).

For example, in the original level sizes, this value is set to 0x01B0 (for 0x1B blocks tall). Because the level screen is always 16 blocks wide, this is also the number of blocks per screen column."
264,8262617,1,Pointer,"A pointer to various processes running on the overworld.

Also used in the level end march.Valid Values (Overworld)
Valid Values (Level end)"
265,8262618,1,Player,"Accumulating fraction bits (fractions of 16; bits 4-7 used while bits 0-3 are always zero; #%XXXX0000) for fixed point player X position (not to be confused with $7E007A). This is used mainly for player's X speed position movement to enable increments for less-than a pixel.


Handled via a routine at $00DC4F."
266,8262619,1,Player,"Player walking frame pose. 


While walking, it gets the values from the table at $00:DC78, indexed by $7E:0019, which eventually becomes the player pose if the player does nothing else. The duration of each frame is read from $00:DC7C, though $7E:13DB plays no role in this. Note that this never is #$02 if the player is small.

$7E:13DB plays a role in determining which walking frame should be raised one pixel - see $00E35D."
267,8262620,1,Player,Accumulating fraction bits for fixed point player Y position. Same format as $7E13DA but Y position instead of X.
268,8262621,1,Player,"Pose used while the player is on the ground and turning around with a non-zero X speed. Uses same format as $13E0.


This address can be used as a flag for when the player is turning, but note that it only gets set if the player is moving horizontally already; if the player turns from a stand-still, it will not be set. $1499 can be used to check this instead if the player is also holding an item."
269,8262622,1,Player,"Poses used on overworld map and during credits by the player. The animation uses three frames, namely: this value, this value + 1, and this value + 2.

Can also be used as a ""Player is looking up"" flag. That's cleared every frame, and it's set to #$03 when holding the Up arrow and standing still. The graphics routine is the only code that actually reads it."
270,8262623,1,Player,"This address controls which image must be shown of the cape. This obviously only has effect when the player has a cape at all.


While walking and sprint-jumping, frames 3 through 6 are cycled through, while 7 through A are used when falling downward. Pose zero is used for both standing still and jumping straight upwards, but is never shown without being preceded by frames 2 and 1.


Note that when the player is swooping/flying with his cape, $7E:13E0 will override the cape image. See also the diagram shown under $7E:13E0, poses #$2A through #$2F. Whatever value $7E:13DF has will be irrelevant during this phase.


Cape images beyond #$0A are not recommended for usage, as they are glitched.Diagram"
271,8262624,1,Player,"This address controls the ""main"" poses of Mario and Luigi. Adjusting it will adjust the player's image as such.


Of note are the following poses. Poses #$40 and #$41 are blank - the player is ""invisible"". These are indicated with a large red cross in the diagram. Poses #$2A through #$2F absolutely require the player to have a cape powerup, otherwise they aren't shown correctly. Pose #$42 (inflated, small) can be shown regardless of powerup. It is obviously not recommended to be used as such. The same can be said about pose #$43 (inflated, big). Poses #$00, #$3D and #$46 are all used in the powerup animation. Poses #$14, #$20, #$21, #$27, #$28 and #$29 are all used during Yoshi riding. Any pose beyond #$46 is not recommended to use, as they can be glitchy.Diagram"
272,8262625,1,Player,What kind of slope the player is on (also set when flying with a cape).Valid Values
273,8262626,1,Player,"Spinjump fireball timer. It increments every frame when the player spinjumps, if he has fire power. If the lowest four bits are clear, the player will throw out a fireball. The fourth bit (#$10) is the direction in which that fireball will move."
274,8262627,1,Player,Player is wall-running flag.Valid Values
275,8262628,1,Player,"Player dash timer/P-meter. Increments with #$02 every frame the player is walking on the ground with the dash button held, otherwise decrements until it is zero. #$70 indicates that the player is at its maximum running speed, and also means that the player is able to fly with a cape."
276,8262629,1,Player,"This is the index used to index the table at $00DC7C, to determine how many frames to store to the player animation timer, at $7E:1496. It changes depending on the surface the player is standing/walking/running on.Possible values"
277,8262630,2,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
278,8262632,1,Flag,"Cape spin interacts with sprites flag.

#$00 = don't interact; #$01 = do interact."
279,8262633,2,Player,Cape interaction X position within the level. It's adjusted when the cape attack is used.
280,8262635,2,Player,Cape interaction Y position within the level. It's adjusted when the cape attack is used.
281,8262637,1,Player,"Player pose on a slope when sliding, is set to #$1C.

This value is also negative (bit 7 set) when landing from flying, which allows the player to slide."
282,8262638,1,Player,What kind of slope the player is on.Valid Values
283,8262639,1,Player,"Player is on ground flag. Set to #$01 on Layer 1, #$02 on Layer 2, and #$03 when on both. If he's running fast enough up a slope, that value is doubled.


Is only set when touching an actual floor, and not when running up walls. Does not work correctly in blocks, as the value still has to be calculated at that point. Instead, the value is copied over to $7E008D during that time. If Layer 1 interaction is enabled, that address is also doubled."
284,8262640,1,Player,Used to calculate the index to the direction the player faces while using a climbing net door. The formula is $7E:149D << 1 & #$0E | $7E:13F0. This address gets its value from $7E:13F9.
285,8262641,1,Flag,"Vertical Scroll enable flag. #$00 = disabled; #$01 = enabled. Not to be confused with $7E1412 (for most ASM codes, to enable/disable vertical scrolling, using $1412 is recommended instead)."
286,8262642,1,Empty,"Cleared on reset, titlescreen, overworld, and cutscene load, as well as at $00F8A7. (TODO: What exactly is this routine?)"
287,8262643,1,Timer,"When you get a P-balloon, this is set to #$09. Each frame afterwards, this is decremented until it gets to #$01, at which point the player will begin to show his inflated frame."
288,8262644,5,Blocks,"A byte assigned to each row of blocks in the coin bonus game.  Updated as blocks are chosen by the player to decide whether a life is given or not. If the value is #$FF,  a life will be handed out. $7E:13F4 is for the uppermost row, $7E:13F5 for the one below that, etc."
289,8262649,1,Player,"Flag that sends Mario behind layers.

01 will send him behind objects, 02 will send him behind objects and sprites, and 03 will only send him behind sprites.


Setting to 01 also treats Mario as if he's behind a net, meaning he'll only interact with sprites also behind nets. 02 and 03 will disable sprite interaction altogether."
290,8262650,1,Player,Whether the player is capable of jumping out of the water immediately or not (so just below the surface). #$00 = No; #$01 = Yes.
291,8262651,1,Player,"Player is frozen flag. This includes controls and animation. Other sprites still move and can interact with the player, but contact with them should be avoided, as it would freeze the game. This may be useful for cutscenes to eliminate the jumping sound."
292,8262652,1,Misc.,"Currently active boss. Used for determining which graphics to load, as well as checking for various other purposes (like when the player should have priority over certain sprite backgrounds, that can be found in the boss rooms).

#$00 = Morton; #$01 = Roy; #$02 = Ludwig; #$03 = Bowser; #$04 = Reznor

Note that Iggy, Lemmy, Wendy and Larry don't make use of this. Cleared on level->overworld transitions, and possibly at other times too."
293,8262653,1,Flag,"When the L/R button is pressed, this address gets set to #$01 which briefly freezes the screen while the screen scrolls in whatever direction you pressed. It's cleared again when scrolling is done."
294,8262654,1,Misc.,"#$02 = scroll right, #$04 = scroll left. Used when L/R is pressed."
295,8262655,1,Player,Player direction ($7E:0076) times 2.  Used in the L/R screen-scrolling routine to determine when the screen will stop scrolling.
296,8262656,1,Camera,"Controls if the camera should move to be at the proper place compared to the player. If this is set, L and R are ignored.

#$00 = normal case, don't move camera automatically, keep it in place (assuming L/R aren't used).

#$08 = move camera right.

#$0A = move camera left."
297,8262657,1,Timer,"Increments with one each time one of the L/R buttons is pressed, until the timer hits #$10 (at which the L/R screen scroll is activated) or if the buttons are released."
298,8262658,1,Blocks,"A flag that is set when the player is on a note block that is currently going down, i.e. the bounce sprite is moving downwards. If this wouldn't be set, the player would be pushed away from tile 152 (the tile that temporarily comes into place of the note block)."
299,8262659,1,Misc.,"Settings for current layer 3 tide.

#$00 - Not a tide image

#$01 - Water level changes

#$02 - Water level doesn't change"
300,8262660,1,Flag,"If ""vertical scroll at will"" is enabled, then this flag controls if the screen should scroll up to the player. If you set this to a non-zero value every frame, it can be seen as a temporary alternative to setting $00:F878/0x7A78 to #$80, since the latter is permanent."
301,8262661,1,Flag,"Indicates that the player is just about to warp to another level via a pipe, and whether or not Yoshi should be drawn at that point. It is set as soon as $7E:0088 reaches zero, and if Yoshi is inside the warp pipe too, his graphics will be hidden."
302,8262662,1,Camera,"This is set to #$80 if you bounce off of a springboard or a purple triangle (while on Yoshi, that is), and is cleared when touching the ground.

The game uses this, along with some other RAM addresses, to determine if the screen should scroll up with the player or not."
303,8262663,1,Player,"Player flying with cape phase.

Controls player pose as well (table at $00:CE79).Valid Values"
304,8262664,1,Player,"Used to index the cape gliding table at $00:D7D4 to see what the next step should be in the cape gliding phase. That value is (eventually) stored in $7E:1407.

#$00 = Make player rise.

#$01 = Make player sink (eventually swoop down).

#$02 = Holding off left/right button, make player sink, but not swoop down.

#$03 = Holding off left/right button, swooping down, make player  sink less.

#$04 = Holding off left/right and X/Y buttons, terminate cape gliding."
305,8262665,1,Player,"Keeps track of the furthest stage the player has been diving during flight. Possible values are:

#$F8: the stage when not holding the right or left button

#$F4: Partially aiming towards floor

#$F0: Almost completely diving

#$C8: Diving completely, the stage where you cause an earthquake where you land.


When set to #$C8, the player will gain the large upwards boost (instead of the little normal boost) when cathing air."
306,8262666,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and during part of the cape flight routine."
307,8262667,2,Empty,"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."
308,8262669,1,Flag,Spin Jump flag. #$00 = normal jump (or on ground); any other value = spinjumping.
309,8262670,1,Sprites,"Layer 2 is touched flag, which is used in the Layer 2 sinking/rising upon touch scroll sprite. #$00 = Layer 2 not touched; #$01 = Layer 2 touched."
310,8262671,1,Flag,"Keeps incrementing in the Reznor battle room. It is used as a flag to determine that a different OAM index needs to be used for a smoke sprite or a puff of smoke, to make sure there's no conflict with the platform tiles.

However, since this keeps incrementing and thus sometimes hits #$00 again, it can occur that a platform tile disappears for one frame when a smoke sprite is shown."
311,8262672,1,Flag,"Yoshi has wings flag #1 (the other is $7E:141E). #$01 would mean that the player with a fire flower powerup can shoot fireballs while on Yoshi (never occurs in the game), whereas #$02 indicates Yoshi has wings.

Note that this one only handles graphics of the wings (value #$02), and that it disables the Yoshi tongue action (value #$01).

The value from $7E:141E is stored here each frame."
312,8262673,1,Flag,Horizontal scroll settings from header flag. #$00 = Disable; #$01 = Enable.
313,8262674,1,Misc.,Vertical scroll settings from header. #$00 = Disable; #$01 = Enable; #$02 = Enable if flying/climbing/etc.
314,8262675,1,Misc.,Horizontal scroll setting for Layer 2. #$00 = none; #$01 = constant; #$02 = variable.
315,8262676,1,Misc.,"Vertical scroll setting for Layer 2.

Lunar Magic v3.00 and above add values 04-07; the original game and older versions only allow 00-03.Valid Values"
316,8262677,2,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load."
317,8262679,2,Camera,"The base vertical offset of Layer 2 from Layer 1, when vertical scrolling is enabled for it. This is calculated based on the type of vertical scrolling set in $1414, using the initial FG/BG positions stored to $1C and $20:


If $1414 is #$01 (constant), then this is: $20 - $1C

If $1414 is #$02 (variable), then this is: $20 - ($1C / 2)

If $1414 is #$03 (slow), then this is: $20 - ($1C / 8)"
318,8262679,2,Camera,"The distance to scroll layer 2 vertically if that kind of scrolling is enabled. This is calculated based on the type of vertical scrolling set in $7E:1414. The scrolling is calculated as follows:


If $7E:1414 is #$01 (constant), then $7E:1417 is: $7E:0020-$7E:001C

If $7E:1414 is #$02 (variable), then $7E:1417 is: $7E:001C >> 1 ^ #$FFFF + 1 + $7E:0020

If $7E:1414 is #$03 (slow), then $7E:1417 is: $7E:001C >> 3 ^ #$FFFF + 1 + $7E:0020"
319,8262681,1,Yoshi,"How Yoshi should go inside a pipe.

#$01 = Duck a little (horizontal pipe).

#$02 = Face the screen (vertical pipe).

#$FF = Don't change image, only go behind layer (shooting out of slanted pipe). Note that this will probably work with all values #$03-#$FF.


An immediate effect of this is that Yoshi goes beyond layer 1 with any non-zero value. Also, Yoshi's tongue isn't shown either. This is still set even if the player isn't mounted on Yoshi, it also affects the position of carrying sprites through pipes."
320,8262682,1,Counter,"Counter that increments every time a new level is entered (with a door or pipe) - this enables you to distinguish the 'mother'-level from sublevels, as this always is zero at the start of a level. Note: Don't enter a sublevel within a level 256 times, or a glitch will occur."
321,8262683,1,Flag,"Determines if you have played the bonus game before in the same level before. If it is non-zero (meaning you've played the game before), all blocks in the coin game will always be incorrect.

Note that if you don't hit a single block the first time playing the game, then this will be zero, and you can play the game again."
322,8262684,1,Flag,"What type of goal tape has just been hit, for deciding which event to activate after the goal walk is finished.

Although this value will still be written in vertical levels, it has no effect due to the goal walk not occurring.Valid Values"
323,8262685,1,Flag,"Whether ""Mario/Luigi Start!"" should be shown or not. Used for castle entrances and the likes.

#$00 = enable; #$01 = disable."
324,8262686,1,Yoshi,"Yoshi has wings flag.  The only possible value for this address in the original is #$02, but setting to #$01 will allow the player to throw fireballs if on Yoshi, even if he is not fiery. This will, however, disable flight as well as Yoshi's tongue attack.

It's recalculated each frame."
325,8262687,1,Flag,"Disable No Yoshi Intro flag.

#$00 = regular behavior (depending on the tileset, the No Yoshi Intro is either shown or not).

#$80 = the No Yoshi Intro is disabled, regardless of tileset."
326,8262688,1,Counter,Yoshi Coins collected. Does not affect amount of Yoshi Coins on status bar.
327,8262689,1,Counter,"Counter used by the invisible 1-Up checkpoints. Starts at zero, and increments with one every time the next checkpoint has been touched. Resets to zero when a checkpoint has been touched that can't be checked yet, for example checkpoint #2 when #1 hasn't been touched yet."
328,8262690,1,Counter,"Amount of Yoshi Coins to display on the status bar. Values #$01 through #$04 are the values where it will display that number of Yoshi Coins, otherwise none are displayed."
329,8262691,1,Misc.,"Indicates which switch palace switch is being pressed.

Its value also varies depending on which side of the switch was pressed. (Left side -> it uses the first value, right side -> it uses the second.)

01/02 = green, 05/06 = yellow, 09/0A = blue, 0D/0E = red.

The bottom halves also set this, but this doesn't trigger anything."
330,8262692,1,Timer,"Used to determine whether or not the victory walk should display the number of collected bonus stars. If it is zero (see also $7E:1900), the amount of collected bonus stars is not displayed. Otherwise, it is. $7E:1900 is stored to it, causing this address to decrement as well. Also note that this value does NOT have any effect on the rest of the bonus text."
331,8262693,1,Flag,"Bonus game flag. If anything non-zero, the bonus game will commence after the level has been cleared."
332,8262694,1,Misc.,Message box trigger. #$00 = none; #$01 = message 1; #$02 = message 2; #$03 = Yoshi thanks message.
333,8262695,1,Misc.,"Bowser clown car image.

#$00 = Regular.

#$01 = Blinking.

#$02 = Hurt.

#$03 = Angry face.

Higher values makes it cycle through the above ones."
334,8262696,1,Sprites,Used as an index for the frames of the Bowser propeller.  Valid frames range from #$00-#$03.
335,8262697,1,Sprites,"Used to calculate which palette to use for Bowser. Valid values range from #$00-#$07. This value is calculated based on the Mode 7 scale factor, with the table at $03:A265."
336,8262698,2,Player,"Where the player has to be on the screen in order to justify moving the screen. If the player X position relative to the screen is less than $142A - #$000C, then the screen will move left. If the player X position relative to the screen is greater than or equal to $142A + #$000C, the screen will move right."
337,8262700,4,Camera,"Two 16-bit addresses, $142C and $142E, are set to $142A - #$000C and $142A + #$000C respectively during the screen-scrolling routine, read from to determine whether or not to scroll the screen."
338,8262704,1,Blocks,Lowest tile that's solid for sprites from below (in addition to 111 through 16D). It's on page 1.
339,8262705,1,Blocks,Highest tile that's solid for sprites from below (in addition to 111 through 16D) plus 1. It's on page 1.
340,8262706,1,Flag,"Directional coin activation flag.  This is set to #$01 when the sprite changes the music, and it is used to prevent the player being able to spawn any more than one instance of the sprite in an entire level, as it carries across sublevels."
341,8262707,1,Timer,"Scaling factor of the circle for the windowing HDMA effects used with the titlescreen, level ending and keyhole.

The closer to zero, the smaller the circle.

Loads titlescreen when value becomes #$F0 or higher."
342,8262708,1,Timer,"Set to #$30 to end level via keyhole. Works as a timer of some sorts, to indicate how long the keyhole sequence should last - but in SMW, this value is never set to anything other than #$00 or #$30. Also, this address freezes player and sprites by storing its value to $7E:13FB, resp. $7E:009D."
343,8262709,1,Flag,Keyhole growing/shrinking flag. #$00 = growing; #$01 = shrinking.
344,8262710,2,Misc.,"Used for multiple purposes.

Keyholes use it as the X position of the keyhole animation.

The Iggy/Larry boss fight uses it to control the player's X position when on the ground.


The overworld also uses it when spawning switch palace blocks.

$1436 is used as the current base index to the tables at $7EB900; it increments by 0x08 with each set of blocks up to 0x28, at which point it resets to 0x00.

$1437 is used as a timer for waiting between spawning each set of switch blocks."
345,8262712,2,Misc.,"Used for multiple purposes.

Keyholes use it as the Y position of the keyhole animation.

The Iggy/Larry boss fight uses it to control the player's Y position when on the ground.


The overworld also uses it when spawning switch palace blocks.

$1438 is the base OAM index of the current block set. Increments by 0x20 with each set of blocks, then resets to 0x00 once it reaches 0xA0.

$1439 is a counter for how many sets of blocks have been spawned. It stops spawning at 0x08, but keeps counting up to 0x0C, at which point the spawn routine ends."
346,8262714,1,Flag,"When set to a value that is not zero, this will make the game overwrite tiles #$00 through #$05, #$10 through #$15, #$4A through #$4F and #$5A through #$5F with data it gets from $7F:977B-$7F:9A7A. These are uploaded during V-blank (NMI).

Is used to write the graphics for ""MARIO START!"", ""LUIGI START!"", ""TIME UP!"", ""GAME OVER"" and ""BONUS GAME""."
347,8262715,1,Misc.,"Which death message must be displayed. #$14 = ""GAME OVER""; #$1D = ""TIME UP!""."
348,8262716,1,Timer,"Death message animation timer. Amount of time until the two segments come together, such as with ""GAME OVER"", where the animation goes like this: GAME --> <-- OVER.

Is set to #$C0, decrements by four at a time."
349,8262717,1,Timer,"Timer for the ""TIME UP!""/""GAME OVER"" death message - how long it should stay active after the two words have come together. Is set to #$FF, decrements by one at a time."
350,8262718,1,Sprites,"Scroll command number.


Also used during castle cutscenes. Iggy/Ludwig/Roy use it to indicate the switch was hit, Wendy uses it to indicate when the castle is fully erased, and Morton/Lemmy/Larry use it for deciding how to move the castle.Valid Values"
351,8262719,1,Sprites,"Scroll command number used on layer 2. This address serves as a complement to $7E:143E. This address is set by the init routine of the layer one of each scroll address.


Also used during castle destruction cutscenes as a timer for animations, as well as a few miscellaneous wait timers."
352,8262720,1,Sprites,"The starting Y-position of the current scroll sprite, left-shifted twice and with the extra bits still added. (Format: --YYYYEE, where Y = Y position and EE = extra bits).

Regularly adjusted inside the scroll sprites. It can be particularly useful for determining what type of scrolling should be applied with this scroll sprite.

This address is used for Layer 1 scrolling.


Also used during the castle destruction cutscenes as a frame number for various animations."
353,8262721,1,Sprites,"The starting Y-position of the current scroll sprite, left-shifted twice and with the extra bits still added. (Format: --YYYYEE, where Y = Y position and EE = extra bits).

Regularly adjusted inside the scroll sprites. It can be particularly useful for determining what type of scrolling should be applied with this scroll sprite.

This address is used for Layer 2 scrolling.


Also used during Iggy, Ludwig, and Roy's castle destruction scenes as a timer for the explosion."
354,8262722,1,Misc.,"Various flags used in the Yoshi's House portion of the credits scene. Used values:

#$00 = Player and companion walks in

#$01 = Various Yoshis duck and watch in excitement.

#$02 = Eggs are shattering, one by one.

#$03 = Yoshis get up and ""THANK YOU"" appears on Yoshi's house.

#$04 = Yoshis jump in excitement, then screen fades out.

24-bit pointers for these actions are located at SNES $0C:A1DE.


Also used in the castle destruction sequence as a pointer to what actions should be taken. Each castle destruction has its own pointer table for this address. $0C:C9A5 is a pointer table which points the the pointer tables of each castle.


Used in scroll sprites for tracking what type of scroll it is currently doing, usually depending on $7E:1440/$7E:1441. This is the Layer 1 counterpart of $7E:1443.Castle Sequences Actions"
355,8262723,1,Sprites,"Used in scroll sprites for tracking what type of scroll it is currently doing, usually depending on $7E:1440/$7E:1441. This is the Layer 2 counterpart of $7E:1442.


It's also a castle destruction sequence text timer. Starts at #$FF when the 'Welcome' music starts, and a new line of text appears every #$20 frames after that. (#$DF, #$BF, #$9F, etc.)"
356,8262724,1,Misc.,"Layer 1 scroll command pointer/timer. This timer serves no defined purpose on itself, but is generally used for waiting a specific number of frames before updating scroll properties such as speed. For example, with the Layer 1 auto-scroll, this value being #$00 indicates the auto-scroll has finished.


Also used during the castle destruction scenes as an indicator to show the white surrender flag.


Also used as a flag on the overworld to indicate if the player is on a level tile. Value is #$00 when on a path tile, and #$01 when on a level tile."
357,8262725,1,Sprites,"Layer 2 scroll command pointer/timer. This timer serves no defined purpose on itself, but is generally used for waiting a specific number of frames before updating scroll properties such as speed.


Also used during the castle destruction cutscenes for various purposes. Lemmy uses it as a timer for the hammer animation, Ludwig and Roy uses it as a counter for the ? marks (0-3 for Roy and 4-7 for Ludwig), and Wendy uses it to decide how the broom should move."
358,8262726,2,Sprites,"Layer 1 X speed used in the scrolling codes.

#$0001-#$7FFF = move left; #$8000-#$FFFF = move right. #$0000 means there is no movement.

Effectively, it's the X speed to give the player when he's touching the side of a screen, during a level which does not have regular Layer 1 scrolling. Values are different depending on the type of (auto-)scroll.

This value divided by #$10/#16 is stored into $7E:007B.


Additionally used during the castle destruction cutscenes for various purposes. $1446 is used in Morton/Roy's scenes to show the huff cloud at the end and as the Y position of the broom in Wendy's scene.

$1447 is used in Ludwig's scene as the vertical speed of the castle as well as a counter for the dust animation when it hits the hill, and in Larry's as the vertical speed of the castle as well as a timer for when it crashes."
359,8262728,2,Sprites,"Layer 1 Y speed used in the scrolling codes.

#$0001-#$7FFF = move upwards; #$8000-#$FFFF = move downwards. #$0000 means there is no movement.


$1449 specifically is also used as a timer in Wendy's castle destruction scene for pausing between shifting broom directions or moving Mario to the side."
360,8262730,2,Sprites,"Layer 2 X speed used in the scrolling codes.

#$0001-#$7FFF = move left; #$8000-#$FFFF = move right. #$0000 means there is no movement.


$144A specifically is also used in the castle destruction cutscenes to indicate what sprite Mario is holding, if any, 00 indicates the egg, 01 indicates nothing, and anything greater indicates something else (e.g. the hammer or broom)."
361,8262732,2,Sprites,"Layer 2 Y speed used in the scrolling codes, particularly in the Layer 2 scroll command (sprite EA).

#$0001-#$7FFF = move upwards; #$8000-#$FFFF = move downwards. #$0000 means there is no movement.


$7E:144D also controls the time until you can press a button to end the castle destruction sequence (after all text has been generated on-screen)."
362,8262734,2,Sprites,"This is used internally by the scroll sprites for updating the layer 1 X position. In particular, the routine at $05:C4F9 uses it to add the current speed to.


Furthermore, $7E:144E is used on the overworld to determine after how many frames the player should face the screen again after settling on a level tile.


$7E:144E is also used in the credits, as a timer that is set to #$06 and decrements every frame. If this is zero, bit 0 of $7E:144F will get flipped, causing Peach's image during the walking phase to bounce.


$7E:144F is a flag that makes Peach bounce during the time she walks in the credits.

#$00 = Peach frame 1, upright; #$01 = Peach frame 2, one pixel lower."
363,8262736,2,Sprites,"This is used internally by the scroll sprites for updating the layer 1 Y position. In particular, the routine at $05:C4F9 uses it to add the current speed to."
364,8262738,2,Sprites,"This is used internally by the scroll sprites for updating the layer 2 X position. In particular, the routine at $05:C4F9 uses it to add the current speed to."
365,8262740,2,Sprites,"This is used internally by the scroll sprites for updating the layer 2 Y position. In particular, the routine at $05:C4F9 uses it to add the current speed to."
366,8262742,1,Sprites,"Used by the scroll sprites as an index for what layer to process.  #$00 is Layer 1, and #$04 is Layer 2. The RAM addresses indexed include the entire area of $7E:1446-$7E:1455."
367,8262743,1,Flag,"This flag is set and used to determine whether to upload the multicolor Yoshis in the ending cutscene. The surprised Yoshi image (when the eggs are hatching) will appear regardless of this address, but the jumping Yoshi images require this flag to be #$01.

If anything else, they will not be drawn on-screen."
368,8262744,2,Misc.,"Used in the Layer 3 images to control the X speed of Layer 3. This address is primarily used for the tileset specific images (not #$01 or #$03), for example the goldfish and the ghost house fog."
369,8262746,2,Misc.,Used in the Layer 3 images to control the Y speed of Layer 3.  This address is used primarily for the rising/falling Layer 3 tide.
370,8262748,2,Misc.,"This is used internally by Layer 3 images for updating the Layer 3 X position, which is used in (for example) the goldfish and ghost house fog.

It's also used as accumulating fraction bits for the Layer 3 Y speed during the rising/sinking Layer 3 tide.


$7E:145D is also used as a timer to determine when to move to the next game mode after the Yoshi house credits scene. Is set to #$F0 the moment all eggs hatched."
371,8262750,2,Misc.,"Used by Lunar Magic to hold various settings, mainly related to Layer 3:


$145E: yyyyyose

- yyyyy: Initial Layer 3 Y position.  Equal to the value shown in the ""Initial Y Position/Offset"" box divided by 2.

- o: Make sprites beyond level boundaries interact with air instead of water.

- s: Enable Layer 3 scroll sync fix.

- e: Enable advanced Layer 3 bypass settings.


$145F: yyyyxxxx

- yyyy: Vertical Layer 3 scroll setting.

- xxxx: Horizontal Layer 3 scroll setting.


Empty in original game. Cleared on reset, titlescreen load, overworld load and cutscene load."
372,8262752,1,Misc.,"Layer 3 vertical scrolling direction. #$00 = downwards; #$01 = upwards.

Also used by Lunar Magic when a level is set for auto layer 3 vertical scrolling, in which case it combines with $7E:1461 to hold Y accumulation bits."
373,8262753,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load.

This byte functions as the ""high byte"" of $7E:1460. SMW does not actually use this byte, however it is overwritten during level load (see $05:BE92).

Cleared on reset, titlescreen, overworld, level (with the exception of boss rooms) and cutscene load."
374,8262754,2,Misc.,"Layer 1 X position, next frame.

Much similar to $7E:001A, maintaining the exact same values, with the difference being the usage of their values.

This is more notable in auto-scroll commands, for example, if $7E:1462 were to remain static while there was a Layer 2 auto-scroll going, the image would stay, but the level would move.

Is also used for temporary storage to determine how much the screen has moved horizontally in the current frame. ($7E:001A - $7E:1462 = $7E:17BD)"
375,8262756,2,Misc.,"Layer 1 Y position, next frame.

Much similar to $7E:001C.

Is also used for temporary storage to determine how much the screen has moved vertically in the current frame. ($7E:001C - $7E:1464 = $7E:17BC)"
376,8262758,2,Misc.,"Layer 2 X position, next frame.

Much similar to $7E:001E.

Is also used for temporary storage to determine how much the screen has moved horizontally in the current frame. ($7E:001E - $7E:1466 = $7E:17BF)"
377,8262760,2,Misc.,"Layer 2 Y position, next frame.

Much similar to $7E:0020.

Is also used for temporary storage to determine how much Layer 2 has moved vertically in the current frame. ($7E:0020 - $7E:1468 = $7E:17BE)"
378,8262762,2,Misc.,"Used to determine how much layer 3 has moved horizontally in the current frame. This address is only used during the credits while displaying the enemies for the windowing HDMA.

Also used by Lunar Magic to hold the Layer 3 Initial X position/offset."
379,8262764,4,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load."
380,8262768,1,Flag,"Carrying something flag. Very similar to $7E:148F, with the difference that, if this flag is set, the player's graphics don't change, and throw blocks can still be picked up as long as $7E:148F remains zero. If used in a carryable custom sprite to check if the player is already carrying something, definitely combine it with $7E:148F to assure there are no exceptions.

#$00 = Carrying nothing; #$01 = carrying something."
381,8262769,1,Misc.,"Whether the player is on top of a solid sprite, and what kind of sprite that is.


#$01 = Standing on top of a floating rock, floating grass platform, floating skull, Mega Mole, carrot top lift, etc. This one calculates the player's position based on the next frame.

#$02 = Standing on top of a springboard, pea bouncer. This one calculates the player's position based on the next frame.

There's a check at $00:D60B so that the player can hold the jump button pressed for a longer while to jump higher.

#$03 = Standing on top of a brown chained platform, gray falling platform. This one calculates the player's position based on the current frame."
382,8262770,1,Sprites,Left window X position of the top of the spotlight. It's always #$78. This is the value stored that is stored to $7E:147A every four frames.
383,8262771,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
384,8262772,1,Sprites,Right window X position of the top of the spotlight. It's always #$87. This is the value that is stored to $7E:147C every four frames.
385,8262773,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
386,8262774,1,Sprites,"Left window X position of the extreme bottom of the spotlight.

Please note that this position is for the imaginary scanline #$FF, whereas there are normally only #$E0 scanlines on a screen.

That means that the value here is never equal to the left window X position on the very bottom of the screen, unless $7E:1476 is equal to $7E:1472, forming a straight vertical line."
387,8262775,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
388,8262776,1,Sprites,"Right window X position of the extreme bottom of the spotlight.

Please note that this position is for the imaginary scanline #$FF, whereas there are normally only #$E0 scanlines on a screen.

That means that the value here is never equal to the right window X position on the very bottom of the screen, unless $7E:1478 is equal to $7E:1474, forming a straight vertical line."
389,8262777,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
390,8262778,1,Sprites,"In the spotlight code, the left window X position of each scanline is calculated and temporarily stored here, after which this address stores its value to an even byte of $7E:04A0.

What is left at the end of every frame is the left window X position on the very bottom scanline.

This is used once in every four frames, probably to reduce lag."
391,8262779,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
392,8262780,1,Sprites,"In the spotlight code, the right window X position of each scanline is calculated and temporarily stored here, after which this address stores its value to an odd byte of $7E:04A0.

What is left at the end of every frame is the right window X position on the very bottom scanline.

This address used once in every four frames, probably to reduce lag."
393,8262781,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
394,8262782,1,Sprites,"Used by the spotlight to calculate whether or not to move the left window on a particular scan line into the direction of the resulting X position on the bottom left.

It works by adding the width from $7E:1480 to itself (starting at #$00 initially), and if the resulting value is higher than #$CF (or even overflows, setting the carry bit), the left window moves a pixel into the direction of the resulting X position on the bottom left."
395,8262783,1,Sprites,"Used by the spotlight to calculate whether or not to move the right window on a particular scan line into the direction of the resulting X position on the bottom right.

It works by adding the width from $7E:1481 to itself (starting at #$00 initially), and if the resulting value is higher than #$CF (or even overflows, setting the carry bit), the right window moves a pixel into the direction of the resulting X position on the bottom right."
396,8262784,1,Sprites,"Width between the top left window ($7E:1472) and the bottom left window ($7E:1476) of the spotlight. This value is always positive, and its sign flag is saved at $7E:1484."
397,8262785,1,Sprites,"Width between the top right window ($7E:1474) and the bottom right window ($7E:1478) of the spotlight. This value is always positive, and its sign flag is saved at $7E:1485."
398,8262786,1,Flag,"Used as a flag in the spotlight code to skip initialization of the top left, top right, bottom left, and bottom right RAM addresses.

#$00 = Run initialization; #$01 = Do not run initialization."
399,8262787,1,Sprites,Used as a flag for the current direction the spotlight is moving.  #$00 = spotlight is moving right; #$01 = spotlight is moving left.
400,8262788,1,Sprites,"A flag used in the spotlight code to determine which side of the top left  window border the bottom left window border is on.

#$00 = bottom left is more to the left; #$01 = bottom left is on the same position, or more to the right."
401,8262789,1,Sprites,"A flag used in the spotlight code to determine which side of the top right  window border the bottom right window border is on.

#$00 = bottom right is more to the left; #$01 = bottom right is on the same position, or more to the right."
402,8262790,1,Sprites,"Unused, set to #$01 in the dark room spotlight sprite. Change $03:C544 to EA EA EA (NOP #3) to change this into free RAM. If that patch is performed, this address is safe for other uses. Cleared on reset, titlescreen load, overworld load and cutscene load."
403,8262791,4,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
404,8262795,2,Misc.,"Used by random number generation subroutine to determine the next output.
Do not use these if you want a random number. Use $7E:148D instead."
405,8262797,2,Misc.,"Output of random number generation routine, located at $01:ACF9."
406,8262799,1,Player,"Flag used to detect if the player is holding an object (throw block, key, shell, etc.) Also adjusts the player image, different from $7E:1470. This address does store its value to $7E:1470.

If the player is carrying something, this address should usually (not always, regarding the glitch) prevent the player from holding a second item.

#$00 = Carrying nothing; #$01 = carrying something."
407,8262800,1,Timer,"Star power timer. Decrements every fourth frame, except when lock flag ($9D) AND while the freezable frame counter ($14) has a value divisible by 4, will decrement each frame (assuming it's a glitch). The music will revert when this timer reaches #$1E."
408,8262801,1,Sprites,"Amount of pixels on the X/Y axis a sprite has moved in the current frame.  It is set after every call to update sprite position based on speed, and the routine that updates both X/Y position based on speed will leave $7E:1491 with the movement on the X axis in this address.  Very often used for rideable sprites as this address can be added to the player position to move the player in tandem with the sprite."
409,8262802,1,Timer,Player peace image timer.
410,8262803,1,Timer,"End level timer. Setting to #$FF will end the level as a goal sphere / boss fight (use in conjunction with $7E13C6). Peace sign is shown here when the timer hits #$28. The switches (yellow, green, red and blue) set it to #$08."
411,8262804,1,Palettes,"Direction of the color fading at level end. Only the highest bit is ever read.

#$00 = getting darker; #$80 = getting brighter."
412,8262805,1,Timer,"Timer that controls fading and the level end scorecard. Increments and stops when it hits #$40. While it's ticking, the colors will fade; when it's done, $7E:003A through $7E:003D won't be read and the Layer 3 scrolling will be locked."
413,8262806,1,Timer,"Player animation timer. This controls a lot of things such as the walking/running animation rate, how long the death animation should last, how long to stay invisible for after getting the cape, the alternating player images when the player is walking over slippery surfaces, etc."
414,8262807,1,Timer,Flashing invulnerability timer - not to be confused with the star timer. This is activated when the player gets hurt. Controls both interaction (player should not interact with sprites again) as well as the blinking graphics.
415,8262808,1,Timer,Time to show player picking an item/object up pose.
416,8262809,1,Timer,"Time for player to face the screen. Normally, only set while Mario is Mario is turning with an item or entering a vertical pipe."
417,8262810,1,Timer,Time to show player kicking something pose.
418,8262811,1,Timer,"Time for the player to change through palettes, as if he got a fire flower. Only ticks when the ""get flower"" animation is active, and is just a flag otherwise."
419,8262812,1,Timer,Time to show player shooting a fireball pose.
420,8262813,1,Timer,"Side flipping climbing net sprite flag and timer. Whenever you punch the flipping net, this gets set to #$1E and decrements every frame till it's zero. That's how many frames the spinning animation lasts. It also determines the X speed the player has while he's on the climbing net sprite - this means that it should be decremented every frame in order to avoid issues."
421,8262814,1,Timer,"Player punches while climbing on a net flag and timer. Every time you punch a net this is set to #$08 and decremented till it's zero again. During the time it's not zero, the frame is displayed that shows the player punching the net. If you store #$08 or greater to it every frame you'll be hold onto the net without being able to move or get off.

When this RAM address is non-zero, the player can also not move."
422,8262815,1,Timer,"This timer controls the time until the player gets into gliding/sinking mode after he has jumped into the air with a cape. Is set to #$50 the moment you get airborne, and decrements every frame afterwards. The ability of raising any further stops at #$00.


Note that this doesn't reset when going into another sublevel, allowing the player to ""carry over"" flying if the player is spawn in midair (or jump immediately when placed on ground) and maintains holding dash."
423,8262816,1,Timer,How long the running frames should be shown after the player launches off with the cape. Is #$10 by default and decrements each frame.
424,8262817,1,Timer,"Player slides a bit when turning around timer. Most notably used with very steep slopes. If this is non-zero, $7E:13DD's image (#$0D) won't be shown."
425,8262818,1,Timer,Used as a timer for the cape animation.  This is what makes the cape wave when the player walks and what makes the cape fall when he stops.
426,8262819,1,Timer,"A timer for Yoshi's tongue stretching out.

#$12 = Yoshi about to stretch out tongue (timer starts here), player pose #$27.

#$10 = $7E:18AE is set to #$06.

#$0C = Player now gets a different pose, #$28.

#$00 = Player now gets a different pose, #$20 (or #$21 if turning around, $7E:187A is used to determine that)."
427,8262820,1,Timer,"Time until the player advances a diving stage, while flying and holding forward, and time until the player pulls back up a stage, while flying and holding backward."
428,8262821,1,Timer,Timer for how long you keep floating after releasing B when floating with the cape.
429,8262822,1,Player,Cape spin timer.
430,8262823,1,Timer,"Timer for breaking the bridge in Reznor battles. It is set to #$40 and decrements each frame. When it reaches #$3C, a tile on each side breaks. When it drops to #$00, a sound is played and it's reset to #$40 again."
431,8262824,3,Misc.,"Unused.  $7E:14A8 decrements every frame automatically until it reaches zero, while $7E:14A9 and $7E:14AA decrement every fourth frame. $7E:14A9 is cleared when the player ground pounds with the cape (this can be prevented by setting $02:94C6 to NOP #3 or [EA EA EA]), and $7E:14AA is set to #$40 when Yoshi grabs the wings (this can be stopped by setting $01:F6CF to NOP #3 or [EA EA EA])."
432,8262827,1,Timer,"Bonus game ending timer. Does nothing in a normal level, but during a bonus game, setting it will end the bonus game and return to the overworld. At #$44 it starts the ""end bonus game"" music, and at #$01 it actually fades to the overworld."
433,8262828,1,Empty,"Empty. However, due to the code at $00:C563 and $00:C513, it decrements every fourth frame until it hits zero."
434,8262829,1,Timer,Blue P-Switch timer. Decrements every fourth frame (you can convert seconds to this timer value via PSwitchTimerLength = Seconds * 15). The P-switch running out sound is played when this hits #$1E.
435,8262830,1,Timer,Silver P-Switch timer. Decrements every fourth frame (you can convert seconds to this timer value via PSwitchTimerLength = Seconds * 15). The P-switch running out sound is played when this hits #$1E.
436,8262831,1,Flag,"On/Off Switch value. #$00 is ON and all others (non-zero, i.e. #$01-#$FF) are OFF."
437,8262832,2,Misc.,"Used for multiple purposes.


The 16-bit address forms the center X position of the brown chained platform that is currently processed. The formula for this address = $7E:14B4 - $7E:14BC.


Additionally, the Lakitu cloud graphics routine uses $7E:14B0 as scratch RAM for the X position of a tile.


$7E:14B0 is furthermore used in the Bowser battle as a timer between his various attacks. Set to #$78 at the beginning, and between attacks afterwards it is set to #$54 each time.

Note that, whether he throws the Mechakoopas or not, does not only depend on this address!


And finally, $7E:14B1 is a timer that is set to #$FF when Bowser begins with the Mechakoopa attack. Note that the Mechakoopas are thrown when this timer is at #$80."
438,8262834,2,Misc.,"Used for multiple purposes.


The 16-bit address forms the center Y position of the brown chained platform that is currently processed. Note that, since the radius based on the sprite Y position is always zero, this holds the same value as $7E:14B6. The formula for this address = $7E:14B6 - $7E:14BF.


Additionally, the Lakitu cloud graphics routine uses $7E:14B2 as scratch RAM for the Y position of a tile.


$7E:14B2 is also a flag for scaling when Bowser is flying away. #$00 = shrinking; #$01 = growing; #$02 = disappear.


And finally, $7E:14B3 is an incrementing index to the Y position for the teardrop tile that appears on the Clown Car when Bowser is hurt."
439,8262836,2,Misc.,"Used for multiple purposes.


The 16-bit address is the X position of the brown chained platform sprite at cos a = 1. It is in fact a mirror of the sprite X position, which always stays the same. By subtracting the horizontal radius ($7E:14BC) from this address, the center position to revolve around is calculated.


The 16-bit address is also used to determine Iggy/Larry interactive X position, as well as the player's fireball X position during this boss battle.


$7E:14B4 is used in the Bowser battle as an index to what music should be played in phase 2 and 3.  It only appears to have these values after written to:

#$07 = Use track #$19.

#$08 = Use track #$1A.

Both tracks are identical. Perhaps this seperation was intended to be used so that a different track played on each phase.


And finally, $7E:14B5 is a timer for Bowser's hurt state. If non-zero, Bowser will show his hurt pose."
440,8262838,2,Sprites,"Used for multiple purposes.


The 16-bit address is the Y position of the brown chained platform sprite at sin a = 0. It is in fact a mirror of the sprite Y position, which always stays the same. By subtracting the horizontal radius ($7E:14BF) from this address, the center position to revolve around is calculated. Since $7E:14BF is always zero, the center position and this address always have the same identical value.


The 16-bit address is also used to determine Iggy/Larry interactive Y position, as well as the player's fireball Y position during this boss battle.


$7E:14B6 is also a timer that is set to #$FF when Bowser begins with the Big Steelie attack. Note that the Big Steelie is thrown when this timer is at #$80.


And finally, $7E:14B7 holds the X position of each new fireball that falls from the sky in the Bowser battle, as well as the index to the sound effects that are generated with them (table at $03:A841)."
441,8262840,2,Misc.,"Used for multiple purposes.


The 16-bit address is the X position of the first (outermost) chain tile of the brown chained platform currently being processed. This address is responsible for the actual movement of the platform and interaction with the player.


$7E:14B8 itself seems to form a buffer for the X position of Iggy/Larry during that boss battle, much similar to $7E:14B4.


Lastly, $7E:14B8 is an attack counter used in the second phase of the Bowser battle to determine if Bowser should throw Mechakoopas or Big Steelies. It increments on every throw, on #$02 Mechakoopas are thrown, and on #$03 it resets to #$00."
442,8262842,2,Sprites,"Used for multiple purposes.


The 16-bit address is the Y position of the first (outermost) chain tile of the brown chained platform currently being processed. This address is responsible for the actual movement of the platform and interaction with the player.


$7E:14BA itself seems to form a buffer for the Y position of Iggy/Larry during that boss battle, much similar to $7E:14B6."
443,8262844,2,Sprites,"Radius of the rotating brown platform, by default this value is #$50 (found at $01:CACC). This value is subtracted from $7E:14B4 and stored into $7E:14B0.

In SMW however, the value is always #$50. Additionally, the high byte is always #$00.


Note that this radius depends on sprite X position (which stays the same). It calculates the  center position of the imaginary circle you rotate around from that position.

The further you increment the radius, the further you will have to move the sprite to the right in order for the center position to be the same.


See also $7E:14BF."
444,8262846,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load."
445,8262847,2,Sprites,"Another type of radius that would rely on the brown chained platform's Y position, except that it's always #$0000, and thus effectively it does nothing. Subtracted from $7E:14B6 and stored into $7E:14B2. See also $7E:14BC."
446,8262849,1,Empty,"Empty. Cleared on reset, titlescreen, overworld and cutscene load."
447,8262850,2,Sprites,Used to hold the sine value of the brown rotating platform. Note that the range of this is always #$0000-#$0100. XOR isn't applied to this value when it is negative.
448,8262852,1,Empty,"Empty. Cleared on reset, titlescreen, overworld and cutscene load."
449,8262853,2,Sprites,Used to hold the cosine value of the brown rotating platform. Note that the range of this is always #$0000-#$0100. XOR isn't applied to this value when it is negative.
450,8262855,1,Empty,"Empty. Cleared on reset, titlescreen, overworld and cutscene load."
451,8262856,12,Sprites,"Sprite status table.

States 08 and above are considered alive; sprites in other states are dead and should not be interacted with.Valid Values"
452,8262868,12,Sprites,"Sprite Y position, high byte."
453,8262880,12,Sprites,"Sprite X position, high byte."
454,8262892,12,Sprites,Accumulating fraction bits for fixed point sprite Y speed.
455,8262904,12,Sprites,Accumulating fraction bits for fixed point sprite X speed.
456,8262916,12,Sprites,"Miscellaneous sprite table. In the original game, it's only used in the revolving brown platform and nowhere else. More information can be found here."
457,8262928,12,Sprites,"Miscellaneous sprite table. In the original game, it's only used in the revolving brown platform and nowhere else. Unlike $1504 (and every other sprite table), it is also not cleared by the sprite table initialization routine. More information can be found here."
458,8262940,12,Sprites,"Miscellaneous sprite table. In SMW, it's used for vertical directions, and Yoshi uses it to determine which sprite to spawn out of an egg.

$7E:1520-$7E:1523 is a 'Reznor killed flag'. If a byte is set to #$01, the Reznor will disappear. Byte 1 is for Reznor 1, byte 2 for Reznor 2 and so on. More information can be found here."
459,8262952,12,Sprites,"Miscellaneous sprite table. In SMW, it's used for Chargin' Chuck HP, Thwomp's face expression, etc. More information can be found here."
460,8262964,12,Sprites,"Miscellaneous sprite table.

Certain powerups use this table as a blink-fall flag.

#$00 = Off; #$01 = On, powerup will blink and fall straight down.

The game stores #$01 here when it drops the reserved item from the item box. The blink-fall flag affects the Super Mushroom and the Fire Flower, but not the Cape Feather. The blink-fall flag also affects some other sprites, at least the Starman, the 1-Up mushroom and the coin sprite, but these sprites might glitch if you set the flag.

One glitch is that the blinking sprite-coin permanently occupies a sprite slot if it falls off the level, so that it might prevent the spawning of other common sprites.

Other than that, this address has many different purposes. More information can be found here."
461,8262976,12,Sprites,"Miscellaneous sprite table. Table decrements itself once per frame, except for carryable sprites, where it decrements every second frame (the code at $0196D7 “slows” the timer by 1/2 by incrementing it every even frames ($13), which results in a decrement every odd frames).


Various sprites use this table as a stun timer. For example, this timer controls when flipped Goombas and squashed Mecha-Koopas decide to rise and walk. This table is also the sprite spinjump death frame counter - that is, how long to show the ""spinjumped"" image when the sprite is killed by a jump of such sorts. More information can be found here."
462,8262988,12,Sprites,Miscellaneous sprite table. Used as a timer to disable sprite contact with the player. Table decrements itself once per frame. More information can be found here.
463,8263000,12,Sprites,Miscellaneous sprite table. Used as a timer for how long a sprite is sinking in lava/mud. Table decrements itself once per frame. More information can be found here.
464,8263012,12,Sprites,Miscellaneous sprite table. Used as a timer to disable sprite contact with other sprites. Table decrements itself once per frame. More information can be found here.
465,8263024,12,Sprites,"Miscellaneous sprite table. In SMW, it's used as a frame counter for timed lifts (amount of frames until it hits zero), a frame counter that indicates when sprites #$00-#$13 that have the 'Follow player' flag set should turn, etc. More information can be found here."
466,8263036,12,Sprites,Miscellaneous sprite table. It's most often used as a horizontal sprite direction table. #$00 = Right; #$01 = Left. More information can be found here.
467,8263048,12,Sprites,"Sprite blocked status table. Format: asb?udlr.

a = touching Layer 2 from above.

s = touching Layer 2 from the side.

b = touching Layer 2 from below.

? = unknown, probably unused.

u = up.

d = down.

l = left.

r = right."
468,8263060,12,Sprites,"Miscellaneous sprite table. In classic Piranha Plants, it is used to check if the sprite should be made visible and have interaction with the player. If it's any non-zero value, that Piranha Plant will become invisible. More information can be found here."
469,8263072,12,Sprites,"Sprite off screen flag table, horizontal."
470,8263084,12,Sprites,Miscellaneous sprite table. It's often used as a timer to determine how long it takes to turn around. Table decrements itself once per frame. More information can be found here.
471,8263096,12,Sprites,Determines what kind of slope a sprite is on.Valid Values
472,8263108,12,Sprites,Flag set if a sprite is more than 4 tiles horizontally offscreen. Used by a few large sprites (e.g. turnblock bridges and chained platforms) to determine whether to draw any of the sprite at all.
473,8263120,12,Sprites,Flag for whether the sprite is on Yoshi's tongue. #$00 = No; #$01 = Yes.
474,8263132,12,Sprites,"Flag to disable sprite interaction with objects. Ghost house ledge holes store their sprite index (plus one) to this to make sprites fall through the ground, but any non-zero value will work."
475,8263144,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
476,8263145,1,Sprites,Sprite index for the current sprite that is being processed.
477,8263146,12,Sprites,Sprite index to the OAM table.
478,8263158,12,Sprites,Sprite YXPPCCCT table. Many sprites use it in their graphics routines.
479,8263170,12,Sprites,Miscellaneous sprite table. Often used as graphics pointer. More information can be found here.
480,8263182,12,Sprites,"Miscellaneous sprite table. In SMW, it is used to keep track of things such as the green bouncing Koopa's Y speed and the sprite number of certain spawned, kicked, etc. sprites. More information can be found here."
481,8263194,12,Sprites,Sprite index to the load status table (see $7E1938). $FF means the sprite won't be reloaded.
482,8263206,12,Sprites,"Miscellaneous sprite table. Consecutive enemies killed by a sprite table. Each byte is how many sprites that particular sprite has killed. In SMW, this applies to sprites that can be thrown, such as Koopa shells. More information can be found here."
483,8263218,12,Sprites,"""Sprite is behind scenery"" flag. Used by, among others, the net Koopas."
484,8263230,12,Sprites,"Miscellaneous sprite table. Table decrements once per frame. In SMW, it's used as e.g. a timer that, when it's zero, makes Ludwig face the player, while he's spitting fireballs. More information can be found here."
485,8263242,12,Sprites,"Sprite is in liquid indicator table. #$00 = Sprite not in liquid; #$01 = Sprite in water; #$80 = Sprite in lava.


Also used in the Morton/Roy battle as an indicator that the walls have to close in, and in Bowser's fight to indicate the music after Bowser is defeated has already started."
486,8263254,12,Sprites,"Sprite properties, first Tweaker/MWR byte.

Format: sSjJcccc

s=Disappear in cloud of smoke

S=Hop in/kick shells

j=Dies when jumped on

J=Can be jumped on (false = player gets hurt if he jumps on the sprite, but can bounce off with a spin jump)

cccc=Object clipping"
487,8263266,12,Sprites,"Sprite properties, second Tweaker/MWR byte.

Format: dscccccc

d=Falls straight down when killed

s=Use shell as death frame

cccccc=Sprite clipping"
488,8263278,12,Sprites,"Sprite properties, third Tweaker/MWR byte.

Format: lwcfpppg

l=Don't interact with layer 2 (or layer 3 tides)

w=Disable water splash

c=Disable cape killing

f=Disable fireball killing

ppp=Palette

g=Use second graphics page"
489,8263290,12,Sprites,"Sprite properties, fourth Tweaker/MWR byte.

Format: dpmksPiS

d=Don't use default interaction with player

p=Gives power-up when eaten by Yoshi

m=Process interaction with player every frame

k=Can't be kicked like a shell

s=Don't change into a shell when stunned

P=Process while off screen

i=Invincible to star/cape/fire/bouncing bricks

S=Don't disable clipping when killed with star"
490,8263302,12,Sprites,"Sprite properties, fifth Tweaker/MWR byte.

Format: dnctswye

d=Don't interact with objects

n=Spawns a new sprite

c=Don't turn into a coin when goal passed

t=Don't change direction if touched

s=Don't interact with other sprites

w=Weird ground behavior

y=Stay in Yoshi's mouth

e=Inedible"
491,8263314,1,Sprites,Sprite memory setting from header.
492,8263315,1,Blocks,"For the regular tiles in SMW, this holds the low byte of the Map16 number (Y contains the high byte). Within custom block code, this contains the low byte of the ""acts like""/""act as"" setting, Y has the high byte, and $03-$04 contain the actual Map16 number. This gets its value from a pointer to the Map16 tile table at $7E:C800 (Y gets its value from $7F:C800)."
493,8263316,1,Blocks,"How many pixels the sprite should move down from the nearest 16x16 tile. Originally, its data comes from the table at $00:E632."
494,8263317,1,Misc.,"Used most often in tracking the second sprite being checked in various interaction routines, for example the second sprite's index in the sprite contact routine. It also serves a use during checking when a sprite is entering/exiting water."
495,8263318,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."
496,8263319,1,Counter,Consecutive enemies stomped.
497,8263320,1,Sprites,"Current index being processed for a variety of sprite types, specifically minor extended sprites, bounce sprites, quake sprites, and smoke sprites."
498,8263321,4,Sprites,Bounce sprite type number.Valid Values
499,8263325,4,Sprites,"Bounce sprite initialization flag table. #$00 = bounce sprite in init routine; #$01 = bounce sprite in main routine. Used for several things, such as generating tile 152 (invisible solid) once only."
500,8263329,4,Sprites,"Bounce sprite Y position, low byte."
501,8263333,4,Sprites,"Bounce sprite X position, low byte."
502,8263337,4,Sprites,"Bounce sprite Y position, high byte."
503,8263341,4,Sprites,"Bounce sprite X position, high byte."
504,8263345,4,Sprites,Bounce sprite Y speed.
505,8263349,4,Sprites,Bounce sprite X speed.
506,8263353,4,Sprites,Accumulating fraction bits for bounce sprite X speed.
507,8263357,4,Sprites,Accumulating fraction bits for bounce sprite Y speed.
508,8263361,4,Sprites,Bounce sprite turns into Map16 tile. This uses the same values as $7E:009C.
509,8263365,4,Sprites,Bounce sprite timer - amount of frames until bounce sprite disappears. Turn blocks are set to spinning mode when this timer runs out.
510,8263369,4,Sprites,"Block bounce sprite table.

Format: L-----DD

L is which layer it is on. Clear means it's on layer 1, set means it's on layer 2 (or layer 3 if applicable).

DD is the direction it is moving in. 00 = up; 01 = right; 10 = left; 11 = down.

The -'s are unknown. They're likely unused, but that's not certain yet."
511,8263373,4,Sprites,"Quake/interaction sprite type. 0 = empty, 1 = hitting/breaking a block, 2 = Yoshi's stomp."
512,8263377,4,Sprites,"Quake/interaction sprite X position, low byte."
513,8263381,4,Sprites,"Quake/interaction sprite X position, high byte."
514,8263385,4,Sprites,"Quake/interaction sprite Y position, low byte."
515,8263389,4,Sprites,"Quake/interaction sprite Y position, high byte."
516,8263393,6,Sprites,Score/1-Up sprite number.Valid Values
517,8263399,6,Sprites,"Score/1-up sprite Y position, low byte."
518,8263405,6,Sprites,"Score/1-up sprite X position, low byte."
519,8263411,6,Sprites,"Score/1-up sprite X position, high byte."
520,8263417,6,Sprites,"Score/1-up sprite Y position, high byte."
521,8263423,6,Sprites,"Score/1-up sprite Y movement - how long the score sprite should move upwards. It is not possible to go down, and the maximum amount of frames is #$30. Additionally, the sprite is twice as slow with #$10-#$1F as with #$20-#$2F, and four times as slow with #$00-#$0F. The sprite terminates itself when this hits zero."
522,8263429,6,Sprites,Layer the score/1-up sprite is on. Used to control its position.
523,8263435,10,Sprites,Extended sprite number. Last two bytes reserved for fireballs.Valid Values
524,8263445,10,Sprites,"Extended sprite Y position, low byte. Last two bytes reserved for fireballs."
525,8263455,10,Sprites,"Extended sprite X position, low byte. Last two bytes reserved for fireballs."
526,8263465,10,Sprites,"Extended sprite Y position, high byte. Last two bytes reserved for fireballs."
527,8263475,10,Sprites,"Extended sprite X position, high byte. Last two bytes reserved for fireballs."
528,8263485,10,Sprites,Extended sprite Y speed. Last two bytes reserved for fireballs.
529,8263495,10,Sprites,Extended sprite X speed. Last two bytes reserved for fireballs.
530,8263505,10,Sprites,Accumulating fraction bits for extended sprite Y speed.  The last two bytes are for the player's fireballs.
531,8263515,10,Sprites,Accumulating fraction bits for extended sprite X speed.  The last two bytes are for the player's fireballs. The fireballs also use this table for a hit flag table.
532,8263525,10,Sprites,Extended sprite table. Most extended sprites increment this table and use it for their GFX table. (Use a different image every x frames.)
533,8263535,10,Sprites,"Extended sprite table with multiple purposes. Fireballs use it as a frame counter table when they hit an object. Various other extended sprites, such as the trail of smoke, use it as a graphics pointer. Table decrements once per frame."
534,8263545,10,Sprites,Extended sprite goes behind layers flag. Last two bytes reserved for fireballs.
535,8263555,8,Sprites,"Shooter number. #$00 = None, #$01 = Bullet Bill shooter, #$02 = Torpedo Launcher."
536,8263563,8,Sprites,"Shooter Y position, low byte."
537,8263571,8,Sprites,"Shooter Y position, high byte."
538,8263579,8,Sprites,"Shooter X position, low byte."
539,8263587,8,Sprites,"Shooter X position, high byte."
540,8263595,8,Sprites,Amount of time it takes for a shooter to shoot the next sprite. Decrements every 2 frames via $13.
541,8263603,8,Sprites,"Shooter's index to level table (see $7E:1938). Curiously, shooters are always reloaded, because there is no routine to erase them."
542,8263611,1,Empty,"Contains the low byte of the level number when loading the levels, but never read by anything. It's cleared when the loading is done. Can be used as freeram."
543,8263612,1,Misc.,How much the Y position of Layer 1 changed in the current frame. Only used by the originally unused winged cage sprite.
544,8263613,1,Misc.,"How much the X position of Layer 1 changed in the current frame. Used in various instances, for example to check how fast the spinning coins should move horizontally when a goal tape is touched when there are sprites on screen."
545,8263614,1,Misc.,"How much the Y position of Layer 2 changed in the current frame. Used when the player should be still compared to a moving layer 2. For example, it's used by the Layer 2 horizontal scroll sprite, F4."
546,8263615,1,Misc.,How much the X position of Layer 2 changed in the current frame.
547,8263616,4,Sprites,Smoke sprite number.Valid Values
548,8263620,4,Sprites,"Smoke sprite Y position, low byte."
549,8263624,4,Sprites,"Smoke sprite X position, low byte."
550,8263628,4,Sprites,Smoke sprite timer - amount of frames until smoke sprite disappears.
551,8263632,4,Sprites,"Spinning coin from block. If zero, the slot is free, otherwise it's occupied by such a spinning coin."
552,8263636,4,Sprites,"Spinning coin from block Y position, low byte."
553,8263640,4,Sprites,Spinning coin from block Y speed. $20-$9F will terminate the sprite and cause a score sprite to appear.
554,8263644,4,Sprites,Accumulating fraction bits for fixed point spinning coin from block Y speed.
555,8263648,4,Sprites,"Spinning coin from block X position, low byte."
556,8263652,4,Sprites,"Spinning coin from block table. Indicates whether the spinning coin is generated from a block on Layer 1, or Layer 2/3. Depending on the layer, it updates its position based on the layer's movements."
557,8263656,4,Sprites,"Spinning coin from block Y position, high byte."
558,8263660,4,Sprites,"Spinning coin from block X position, high byte."
559,8263664,12,Sprites,Minor extended sprite number.Valid Values
560,8263676,12,Sprites,"Minor extended sprite Y position, low byte."
561,8263688,12,Sprites,"Minor extended sprite X position, low byte."
562,8263700,12,Sprites,"Minor extended sprite Y position, high byte."
563,8263712,12,Sprites,Minor extended sprite Y speed.
564,8263724,12,Sprites,Minor extended sprite X speed.
565,8263736,12,Sprites,Accumulating fraction bits for fixed point minor extended sprite Y speed.
566,8263748,12,Sprites,Accumulating fraction bits for fixed point minor extended sprite X speed.
567,8263760,12,Sprites,"Minor extended sprite timer. Indicates how long the minor extended sprite is still staying active, on-screen."
568,8263772,1,Player,"Flag to disable player interaction with objects. Ghost house ledge holes store their sprite index (plus one) to this to make Mario fall through the ground, but any non-zero value will work."
569,8263773,1,Sprites,Related to the spawning of extended sprites. Used to index $7E:17F0 (minor extended sprite type table) if there are no empty slots when an extended sprite needs to be spawned. This is so that the oldest extended sprite can be removed when a new one needs to be made.
570,8263774,1,Misc.,"Sometimes used to keep track of a tile to generate at $00:BEB0 (before storing to $7E:009C); may be in conjunction with $7E:18B6. Also used to determine the player Y position when he's on the line guided rope, used to determine positions and such of Yoshi's tiles, etc."
571,8263775,1,Sprites,"This is the low byte of the Map16 tile (actual tile number, not ""acts like"" setting) that a sprite is touching vertically.  The high byte is at $18D7.


This, $1860, $1862, and $18D7 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"
572,8263776,1,Sprites,"This is the low byte of the Map16 tile (actual tile number, not ""acts like"" setting) that a sprite is touching horizontally.  The high byte is at $1862.


This, $185F, $1862, and $18D7 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"
573,8263777,1,Sprites,"Which sprite to overwrite if all slots are full. Used for blocks containing sprites and the item box.

Note that only the last two slots can be overwritten using this method."
574,8263778,1,Sprites,"This is the high byte of the Map16 tile (actual tile number, not ""acts like"" setting) that a sprite is touching horizontally.  The low byte is at $1860.


This, $185F, $1860, and $18D7 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"
575,8263779,1,Sprites,Smoke sprite index. Holds the first available smoke image index and resets to #$03 if all of them have been filled and another smoke image is spawned.
576,8263780,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
577,8263781,1,Sprites,Spinning coin from block index. Holds the first available index and resets to #$03 if all of them have been filled and another coin is spawned.
578,8263782,2,Misc.,"Two seperate, 8-bit addresses used by the brown chained platform rotation routine. Used to tell if an angle is negative or not. Refer to $7E:0036 also."
579,8263784,1,Blocks,"Used as a mirror of $7E:1693 in stunned sprites. This address here is used to check if a sprite is hitting a smashable block (for example, a question mark block) from below."
580,8263785,2,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
581,8263787,1,Blocks,"Multiple coin block timer - amount of time until the multiple coin block turns into a used block. Keeps decrementing until it's #$01, after that it stays that value until the block is hit again, at which it's turned into a used block. Then, this address gets set to zero."
582,8263788,12,Sprites,"Sprite off screen flag table, vertical. For sprites in bank 1, if the sprite is set to be two tiles high (with $190F), then bits 0 and 1 correspond to the top and bottom tiles respectively.


The routine that sets this address in bank 2 and 3 has an error, however; this address instead does the 2-bit functionality if bit 5 of $1662 (which is one of the bits in the sprite clipping value). As a result, some sprites will register as vertically offscreen when they're actually just at the top of the screen."
583,8263800,1,Sprites,"Indicates where the player is on the X axis in relation to the currently-active revolving net door sprite.  If this is #$00, the player is perfectly centered on the sprite horizontally.  It will be positive if the player is toward the left side of the sprite (the farther left, the bigger the positive number) and negative if the player is toward the right side of the sprite (the farther right, the bigger the negative number).


Is used to calculate the player X speed as the net is turning around sideways."
584,8263801,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
585,8263802,1,Yoshi,"Riding Yoshi Flag. #$00 = No, #$01 = Yes, #$02 = Yes, and turning around."
586,8263803,12,Sprites,"Miscellaneous sprite table. Has the following purposes:


Sprite stomp immunity flag table - enables stomp immunity for sprites if the flag is set.

Additionally, the changing item sprite uses it to determine which sprite it is (#$00 = mushroom, #$40 = fire flower, #$80 = feather, #$C0 = star), the goal tape determines by this address whether it activates the normal or secret exit, the radius of rotating chain sprites is held by this address, certain Yoshi abilities are handled, etc. More information can be found here.


$7E:1884 is also used to determine what background should be used during the Morton/Roy/Ludwig battle scene. #$00 = Ludwig; #$01 = Morton/Roy.

There is also a bug with the background flames during the Ludwig battle, as they seem to change color upon this address not being #$01. This is responsible for a palette glitch in the original SMW, where the fire turns a greyish blue very briefly. Change $02:8380 to #$80 to fix the bug."
587,8263815,1,Timer,Time to shake Layer 1.
588,8263816,2,Misc.,"Layer 1 image relative Y position, used by $7E:1887 (shaking ground). Does not affect Layer 1 interaction. #$0000 = default value, Layer 1's image unchanged. The higher the value (positive, #$0001 and beyond), the more Layer 1 goes up. The lower the value (negative, wraps around to #$FFFF and below) the more Layer 1 goes down."
589,8263818,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load, hurt, death, and taking hit while cape flying ($00:F625 for the last three) and in the Peach Rescued scene ($03:AE39)."
590,8263819,1,Player,"Player image-relative Y position, used by $7E:1887 (shaking ground). Does not affect player interaction. Unlike $7E:1888, this is an 8-bit address."
591,8263820,1,Flag,"Flag that determines if the game should keep updating the tile and YXPPCCCT data for the sprite background tiles in the Morton/Roy/Ludwig room.


#$00 = Keep updating; #$01 = Stop updating."
592,8263821,1,Misc.,"Used during the calculation of the X position of the background in the Morton/Roy/Ludwig room. It starts by copying the value from $7E:001A (8-bit) and getting the lowest bit from $7E:001B by using the carry bit. So first, this address is $7E:001A (9-bit) > 1. 

This address is then, after it's inverted with EOR #$FF : INC A, used for $7E:0006 (scratch RAM, used for X displacement of all tiles)."
593,8263822,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."
594,8263823,1,Sprites,Used to indicate whether the bonus game is over.  It will disable the interaction and movement.
595,8263824,1,Counter,How many 1-Ups to spawn. (Used for bonus game.)
596,8263825,1,Timer,"P-balloon timer. Ticks down one step per four frames.

Note that setting this doesn't make the player fly away. The flight controller is $7E:13F3."
597,8263826,20,Sprites,"Cluster sprite number. The pointer for those is at $02:F825. A list of possible values, as well as more information on cluster sprites in general, can be found here.Valid Values"
598,8263846,1,Empty,"Empty, unused RAM. Referenced at $01CF9E (Morton's code) but never actually used. Cleared on reset, titlescreen load, overworld load and level load."
599,8263847,1,Blocks,"This address is a mirror of $7E:1693, which holds the Map16 number of the current block that is being checked. Primarily used in the Chargin' Chuck turn/throw block detection code."
600,8263848,2,Sprites,"Morton and Roy left and right pillar status. $7E:18A8 controls the left pillar, whereas $7E:18A9 is used for the right pillar.

#$00 = Pillar is not falling yet.

#$01 = Pillar is falling.

#$81 = Pillar has fallen."
601,8263850,2,Sprites,"Morton and Roy left and right pillar Y positions. $7E:18AA is the left pillar, $7E:18AB is the right pillar.

The pillar status ($7E:18A8 and $7E:18A9) is set to #$81 (pillar has fallen) as soon as this Y position becomes #$B0.

The Y speed here accelerates slightly - see $02:83F8 for reference."
602,8263852,1,Yoshi,"Timer on when Yoshi will swallow the sprite in his mouth. It ticks down one step every fourth frame, and Yoshi's swallowing animation starts when this is #$26 or lower."
603,8263853,1,Yoshi,"Frame counter for Yoshi's walking frames. It goes from #$00-#$02, forms an index for the image table at $01:EDEE, and becomes #$02 when it gets lower than #$00 (frame counter decrements).

This address is comparable with the player's version, at $7E:13DB."
604,8263854,1,Timer,"How long it takes for Yoshi's tongue to come out after the player ""hits"" Yoshi (after $7E:14A3 becomes #$10). Starts at #$06 and decrements each frame."
605,8263855,1,Yoshi,"Yoshi squatting timer. It's set to #$0C once the player hops onto Yoshi, decrements once every frame, and takes care of the ducking frame."
606,8263856,2,Yoshi,"Yoshi's X position. Used only to determine where Yoshi is when eating a berry (by means of walking into one, not sticking his tongue out)."
607,8263858,2,Yoshi,"Yoshi's Y position. Used only to determine where Yoshi is when eating a berry (by means of walking into one, not sticking his tongue out)."
608,8263860,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
609,8263861,1,Flag,"Cleared when standing on the ground, set when standing on the floor of the unused winged cage. It tells whether the player should be following the cage or layer 1."
610,8263862,1,Misc.,"Sometimes used to keep track of a tile to generate at $00:BEB0 (before storing to $7E:009C); may be in conjunction with $7E:185E. Also used to determine the player X position when he's on the line guided rope, used when the player is on top of Boo Block, etc."
611,8263863,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
612,8263864,1,Flag,"Run cluster sprite code.

#$00 = No; #$01 = Yes."
613,8263865,1,Sprites,Generator type that is currently active. #$01 = Eerie Generator; #$02 = Para Goomba; and so on. The pointer for this address is located at $02:B00C.
614,8263866,1,Sprites,"Index to the Boo rings that are on screen (maximum is two). Additionally, depending on bit 0 of this byte, the reappearing ghosts use position combination 1 or 2."
615,8263867,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
616,8263868,1,Sprites,"Floating skull speed. It's set to #$00 in the sprite initial routine, and set to #$0C when the player touches the sprite."
617,8263869,1,Timer,Time to stun the player. It will make the player face the screen and make him unable to move.
618,8263870,1,Flag,Flag used to tell if the player can climb on air. The line guided ropes use this to let the player get onto them.
619,8263871,1,Timer,"Timer used by a bunch of appearing/disappearing sprites (examples: Lakitu, Magikoopa, and Layer 3 smasher). Sprite D2 freezes it by incrementing the timer - effectively getting rid of the decrements applied by said sprites."
620,8263872,1,Timer,"Timer for respawning certain sprites, such as the Boo Buddies or sprite E5 (and Lakitu). Sprite D2, Turn Off Generator 2, sets this to zero when it is active."
621,8263873,1,Sprites,Used by Magikoopa and Lakitu to determine which sprite number should respawn when $7E:18BF is zero.
622,8263874,1,Flag,"Player is inside Lakitu cloud flag.

#$00 = Not inside Lakitu cloud.

#$01 = Inside Lakitu cloud.

If the latter, the player does not animate as if he were walking or floating."
623,8263875,2,Sprites,"Y position of the respawning sprite, used with $7E:18C0 (respawn timer) and $7E:18C1 (respawn sprite number)."
624,8263877,8,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
625,8263885,1,Sprites,Bounce sprite (alternative) index. Also used as which bounce sprite to overwrite if all slots are full when resetting a turn block (similar to $7E1861).
626,8263886,4,Timer,"Spinning turn block timer - amount of frames a spinning turn block lasts. When it hits zero, it reverts to a regular turn block."
627,8263890,1,Player,"This address is incremented every time the player kills a sprite with a star while the star is active and will reset when the star runs out.

#$01 = 200; #$02 = 400; #$03 = 800; #$04 = 1000; #$05 = 2000; #$06 = 4000; #$07 = 8000; #$08 and above = 1-Up"
628,8263891,1,Timer,"Write a value to here, and sparkles (like the ones from the stars) will fly around the player for that amount of frames. However, it is never used in the original game.

Note that if the player has an invincibility star, this timer will wait until the star runs out."
629,8263892,1,Yoshi,"Red berries eaten by Yoshi. After 10 berries, the counter resets and Yoshi lays an egg, containing a mushroom."
630,8263893,1,Yoshi,"Pink berries eaten by Yoshi. After 2 berries, the counter resets and Yoshi lays an egg, containing a coin game cloud."
631,8263894,1,Yoshi,"Type of the current berry being eaten. #$00 = Coin (no effect except getting a coin), #$01 = Red, #$02 = Pink, #$03 = Green. Controls both color and what happens when Yoshi eats the berry."
632,8263895,1,Sprites,"This is the high byte of the Map16 tile (actual tile number, not ""acts like"" setting) that a sprite is touching vertically.  The low byte is at $185F.


This, $185F, $1860, and $1862 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"
633,8263896,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."
634,8263897,1,Timer,"Timer for the castle/ghost house door in the intro sequence. The castle door starts at #$FF, the ghost house door starts at #$7F.

For the castle door: start rising and generate first sound at #$B0, rise until #$81, stay still until #$30, then sink and generate second sound at #$01.

For the ghost house door: open and generate first sound at #$76, then close and generate second sound at #$08."
635,8263898,1,Yoshi,Sprite number that spawns when Yoshi lays an egg. Valid values are #$74 (mushroom) and #$6A (coin game cloud).
636,8263899,1,Empty,"Set to #$08 at $00:CDD4 (unreachable by default) and never touched again. Might have been intended as a starting index for the player's fireballs.

Cleared on reset, titlescreen load, overworld load and level load."
637,8263900,1,Yoshi,"Flag that is set when the player is ducking with Yoshi. They cannot turn around in this state. If you were to use the debug codes at $00:D085-$00:D089, this also makes the fireballs that the player fires when on Yoshi appear at a different position."
638,8263901,1,Counter,Number of silver coins collected.
639,8263902,1,Yoshi,"Timer that determines how long it takes before an egg is laid by Yoshi, when 10 red Berries have been eaten. Is set to #$20 by default. Also, as long as this timer is above #$01, the player is frozen ($7E:13FB is set)."
640,8263903,1,Yoshi,"Slot (index to $7E:009E and similar) of the current Yoshi, plus 1. Set to #$00 when the Yoshi despawns.


In reality, this address is set to #$00 every frame, and is then set by Yoshi when his code runs. Because of this, sprites that run before Yoshi won't be able to read his slot from this address.


For finding Yoshi's slot within custom sprite code, it is preferable to use $18E2, since $18DF is copied to that address before being reset."
641,8263904,1,Timer,Timer for how long stolen Lakitu clouds should remain before evaporating. Decrements once every four frames.
642,8263905,1,Sprites,Slot of the Lakitu cloud (index to the sprite table that corresponds to the Lakitu cloud sprite). Contains a valid value even if the Lakitu itself is still alive.
643,8263906,1,Yoshi,"""Loose Yoshi"" flag, and slot (index to $7E:009E and similar) of the current Yoshi, plus 1. Gets it's value from $18DF. If set, Yoshis spawned from an egg will become a 1-up instead.


For finding Yoshi's slot within custom sprite code, it is preferable to use this address, since $18DF is reset every frame before being set by Yoshi again."
644,8263907,1,Sprites,"How many of the coins from the coin game cloud (the one that appears if Yoshi eats two pink berries) the player has collected. Oddly enough, it's cleared if you get hurt."
645,8263908,1,Misc.,1-Up handler. Write to it to give that many lives. Handles everything except the 1-Up/2-Up/etc. graphics.
646,8263909,1,Timer,Amount of time until the next life is given through the 1-Up handler ($7E:18E4).
647,8263910,1,Empty,"Empty. Cleared on reset, titlescreen  load, overworld load and level load."
648,8263911,1,Yoshi,"Yoshi ground stomp flag. #$00 = Yoshi does not stomp the ground when landing on it; #$01 = Yoshi does stomp the ground when landing on it.

This is set to #$01 when a Yellow Yoshi has a shell in its mouth, or when any Yoshi has a yellow shell in its mouth."
649,8263912,1,Yoshi,"Yoshi growing animation timer. Starts at #$40 and then decrements. Additionally, it freezes everything on the screen except Yoshi."
650,8263913,1,Sprites,"Occasionally used to index $7E:17C0 (smoke image table).  If there are no empty slots left when a smoke image should be spawned, the oldest one is removed and the index is reset."
651,8263914,12,Sprites,"Minor extended sprite X position, high byte."
652,8263926,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."
653,8263927,1,Sprites,Score sprite index.
654,8263928,4,Sprites,"Timer for quake/interaction sprites. This is set to #$06 and decrements by 1 each frame. If the timer is less than #$03, the quake sprite is allowed to interact with normal sprites (if $7E:16CD is not 0). When it reaches 0, the quake sprite is erased."
655,8263932,1,Sprites,"Alternative extended sprite index, used when the extended sprite tables are full. Holds the first available extended sprite index and resets to #$07 if all of them have been filled and another extended sprite is spawned."
656,8263933,1,Sprites,"Flag set when Whistlin' Chuck whistles, even when it's the Super Koopa-generating kind. Setting this makes Rip van Fish chase the player."
657,8263934,1,Sprites,"The diagonal and surrounded bullet bills timer. It increments every second frame, and when it reaches #$A0, it sends out some more Bullet Bills and resets itself."
658,8263935,1,Sprites,Shooter index for the current shooter that is being processed.
659,8263936,1,Counter,Bonus stars gained at level end - decrements to zero.
660,8263937,4,Sprites,YXPPCCCT data of bounce sprite that is being shown.
661,8263941,1,Counter,"Iggy's/Larry's platform total number of tilts made counter. It will increment everytime the platform will be at a maximum tilt.

Only the lowest bit is ever used, and it controls which direction it should move."
662,8263942,1,Timer,"Iggy/Larry's platform stationary phase timer. Is set to #$40 and decrements every frame. As long as it's not zero, the platform won't rotate."
663,8263943,1,Counter,"Iggy's platform rotation phase counter.

After the third phase ends, the counter resets.Valid Values"
664,8263944,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load."
665,8263945,1,Flag,"Flag that makes the creating/eating block run or not run. #$FF = don't run, any other value = run. Set to #$00 when a brown block is touched."
666,8263946,1,Sprites,"Reappearing Boo frame counter.  They start appearing at #$FF, become fully opaque at #$DF, start disappearing at #$3F, and become fully invisible at #$1F.  The counter decrements every frame and doesn't stop when it hits #$00 unless sprite D2 is active, which causes it to freeze at #$FF."
667,8263947,1,Sprites,"Big Boo Boss palette index, used for the transparency effect. The reappearing Boos (cluster sprites) also use this. They set this address to #$08."
668,8263948,1,Timer,Directional coin timer. Decrements every fourth frame.
669,8263949,1,Flag,"Used as a flag in the Bowser battle for whether or not the final cutscene is playing. Used to remove the item box, as well as several palette updates and using a different OAM index for the roof tiles. Any non-zero value activates the flag."
670,8263950,1,Sprites,"Sprite buoyancy settings from level header. Format: XY-- ---- (bits)

X = Enable sprite buoyancy. This reduces the number of sprites that can be on the screen at once without slowing down.

Y = Enable sprite buoyancy and disable all other sprite interaction with layer 2. This reduces the processing cost and slowdown."
671,8263951,12,Sprites,"Sprite properties, sixth Tweaker/MWR byte.

Format: wcdj5sDp

w=Don't get stuck in walls (carryable sprites)

c=Don't turn into a coin with silver POW

d=Death frame 2 tiles high

j=Can be jumped on with upward Y speed

5=Takes 5 fireballs to kill. Clear means it's killed by one. The hit counter is at $7E:1528.

s=Can't be killed by sliding

D=Don't erase when goal passed

p=Make platform passable from below"
672,8263963,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load, and every frame when Yoshi is on screen. The latter can be disabled by changing $01:EBD9 from [9C 1B 19] to [80 01 EA]."
673,8263964,1,Yoshi,"Indicates whether or not Yoshi has a key in his mouth. #$00 = no, #$01 = yes."
674,8263965,1,Sprites,Which cluster sprite to overwrite for the Sumo Bros. lightning's flames if all usable slots are full. Only cycles through sprites 0 to 9.
675,8263966,1,Misc.,"Is set to a value #$00-#$03 when pressing a big switch. Depending on the value, either a green, yellow, blue or red flat switch sprite will be left behind in the room."
676,8263967,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
677,8263968,1,Counter,How many 1-Ups from the bonus game are still not collected. Decrements every time a 1-Up is collected. The bonus game ends when this address hits zero.
678,8263969,1,Misc.,"During the cutscene after defeating Bowser, indicates which letter the ""Mario's adventure is over..."" message is currently at. Ends at #$54."
679,8263970,1,Should be 00,"High byte of $7E:1921. This is never any value other than #$00 in the original SMW, but since $7E:1921 is sometimes loaded in 16-bit mode, it's not a good idea to use it if you're using the original Bowser battle. Cleared on reset, title screen load, and overworld load."
680,8263971,2,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
681,8263973,1,Misc.,Level mode settings from level header.
682,8263974,2,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
683,8263976,1,Misc.,"One of two screen numbers used in the level loading routine. This one points to where the current object is placed and is never changed inside an object loading code. The other screen number is $7E:1BA1.


It is also used in the credits as a pointer to which background should be used for which part of the credits roll."
684,8263977,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
685,8263978,1,Misc.,"RAM address used to hold some information from the level entrance. Format: swaaaaaa. s = slippery level, w = water level, a = player action. If one of bits 3-5 is set, the player action will be ""vertical pipe exit downwards, water level"".

Note that the s and w bits are cleared after being transferred to $85/$86, so they'll be 0 when read mid-level."
686,8263979,1,Graphics,Sprite GFX set that is currently used.
687,8263980,1,Empty,"Empty. Cleared on reset, titlescreen load and overworld load."
688,8263981,1,Misc.,FG palette settings from the level header.
689,8263982,1,Misc.,Sprite palette settings from the level header.
690,8263983,1,Misc.,Background color settings from the level header.
691,8263984,1,Misc.,Background palette settings from the level header.
692,8263985,1,Misc.,Tileset setting from level header. Also used on the overworld and in cutscenes to determine what graphics should be uploaded.
693,8263986,1,Misc.,Copy of the tileset setting from the level header. Never read by anything.
694,8263987,1,Misc.,Layer being processed. #$00 = Layer 1; #$01 = Layer 2/3 (depending on which is interactive). Used in both level loading routine and processing interactions.
695,8263988,1,Should be 00,"While this is never non-zero in the original SMW, $7E:1933 (current layer) is sometimes used in 16bit mode, so using this address for different purposes is a bad idea."
696,8263989,1,Flag,"When set to a non-zero value, it'll overwrite tiles #$4A-#$4F and #$5A-#$5F with graphics which it gets from $7E:0BF6 on level load. Used by the MARIO START! sign. Flag is immediately cleared after that."
697,8263990,2,Misc.,Used by Lunar Magic v3.00+ to hold the screen size minus one tile. Effectively equivalent to $13D7 - #$10.
698,8263992,128,Sprites,"Sprite load status within the level.

Loaded sprites' indices to this table are stored in the sprite table at $7E:161A. Shooters' indices are stored to $7E:17B3.

All sprites are set to #$00 when the player enters a new area, meaning they are marked to be loaded.

If a sprite's value is set to anything else, for example if it's killed, it will not reload until the player exits and re-enters the area.


Note that indices 0 to 63 (#$00 to #$3F) are cleared on level load, index 64 to 127 (#$40 to #$7F) are not. This can be fixed by changing $02ABF3 to #$7F."
699,8264120,32,Misc.,"Exit Table. This connects doors and exit-enabled pipes to their correct entrances.

The index for this exit table is the position of the exit (relative to layer 1) divided by 256. If layer 1 is vertical, then use the Y position of the exit, else use the X position. This is also known as the current screen number.

For primary exits, the value in this exit table is the low 8 bits of the level number of the destination room. For secondary exits, the value in this exit table is the index to the secondary entrance ROM tables; and ROM table $05:F800/0x2FA00 provides the low 8 bits of the room number."
700,8264152,32,Misc.,"Exit Table, flags + high bit. Format: HHHHwush

h = Bit 8 of the level number for normal exits (0 = level 0xx, 1 = level 1xx).

HHHHh = Bits 8-12 of the secondary exit number.

s = Secondary exit flag.

u = LM-modified flag. If not set, the entire byte is ignored and SMW's original exit system is used.

w = Water flag (secondary exits) / Midway flag* (non-secondary exits).


* Only used if the level has ""use seperate settings for midway entrance"" set.


This table is only used when Lunar Magic is done with the ROM. The original game does write the h bit, but never uses it."
701,8264184,384,Misc.,"Three tables of 128 bytes each for remembering which items have been collected (item memory settings). If the corresponding bits are set (items are collected), those objects will not be reloaded.

The tables are split up like this: every screen number has 4 bytes designated to it. The first byte is for the left half of the top subscreen, the second byte for the right half, and the third and fourth are for the bottom subscreen. Each vertical column within these regions uses one bit.


Item memory setting 3 doesn't actually exist in the original game, but LM still allows you to select it. As of LM 1.8, it is apparently possible to use item memory setting 3 as well, but it only means ""make everything respawn"" and doesn't remember anything."
702,8264568,2,Overworld,"This is used on the overworld to determine if a hard coded path should be processed. This flag is set and read in 16-bit mode, it can have the values #$0000 or #$0001. #$0001 means that a hard coded path/event is processed.

Also used by Lunar Magic in levels for the ""Fix Layer 3 scroll sync"" option, but only when the option is on."
703,8264570,2,Overworld,"This address serves as index to $04:9086 which is used to get what hard coded tile to use for the current tile the player is walking on. This address plus one is also the index to $04:90CA.

Also used by Lunar Magic in levels for the ""Fix Layer 3 scroll sync"" option, but only when the option is on."
704,8264572,1,Overworld,"Accumulating fraction bits for the Layer 1 X speed on the overworld, used when the camera returns to the player after having been in free scrolling mode. This address handles incrementing the Layer 1 X position when it overflows."
705,8264573,1,Overworld,"Accumulating fraction bits for the Layer 1 Y speed on the overworld, used when the camera returns to the player after having been in free scrolling mode. This address handles incrementing the Layer 1 Y position when it overflows."
706,8264574,1,Overworld,"This address is a mirror of $7E:13C1 (tile the player is on in the overworld) and it's used to check whether the player is walking on a complementive corner tile (those small corners used with the paths, a list of all tile numbers can be found at $04:A03C) while settling on a level tile.

Appears to be designed to allow for (very) curvy paths leading to level tiles, found in for example Star World and the path to the warp pipe from Chocolate Island 2.

Depending on the complementive corner tile in question, the player image and position are altered when settling on a level tile."
707,8264575,1,Empty,"Empty. Cleared on reset, titlescreen load, overworld load and level load.


This address could be regarded as the ""high byte"" of $7E:1B7E, however it is never used (AND #$00FF is applied) and only stored to on the overworld. Thus, it is safe to use this address as free RAM outside of the overworld."
708,8264576,1,Overworld,"Player is on a ladder or vine flag (tiles 3F-41).

#$00 = Player is not on a climbing tile.

#$01 = Player is on a climbing tile."
709,8264577,1,Should be 00,"Uses in 16-bit loads to $7E:1B80, and otherwise #$00 is always stored here. Using this outside of the overworld is fine, however. Cleared on reset, titlescreen load and overworld load."
710,8264578,1,Overworld,X position on-screen of the current castle/fortress destruction explosion. Also denotes X position on-screen of the appearing event sprite tiles.
711,8264579,1,Overworld,Y position on-screen of the current castle/fortress destruction explosion. Also denotes Y position on-screen of the appearing event sprite tiles.
712,8264580,2,Timer,"The 16-bit address is used to determine whether the large event tiles (6x6) are uploaded or the small event tiles (2x2). It's #$0900 or higher if it's the latter. It gets its values from the table at $04:DD8D.


Solely $7E:1B84 is a timer used for handling castle/fortress destruction on the overworld, as well as the timer used for a level tile being revealed (the flash sprite)."
713,8264582,1,Pointer,Pointer to the various routines that handle overworld events being activated. The pointers are located at $04E577.Valid Values
714,8264583,1,Pointer,Overworld continue/save prompt trigger.Valid Values
715,8264584,1,Flag,Message box expanding (#$00) or shrinking (#$01) flag. Also used in various other instances such as the save prompt on the overworld.
716,8264585,1,Misc.,"Message box expansion and shrinking timer/size. Note: Setting expanding timer above #$04 will cause the message to be blank. Also used in various other instances, such as the save prompt on the overworld, and the opening/closing window effects during the credits."
717,8264586,1,Flag,"Which direction to point the arrow on the give lives menu.

#$00 = Point to Luigi's direction, give him lives.

#$01 = Point to Mario's direction, give him lives."
718,8264587,1,Overworld,"A timer that increments every frame, used for the blinking arrow on the give lives (between players) screen. If $7E:1B8B & #$18 gives a non-zero value, the arrow is shown. If the result of that is zero instead, a blank is shown."
719,8264588,1,Flag,"Used as a flag to determine whether you are at the first or second iteration of the pointer to $04:DB18 ($7E:1DE8 is #$00 or #$06). #$02 is fully cleared, #$00 is fully blacked out. Needed to make the windowing HDMA fade out at first, then fade back in when the submap switching process is done."
720,8264589,2,Overworld,"Used in the calculation of the X positions for the overworld fade in/out windowing HDMA transitions.  Removing stores to this address will make it only active in the Y direction. Starts at #$0000 (completely black) and ends at #$7000 (cleared, except for the sides which are hidden under the overworld border)."
721,8264591,2,Overworld,Used in the calculation of the Y positions for the overworld fade in/out windowing HDMA transitions.  Removing stores to this address will make it only active in the X direction. Starts at #$0000 (completely black) and ends at #$5400 (cleared).
722,8264593,1,Counter,"Blinking cursor frame counter (file select, save prompt, etc.)"
723,8264594,1,Misc.,Position of the cursor on the title screen menus.
724,8264595,1,Misc.,Use Secondary Exits flag. This is likely not used when Lunar Magic is done with the ROM.
725,8264596,1,Flag,"Disable bonus game sprite from being loaded flag. If not zero, the bonus game sprite will terminate itself in the init routine."
726,8264597,1,Flag,"This flag is set to #$02 as soon as the Yoshi wings animation (#$08 of $7E:0071) brings you above the screen ($7E:0080 = #$FFC0), which means you will be heading for level C8 or 1C8.

A bycoming effect is that Yoshi will have wings in that level, and that you can't die from falling into the depths. Moreover, as you enter the level, Yoshi will always be blue. It's also the only way you can ""die"" with Yoshi without losing him on the overworld."
727,8264598,1,Flag,Side exit enabled flag. #$00 = Disabled; #$01 = enabled.
728,8264599,2,Empty,"This address is only stored to once in all of SMW, and that's in code that was originally never used (the fifth scrolling command, sprite #$EC). It was going to have some unknown use when you reached the last screen of the level. Because SMW never executes the code that writes to it (unless that command is used), this is a safe address to use.


Cleared on reset, titlescreen load, overworld load and cutscene load."
729,8264601,1,Flag,"Used in goal point marching: flag to show peace image flag and handling the fade-out ellipse.

#$00 = Don't show peace image yet, don't handle fade-out ellipse.

#$01 = Show peace image and handle fade-out ellipse."
730,8264602,1,Graphics,"Background Scroll Activated flag. The unused orange platform (sprite 5E) sets it to #$01, and the flying turn blocks (sprite C1) set it to #$08.

If set, triggers the fast BG scroll sprite, as well as making the flying turn blocks move."
731,8264603,1,Flag,"Used to check if Yoshi should not reappear for the next room (castle intro cutscene and the likes). These cutscenes set the flag to #$01, which makes Yoshi not reappear for the next room, but it does keep Yoshi on the overworld. Automatically set to #$00 when the overworld is loaded again. One could use this RAM address to disable Yoshi for one room, but re-enable him in the next again."
732,8264604,1,Overworld,"Player is entering a warp pipe/star flag.

#$00 = No; #$01 = Yes."
733,8264605,1,Timer,"Time to wait until the rising/sinking tide starts rising/sinking again (after the ""no movement"" interval)."
734,8264606,1,Flag,"Music has to be altered on the overworld during a 2-player game flag.

#$00 = Do not alter music.

#$01 = Do alter music.

It's set when the players are switching, but also when you go from submap to submap, the latter even when it's a 1-player game. But this flag is never read if it's a 1-player game."
735,8264607,1,Counter,Number of broken tile pairs in the Reznor battle.
736,8264608,1,Overworld,"The overworld uses this address to shake the ground as the Valley of Bowser entrance rises from the depths, by setting this address to #$FF. It also changes the music and adds some sound effects. It's a timer, but it only decrements as long as $7E:13D9 is #$02."
737,8264609,1,Misc.,"One of two screen numbers used in the level loading routine. This one points to where the next tile will be placed and is often changed inside an object loading code. The other screen number is $7E:1928.

Although referenced at $03:DF58 (Bowser's code), its value isn't actually used there."
738,8264610,1,Sprites,"Bits 0-6 form the index to the tilemap for the Mode 7 bosses, which read from the table at $03:D9DE, 16 bytes per image. Bit 7 is used to control the X-flip of the tiles. What actually happens then, is that the odd graphic tile is used instead of the even graphic tile, since all Mode 7 graphics are decompressed into a regular and flipped tile. For example, tile #$01 in VRAM is the same as tile #$00 except it's flipped."
739,8264611,64,Graphics,"A buffer that is used for uploading Mode 7 tile data to VRAM in non-platform Mode 7 bosses. The buffer is enough to fill in an entire 8x8 tile, as each 8x8 tile requires 64 bytes in Mode 7 8bpp.


$7E:1BB2 is also used as a buffer in the graphics upload routine.  The use seems to be for converting 3bpp to 4bpp format.


$7E:1BBC is used as a flag in the graphics upload routine to alter 3bpp to 4bpp conversion depending on the graphics file that is being uploaded."
740,8264675,1,Misc.,"Layer 3 settings.

#$00 = No Layer 3; #$01 = Low and high tide; #$02 = Low tide only; #$03 = Tileset specific image."
741,8264676,2,Blocks,VRAM address to start uploading data from the table at $7E:1BE6. It's used for layer 1. Big endian.
742,8264678,256,Blocks,"Which tiles should be used for each row of 16x16 tiles, 2 bytes per 8x8 tile, used while scrolling layer 1 (loading new tiles). In horizontal levels, $7E:1BE6-$7E:1C65 form the left column of 8x8 tiles while $7E:1C66-$7E:1CE5 form the right column of 8x8 tiles. On the overworld and in vertical levels, $7E:1BE6-$7E:1C65 form the upper row of 8x8 tiles, while $7E:1C66-$7E:1CE5 form the bottom row of 8x8 tiles."
743,8264934,2,Blocks,VRAM address to start uploading data from the table at $7E:1CE8. It's used for layer 2. Big endian.
744,8264936,256,Blocks,"Which tiles should be used for each row of 16x16 tiles, 2 bytes per 8x8 tile, used while scrolling interactive layer 2 (loading new tiles). In horizontal levels, $7E:1CE8-$7E:1D77 form the left column of 8x8 tiles while $7E:1D78-$7E:1DE7 form the right column of 8x8 tiles. On the overworld and in vertical levels, $7E:1CE8-$7E:1D77 form the upper row of 8x8 tiles, while $7E:1D78-$7E:1DE7 form the bottom row of 8x8 tiles."
745,8265192,1,Overworld,This is a pointer index used for various tasks during the submap switching scene ($7E:13D9 is #$0A).Valid Values
746,8265193,1,Overworld,"If non-zero, indicates an event should be activated on overworld load (otherwise, event handling is skipped). The 'Course Clear!' and Switch Palace message box routines set this just before loading the overworld, and it's set to zero again when the event finishes executing.


Additionally, the enemy credits use this as the current screen number. Counts up to #$0C, which has the last set of enemies (the Koopa Kids and Bowser)."
747,8265194,1,Overworld,Overworld event to run at level end. #$FF means that no event will be run.
748,8265195,2,Overworld,"Event tile to load to the overworld. A starting value is set to this at level end, and it increments until it reaches the value of $7E:1DED."
749,8265197,2,Overworld,"Last event tile to load to the overworld during a given event, set at level end."
750,8265199,1,Empty,Empty. Cleared on reset and titlescreen load.
751,8265200,2,Overworld,"$7E:1DF0 - X position of the camera when using the overworld scroll function, low byte.

$7E:1DF1 - X position of the camera when using the overworld scroll function, high byte.

These values are only used to determine which way the camera should go to get back to the player."
752,8265202,2,Overworld,"$7E:1DF2 - Y position of the camera when using the overworld scroll function, low byte.

$7E:1DF3 - Y position of the camera when using the overworld scroll function, high byte.

These values are only used to determine which way the camera should go to get back to the player."
753,8265204,1,Misc.,Index to intro control sequence data table.
754,8265205,1,Timer,"Timer to used for multiple purposes:

- How long a particular input during the intro sequence will remain pressed.

- How long the Nintendo Presents screen will remain active.

- How long a Switch Palace message will remain active.

- How long the player has to wait before he can dismiss the intro message."
755,8265206,1,Overworld,"Star and Warp pipe handler. It's an index of the current star/warp pipe tile you're standing on, multiplied by two. With this index, the destination coordinates are determined."
756,8265207,1,Player,"Used by the Star Road warp star on the overworld. Determines the speed with which the player is launched in the air during warping. The higher the value, the faster he gets launched in the air. By default the maximum is #$04, though this cap can be altered by editing $04:9E70/0x22070."
757,8265208,1,Timer,"Used by the Star Road warp star tile on the overworld. It controls how long the player has to stay on the ground during the warp, before he actually gets launched in the air. The player gets airborne as soon as the timer hits #$31 (as it increments)."
758,8265209,4,I/O,"SPC700 I/O Ports. Write values to play music/SFX.

Note that the valid values refer to a clean rom, if using an Addmusic tool songs and sound effects are (usually) remapped (for example, with AddmusicK you can check them in ""Addmusic_sound effects.txt"" and ""Addmusic_list.txt"").$1DF9 Values
$1DFA Values
$1DFB Values (Level)
$1DFB Values (Overworld/Title)
$1DFC Values"
759,8265213,2,Empty,"Empty. Cleared on reset, titlescreen, overworld and level load (the latter two due to new music banks being uploaded). Note that $7E:1DFD is cleared twice, due to a 16-bit store to $7E:1DFC - at $04:969F/0x2189F (LDA #$0023 : STA $1DFC) and $05:C75D/0x2C95D (LDA #$0009 : STA $1DFC)."
760,8265215,1,I/O,"A copy of $7E:1DFB, the music register. It contains the last value written to SNES register $2142. Probably used to keep the music playing between areas."
761,8265216,1,Empty,"Empty. Cleared on reset, titlescreen, overworld and level load (the latter two due to new music banks being uploaded)."
762,8265217,1,Empty,"Empty, unused. Cleared on reset and titlescreen load. However, if  the debug code at $00:CC86/0x4E86 is enabled, this address allows you to be in free roaming mode: the player can move in any direction, without being affected by objects or sprites. #$00 = none; #$01 = dash immediately; #$02 = free roaming."
763,8265218,20,Sprites,"Cluster sprite Y position, low byte."
764,8265238,20,Sprites,"Cluster sprite X position, low byte."
765,8265258,20,Sprites,"Cluster sprite Y position, high byte."
766,8265278,20,Sprites,"Cluster sprite X position, high byte."
767,8265298,20,Sprites,"Cluster sprite table. Used as:

- Y position of reappearing Boos, frame 1. Not relative to screen border.

- Y speed for Boos from ghost ceiling and death bats."
768,8265318,20,Sprites,"Cluster sprite table. Used as:

- X position of reappearing Boos, frame 1. Not relative to screen border.

- X speed for Boos from ghost ceiling and death bats."
769,8265338,20,Sprites,"Cluster sprite table. Used as:

- Y position of reappearing Boos, frame 2. Not relative to screen border.

- Accumulating fraction bits for fixed point Y speed of death bats."
770,8265358,20,Sprites,"Cluster sprite table. Used as:

- X position of reappearing Boos, frame 2. Not relative to screen border."
771,8265378,96,Overworld,"Overworld level setting flags, location within the table corresponds to $7E:13BF. Format: bmesudlr.

b = level is beaten.

m = midway point has been passed.

e = no entry if level already passed.

s = open Save Prompt when level is beaten.

u = enable walking upwards.

d = enable walking downwards.

l = enable walking leftwards.

r = enable walking rightwards.


Setting the high bit of $7E:1EEB will enable the special stage features (autumn overworld palettes, etc.) in the ORIGINAL game."
772,8265474,15,Overworld,"Overworld event flags. The table works bitwise - if a bit corresponding to an event is set, that event has been run. If it's clear, it hasn't been run yet.


There's a little formula for finding out what event number corresponds to which bit. Take the event number, divide by eight and use that as index for this table. Take the remainder, and that number (0-7) is the position of the bit inside the indexed byte (left to right).

Example: Finding event #$13. Division by eight turns #$02 as index (so $7E:1F04) and #$03 as the remainder. It's bit 4 of $7E:1F04 (xxxx xxxx). Not bit 3, because of the ""reversed"" AND tables that are used with this table - bits are not counted from right to left, but from left to right instead."
773,8265489,1,Overworld,Current submap for Mario. #$00 = Main map; #$01 = Yoshi's Island; #$02 = Vanilla Dome; #$03 = Forest of Illusion; #$04 = Valley of Bowser; #$05 = Special World; #$06 = Star World.
774,8265490,1,Overworld,Current submap for Luigi. #$00 = Main map; #$01 = Yoshi's Island; #$02 = Vanilla Dome; #$03 = Forest of Illusion; #$04 = Valley of Bowser; #$05 = Special World; #$06 = Star World.
775,8265491,4,Player,"Player animation on the overworld.


$7E:1F13/4 form Mario's image and $7E:1F15/6 form Luigi's image. Note that the high bytes of the two (bytes 2 and 4, $7E:1F14 and $7E:1F16) are actually unused.Valid Values"
776,8265495,2,Player,Overworld X position of Mario.
777,8265497,2,Player,Overworld Y position of Mario.
778,8265499,2,Player,Overworld X position of Luigi.
779,8265501,2,Player,Overworld Y position of Luigi.
780,8265503,2,Player,Pointer to Mario's overworld X position. Value is Mario's regular overworld X position divided by #$10 (#16).
781,8265505,2,Player,Pointer to Mario's overworld Y position. Value is Mario's regular overworld Y position divided by #$10 (#16).
782,8265507,2,Player,Pointer to Luigi's overworld X position. Value is Luigi's regular overworld X position divided by #$10 (#16).
783,8265509,2,Player,Pointer to Luigi's overworld Y position. Value is Luigi's regular overworld Y position divided by #$10 (#16).
784,8265511,4,Flag,"Switch palace activation flags. $00 = off (outline passable switch palace blocks), $01 = on (solid switch palace blocks):

$7E1F27: Green

$7E1F28: Yellow

$7E1F29: Blue

$7E1F2A: Red


Note: effects to the blocks will only apply during level loading when these flags are changed."
785,8265515,3,Empty,"Empty. Unlike most empty addresses, this one is saved to and loaded from SRAM, so it's effectively cleared only at reset and new game."
786,8265518,1,Counter,Number of events triggered. Can be used as a levels beaten counter.
787,8265519,12,Flag,"""Collected five or more Yoshi Coins"" flags, for each level.

Each seperate byte represents the values for 8 levels, with each bit acting as a flag for a given level.

If a bit is set, no Yoshi Coins will reappear in that level.


The format is as following: $7E:13BF (the level number) divided by 8 (3x LSR) provides the index per byte into this table; that's because 8 levels are represented by one byte, 1 bit per level.

For each byte, the level modulo 8 (AND #$07) is the index to the bit, and said index gets the corresponding bit from an AND table at $05:B35B.

That bit will be the flag for the level.

0 = clear bit, less than five Yoshi Coins collected; 1 = set bit, five or more Yoshi Coins collected.


An example: checking if five or more Yoshi Coins were collected in level 105. First, convert to $7E:13BF format. #$29 indicates you're in level 105.

Divide that by 8 to get the byte index - #$29 divided by 8 is five (rounded), so the sixth byte is the correct index.

After that, apply modulo 8 on #$29 - AND #$07 - and you'll end up with #$01.

This value is then used to index the aforementioned AND table, which gets the corresponding bit - in this case, #$40, bit 6.

So if bit 6 of the sixth byte ($7E:1F34) in the table is set, five or more Yoshi Coins have been collected in level 105."
788,8265531,1,Empty,"Empty. Cleared on reset, titlescreen load and at the game over screen."
789,8265532,12,Flag,"""Collected invisible 1-Up flags"", for each level.

Each seperate byte represents the values for 8 levels, with each bit acting as a flag for a given level.

If a bit is set, no invisible 1-Up will reappear in that level.


The format is as following: $7E:13BF (the level number) divided by 8 (3x LSR) provides the index per byte into this table; that's because 8 levels are represented by one byte, 1 bit per level.

For each byte, the level modulo 8 (AND #$07) is the index to the bit, and said index gets the corresponding bit from an AND table at $05:B35B.

That bit will be the flag for the level.

0 = clear bit, invisible 1-Up not collected; 1 = set bit, invisible 1-Up collected.


An example: checking if an invisible 1-Up was collected in level 105. First, convert to $7E:13BF format. #$29 indicates you're in level 105.

Divide that by 8 to get the byte index - #$29 divided by 8 is five (rounded), so the sixth byte is the correct index.

After that, apply modulo 8 on #$29 - AND #$07 - and you'll end up with #$01.

This value is then used to index the aforementioned AND table, which gets the corresponding bit - in this case, #$40, bit 6.

So if bit 6 of the sixth byte ($7E:1F41) in the table is set, an invisible 1-Up has been collected in level 105."
790,8265544,1,Empty,Empty. Cleared on reset and titlescreen load.
791,8265545,141,Overworld,Buffer for $7E:1EA2-$7E:1F2E. SRAM transfer of those bytes goes via this buffer.
792,8265686,12,Sprites,"Unused sprite table, cleared at individual sprite load. (1 slot each.)"
793,8265698,12,Sprites,"Sprite table that decrements once per frame, and is used for multiple purposes. All standard sprites have it briefly set after spawning.


Primarily, it disables water splashes from showing when the sprite enter or exits water, and disables interaction for the sprite with capespins, quake sprites, cape smashes, and net punches. Some sprites use it for miscellaneous purposes, as well. More information can be found here."
794,8265710,12,Flag,"""Collected 3-Up moon"" flags, for each level.

Each seperate byte represents the values for 8 levels, with each bit acting as a flag for a given level.

If a bit is set, no 3-Up will reappear in that level.


The format is as following: $7E:13BF (the level number) divided by 8 (3x LSR) provides the index per byte into this table; that's because 8 levels are represented by one byte, 1 bit per level.

For each byte, the level modulo 8 (AND #$07) is the index to the bit, and said index gets the corresponding bit from an AND table.

That bit will be the flag for the level.

0 = clear bit, no 3-Up moon collected; 1 = set bit, 3-Up moon collected.


An example: checking if a 3-Up moon was collected in level 105. First, convert to $7E:13BF format. #$29 indicates you're in level 105.

Divide that by 8 to get the byte index - #$29 divided by 8 is five (rounded), so the sixth byte is the correct index.

After that, apply modulo 8 on #$29 - AND #$07 - and you'll end up with #$01.

This value is then used to index the aforementioned AND table, which gets the corresponding bit - in this case, #$40, bit 6.

So if bit 6 of the sixth byte ($7E:1FF3) in the table is set, a 3-Up moon has been collected in level 105."
795,8265722,1,Empty,Empty. Cleared on reset and titlescreen load.
796,8265723,1,Palettes,"Lightning flash color index. Only #$00-#$07 are actually used. #$07 is the brightest shade of white, the lower the value, the closer to black it gets. This address gets its value from the table at $04:F700."
797,8265724,1,Timer,"How long to wait until the next lightning flash is generated. Gets its value from a table at $04:F6F8, which in turn gets its index from a ""random"" value in the routine of $04:F708 & #$07. This address decrements after the previous lightning flash has ended."
798,8265725,1,Timer,"How long a lightning flash should last, per color change. Is set to #$08 frames for the first color flash (the most bright one), then it's set to #$04 frames for the following color flashes which are becoming less and less bright. Decrements every frame."
799,8265726,1,Flag,"Whether to update the background in the first part of the credits, or not.

#$00 = Don't update the background.

#$01 = Do update the background."
800,8265727,1,Empty,Empty. Cleared on reset and titlescreen load.
801,8265728,23808,Graphics,"GFX32 decompressed. Written while the Nintendo Presents logo is shown and never modified after that, but often read."
802,8289536,12288,Graphics,"GFX33 decompressed. Written while the Nintendo Presents logo is shown and never modified after that, but often read."
803,8301824,3072,Graphics,"GFX file decompression buffer.  Decompressed as 3bpp (3kb) for unexpanded GFX and as 4bpp for expanded.

Also used for Lunar Magic's extra animated tile space.

$7E:B900 is also used as additional buffer kilobyte."
804,8304896,1024,Blocks,"Layer 2 tilemap, low byte. Format: First two 16x27 rectangles, then 160 25s that are never read.


Also used on the overworld during the switch block events for various purposes:

$7EB900-$7EB927 = Switch block X position, high byte

$7EB928-$7EB94F = Switch block Y position, high byte

$7EB950-$7EB977 = Switch block Z position, high byte

$7EB978-$7EB99F = Switch block X position, low byte

$7EB9A0-$7EB9C7 = Switch block Y position, low byte

$7EB9C8-$7EB9EF = Switch block Z position, low byte

$7EB9F0-$7EBA17 = Switch block X speed

$7EBA18-$7EBA3F = Switch block Y speed

$7EBA40-$7EBA67 = Switch block Z speed

$7EBA68-$7EBA8F = Accumulating fraction bits for fixed point switch block X speed

$7EBA90-$7EBAB7 = Accumulating fraction bits for fixed point switch block Y speed

$7EBAB8-$7EBADF = Accumulating fraction bits for fixed point switch block Z speed"
805,8305920,1024,Blocks,"Layer 2 tilemap, high byte; same format as $7E:B900.  Writing to this area with the gfx+2 patch installed generates BG garbage and should never be done."
806,8306944,1408,Empty,"Empty, untouched RAM on an unhacked ROM.  Lunar Magic uses it to store ExAnimation graphics data if the ExAnimation file is larger than 0x1400 bytes.  Maximum size is 0x1B00, or enough for 0xD8 4bpp 8x8 tiles, in which case all of $7E:AD00-$7E:C7FF is used."
807,8308352,96,Misc.,"Tilemap of Mode 7 bosses (Ludwig, Roy, Morton and Bowser)."
808,8308448,288,Empty,"Empty, untouched RAM on an unhacked ROM.  In a hacked ROM, it may be occupied by ExAnimation data (see $7E:C100)."
809,8308736,14336,Blocks,"Map16 Low Byte Table.

For horizontal levels, $1B0 tiles per screen, where each screen can be indexed using the format ------y yyyyxxxx. $7E:FE00-$7E:FFFF are unused.

For vertical levels, $200 bytes per screen, with the format --sssssx yyyyxxxx. All bytes are used.

If layer 2 or 3 is interactive in the level, it uses screens 10-1F (0E-1B in vertical levels).


On Lunar Magic version 3+, refer to this document for the blocks format for other level dimensions.



On the overworld:

$7E:C800-$7E:CFFF (2048 ($800) bytes) is used as the Layer 1 tilemap for the overworld.

To index this table, use $7E:1F11, $7E:1F1F, and $7E:1F21 to find Mario, or use $7E:1F12, $7E:1F23, and $7E:1F25 to find Luigi.

X position / 16: %---- ---- ---X xxxx

Y position / 16: %---- ---- ---Y yyyy

Index to this table: %---- -SYX yyyy xxxx

* If Mario is on a submap, the S bit is set.


$7ED000-$7ED7FF (2048 bytes) is used as a table that contains the translevel numbers for every Layer 1 tile, in the format of $7E13BF.

$7ED800-$7EDFFF (2048 bytes) is used as a table that contains the path direction settings for every Layer 1 tile, in the format of $04D678.

$7EE400-$7EEBFF (2048 bytes) is used for uploading the Layer 1 tile map to VRAM in 2KB chunks. One chunk is uploaded per frame for four frames during transitions between the main overworld and submaps. Data is refreshed after each DMA."
810,8323072,16384,Overworld,"Layer 2 event tilemap of the overworld. $7F:0D00-$7F:3FFF is empty (untouched) RAM on a vanilla ROM, but LM uses it to hold the expanded layer 2 event tilemap on a hacked ROM.

LM also uses $7F:0000 and upwards to store title screen movement (three bytes every time a key is pressed or released, or if the same keys are held for #$FF frames), and $7F:0B44-$7F:1343 are also used as buffer for dynamic sprite graphics because of them being uploaded during V-Blank."
811,8339456,16384,Overworld,"The Layer 2 tilemap of the whole overworld (including submaps, starting at $7F:6000). It does NOT affect the event tiles. The tiles are also 8x8. The tilemap starts from the top left corner of the main overworld. Format is as following:

[Tile number], [Tile properties]

This table is also used for a RAM buffer for the credit cutscene backgrounds."
812,8355840,387,Sprites,"Unrolled loop which, executed once per each frame, writes to OAM to put all sprites outside the screen (this clears the OAM slots by setting their Y positions to #$F0). Note: Not executed during pause."
813,8356227,504,Empty,"Empty, untouched RAM.

~420 bytes used in LM 1.70+ for VRAM modification (see details).RAM Map"
814,8356731,2,Misc.,"Current length of the $7F837D stripe image, excluding the FF terminator. Used to allow two subroutines to write to $7F837D in the same frame."
815,8356733,5118,Misc.,"VRAM upload table, as a stripe image. Used for things that change in the middle of the screen, such as ? blocks. Uploaded and reset every frame; most frames, it's empty.


Not all of it is used during normal gameplay, so $7F:8600+ shouldn't be dangerous to use.


See here for more info."
816,8361851,768,Misc.,"Mario/Luigi Start, Game Over, Time Up etc. messages Graphics, decompressed."
817,8362619,512,Sprites,Position of Wiggler's segments.
818,8363131,11141,Empty,"Empty RAM which is entirely untouched.

This area is used by many SMW hacking tools and patches, so hacked ROMs are likely to use some of the addresses found here."
819,8366864,12,Sprites,"Custom sprite table used by Pixi.

It holds the extra bits of a sprite.Usage"
820,8366876,12,Sprites,"Custom sprite table used by Pixi.

Using during sprite loading to signal that the sprite being loaded is custom. Used for custom generators, shooters and normal sprites."
821,8366888,12,Sprites,"Custom sprite table used by Pixi.

It holds the first extra property byte of the sprite."
822,8366900,12,Sprites,"Custom sprite table used by Pixi.

It holds the second extra property byte of the sprite."
823,8366912,12,Sprites,"Custom sprite table used by Pixi.

It holds the first extra (extension) byte of the sprite."
824,8366924,12,Sprites,"Custom sprite table used by Pixi.

It holds the second extra (extension) byte of the sprite."
825,8366936,12,Sprites,"Custom sprite table used by Pixi.

It holds the third extra (extension) byte of the sprite."
826,8366948,12,Sprites,"Custom sprite table used by Pixi.

It holds the fourth extra (extension) byte of the sprite."
827,8367006,12,Sprites,"Custom sprite table used by Pixi.

It holds the custom sprite number, as defined in the list.txt file. To get the act as of a sprite, use $9E instead."
828,8367104,8,Sprites,"Custom shooter sprite table used by Pixi.

It holds the first extra byte of the shooter."
829,8367112,8,Sprites,"Custom shooter sprite table used by Pixi.

It holds the second extra byte of the shooter."
830,8367120,8,Sprites,"Custom shooter sprite table used by Pixi.

It holds the third extra byte of the shooter."
831,8367872,256,Sprites,"Custom sprite table used by Pixi.

This serves the same purpose as $1938, but it supports up to 255 sprites per level. Not used if !Disable255SpritesPerLevel is set. In custom sprites it's recommended to use the !1938 define, since it'll be mapped to either $1938 or $7FAF00 depending on the Pixi configuration (pay attention that in one case it's absolute, in the other it's long!)."
832,8368128,1034,Misc.,RAM used by AddmusicK for various purposes.RAM Map
833,8372224,26,Misc.,Used by Lunar Magic for various purposes. See details for an incomplete list.RAM Map
834,8372256,14,Misc.,"Used by Lunar Magic 2.20+ for LZ2/LZ3/ExAnimation code execution, on SA-1 roms only."
835,8372320,16,Flag,"Conditional Direct Map16 flag. It's a table of bits, ordered from low to high. Used since Lunar Magic 1.80."
836,8372336,16,Misc.,"Manual ExAnimation triggers. Each manual trigger slot corresponds to 1 byte in this table. Note that this address is not initialized unless you use the ""Trigger Init"" button in the ExAnimation dialog.

Used since Lunar Magic 1.70."
837,8372352,32,Counter,"Level ExAnimations frame counter, one byte for each slot."
838,8372384,32,Counter,"Global ExAnimations frame counter, one byte for each slot."
839,8372472,4,Misc.,"One Shot ExAnimation triggers. Each trigger corresponds to 1 bit, ordered from lower to higher.

Used since Lunar Magic 1.70."
840,8372476,2,Misc.,"Custom ExAnimation triggers. Each trigger corresponds to 1 bit, where a bit set means the trigger is enabled. Note that this address isn't initialized unless you use the ""Trigger Init"" button in the ExAnimation dialog.

Used since Lunar Magic 1.70."
841,8372992,1024,Misc.,Map16 high byte buffer. Used since Lunar Magic 1.70 for VRAM modifications.
842,8374272,14336,Blocks,"Map16 high byte table. Same format as $7E:C800.

$7F:FFF8 through $7F:FFFD are also used by Lunar Magic's title screen recording ASM."
843,32768,39,ASM,"This is the starting address of SMW.  This takes care of basic initialization such as disabling IRQ, HDMA, DMA, clearing the SPC ports, enabling F-blank, disabling emulation mode, disabling decimal mode, initializing the direct page, and setting up the stack."
844,32807,43,ASM,This is code is responsible for uploading the OAM clear routine to $7F8000.  The uploaded routine is essentially an unrolled loop which stores #$F0 to all of the OAM mirror($0200)  Y positions.
845,32850,25,ASM,"This is the main part of the SMW initialization routine. SPC engine upload, sample upload, OAM setup, windowing setup, and RAM clearing all happens here."
846,32875,14,ASM,This is the main game loop of SMW. It is used to wait for V-blank to complete before executing the code of the next frame. One of the frame counters ($13) is also incremented here.
847,33038,15,Subroutine (JSR),OW Music uploader.
848,33076,37,Subroutine (JSR),Uploads level music bank.
849,33113,17,Subroutine (JSR),Credit music uploader.
850,33130,522,Misc.,"SMW's NMI routine. For more information, see here."
851,33145,49,ASM,Handles transfers to and from the SPC700 (I/O). Changing all values to [EA] (NOP) or jumping over the code effectively mutes all sound.
852,33427,1,Misc.,How many scanlines the status bar uses during a regular level.
853,33629,1,Layer 3,"How many scanlines the status bar uses during the battles with Bowser, Ludwig, and Reznor."
854,33648,1,Layer 3,How many scanlines the status bar and ceiling use during the battles with Morton and Roy.
855,33652,162,Misc.,SMW's IRQ routine.
856,33865,44,Sprite Misc.,Code that transfer Sprite OAM mirror to register $2104 to draw sprites.
857,33992,8,Subroutine (JSL),"Wrapper for the stripe image uploader (pointer lies in $12). Because it upload tiles, it must run in either f- or v-blank (e.g. in NMI)."
858,34000,258,Stripe Image,"Stripe image pointer table.  Each 24-bit pointer here corresponds to a value of $12, but only multiples of 3 are used.  (The first pointer is for value 00, the second is for value 03, the third for 06, etc.)"
859,34298,86,Subroutine (JSR),"Fills the entire layer 3 tilemap with tile 0x0FC (transparent tile) i.e. the code ""empties"" it. Also wipes the OAM before returning."
860,34384,119,Subroutine (JSR),"This is the routine that polls the controller and updates $15, $16, $17, $18.

$0086A0 (x8A0) - Change to [9C A0 0D AD A0 0D A2 00] to cause both player 1 & 2 to be controlled by controller 1."
861,34527,27,Subroutine (JSL),"Pointer subroutine: Jump to a 2-byte pointer, the position of the pointer used is ""Position after the JSL + 1 + (A*2)"". The subroutine should always be accessed by a JSL."
862,34554,36,Subroutine (JSL),"Pointer subroutine: Jump to a 3-byte pointer, the position of the pointer used is ""Position after the JSL + 1 + (A*3)"". The subroutine should always be accessed by a JSL."
863,34590,143,Stripe Image,"Stripe Image Uploader. Uses $00-$02 as a 24-bit pointer to tile data. See this thread how the stripe image format works. Must be run during a blank, usually NMI.


To call from a custom routine, do this:

- Store stripe image pointer (24-bit) to $00-$02

- Push 24-bit return address (bank -> mid -> lo)

- PHB : LDA #$00 : PHA : PLB

- PEA $84CD

- JSL $00871E"
864,34733,617,Subroutine (JSL),This routine is the DMA routine in charge of updating layers one and two as needed. This is controlled by the addresses $1BE4 and $1CE6 when they are a non-zero value.
865,35406,43,Subroutine (JSR),Clear RAM subroutine. This is part of the reset routine.
866,35449,59,ASM,"The routine that sets up certain VRAM-related registers in normal levels.

- $008A80: Default value for $2107 [23].

- $008A85: Default value for $2108 [33].

- $008A8A: Default value for $2109 [53].

- $008A8F: Default value for $210B [00].

- $008A94: Default value for $210C [04].

- $008AAB: Default value for $2130 [02], although it's actually stored to the mirror here (i.e. $44).

$210A is never set, since it is only ever used in Mode 0."
867,35929,40,Layer 3,Tile array for numbers in bonus star counter.
868,35969,126,Layer 3,"Default status bar tiles info table. Format for each 8x8 tile:

%TTTTTTTT %YXPCCCTT


*$008C81-$008C88: top line of status bar (4 top tiles of the item box)

*$008C89-$008CC0: Second line of status bar

*$008CC1-$008CF6: Third line of status bar

*$008CF7-$008CFE: bottom line of status bar (4 bottom tiles of item box)Table of addresses"
869,36235,1,Timer,Timer speed (USE WITH $008E2E)
870,36240,28,Misc.,These four tables indicate the DMA settings and the source address to use for the status bar tiles (the ones that are uploaded at the very beginning of the level). The tables get stored in the order of $43x0-$43x6.
871,36268,59,Layer 3,The routine that draws the status bar onto the screen. It uses DMA to write the Layer 3 tiles to VRAM.
872,36341,5,Layer 3,The tiles that make up Luigi's name in the status bar.
873,36346,4,Sprite tilemap related,"Tilemap of reserve item. First byte is mushroom, second is flower, third is star, fourth is feather."
874,36350,4,Sprite tilemap related,YXPPCCCT of stars in the item box. It cycles between the four entries every second frame.
875,36354,4,Sprite tilemap related,"YXPPCCCT data for reserve item. First byte is mushroom, second is flower, third is bypassed ($008DFF), fourth is feather."
876,36358,20,Layer 3,"Bonus star counter tilemap - 2 bytes for each number. Every first byte is for the upper tile, every second byte for the bottom tile."
877,36378,480,Layer 3,"The routine that updates the values of all the addresses used for the status bar ($0EF9-$0F2F).

$008E28 - Change this address to AD to disable the timer.

$008E2E - Timer speed (USE WITH $008D8B)

$008E5C - Time is Running Out SFX. Change from FF to 00 to stop the music from speeding up when time reaches 99.

$008E6B - [22 06 F6 00] Change to [EA EA EA EA] to not kill Mario when the timer reaches zero. The timer will count down normally and stop at zero, but Mario will not die

$008EDB - Change this and/or $008F09 from 20 12 90 to EA EA EA to disable writing the score to the status bar when playing as Mario and/or Luigi, respectively. Useful if you want to place another counter in place of the score using Smallhacker's Status Bar Editor. Note: This alone will NOT stop writing blank tiles if the first N tiles/bytes at $0F29-$0F2E contains the value #$00 (the ""0"" graphic). To prevent that, consider using this patch.

$008EE3 - Change to BRA [80] to write zeroes instead of blank tiles to Mario's score counter. Use with $008F11.

$008F11 - Change to BRA [80] to write zeroes instead of blank tiles to Luigi's score counter. Use with $008EE3.

$008F2C - How many coins you need to get an 1up (USE WITH $008F37)

$008F2F - [EE E4 18] Change to [EA EA EA] to not gain a life after collecting enough for one.

$008F37 - Number of coins to subtract from the counter when you gain enough for a 1up (Default: $64 (100). Change to [01] to create a coin wallet effect - use with $008F2F.

$008F41 - (Use with $008F45) Maximum life limit, minus one. Warning: Changing this to anything higher than 0x7E (127 lives) will remove the life limit entirely! Also, if you have more than

99 lives, the life counter will appear slightly glitched.

$008F45 - (Use with $008F41) Maximum life limit, minus one. Note that if you have more than 99 lives, the life counter will appear slightly glitched.

$008F62 - Number of bonus stars required to enter bonus game

$008F67 - [8D 25 14] Change to EA EA EA to disable entering bonus game when player has 100 bonus stars.

$008F6F - Amount of bonus stars that will be subtracted when 100 bonus stars are collected. Change to [01] to make 99 the maximum amount of bonus stars you can get - to create a bonus star wallet effect, use with $008F67.

$008F7E - Writes coins to status bar. Changing to [EA EA EA EA EA EA] will disable the coins from being written to the status bar.

$008F95 - [09] The X position of the small bonus star counter in the status bar.

$008FC5 - [20 79 90] Change to EA EA EA to disable the item GFX in the status bar

$008FCE - Length of ""LUIGI"" text (Status bar)

$008FE7 - [FC](blank tile) Tile used on the status bar when there's no Yoshi coin in that spot.

$008FED - [2E](coin tile) Tile used on the status bar when there is a Yoshi coin in that spot. Change to [FC](blank tile) to visually disable collected Yoshi Coins."
878,36637,30,Misc.,"Routine that handles actually increasing the player's coin count and giving a life from 100 coins, controlled by RAM address $7E13CC."
879,36828,1,Layer 3,"[05] If the player has collected at least this number of Dragon Coins, the status bar will display $008FE0 Dragon Coins instead (none by default)."
880,36832,1,Layer 3,"[00] Number of Dragon Coins to display in the status bar, if the player has collected at least 5."
881,36848,2,Layer 3,Location of the first Dragon Coin tile in the status bar.Diagram
882,36858,24,Misc.,"Powers of 10 table for 6-digit* HexToDec routine at $009012 used to display the player's score. Note: These are 16-bit words, but are handled as 32-bit subtraction for the low and high words individually.


*SMW displays the score as 7 digits, but the score is actually a 6-digit (decimal) number stored internally, the 7th digit ""0"" is a static tile not part of this number.16-bit values"
883,36882,51,Sprite subroutine (JSR),"6-digit* HexToDec subroutine to write a player's score into status bar.


Call with Y = #$00, X as the position to write to on the status bar (standard is #$14), and $00-$03 as the score to write (in hexadecimal). Note that this routine does not remove leading 0s; that is handled at $008EDE and $008F0C.


Works like this: count how many subtractions by 10n (with n=5) without the difference going into the negatives; that number of subtractions is the digit for the 10ns place. Then repeat but with 10n-1. This is the ""left-to-right"" version of base conversion using repeated subtraction to emulate the 32-bit division by 10n.


*SMW displays the score as 7 digits, but the score is actually a 6-digit (decimal) number stored internally, the 7th digit ""0"" is a static tile not part of this number."
884,36933,12,Subroutine (JSR),"The hexadecimal to decimal subroutine (in short HexToDec) which converts a hexadecimal 8-bit value into a decimal string. To use for JSL, use JSL $00974C instead.


Input:

-A: 8-bit value to convert

Output:

-A: 1s digit (calculated via repeated subtraction until < 10; “modulo” by 10)

-X: 10s digit (calculated via how many subtraction until A < 10; “quotient” division by 10)"
885,36945,40,Subroutine (JSR),"Bonus stars (small 8x8 digits) HexToDec routine. Unknown why Nintendo didn't decide to use $009045 instead, since the bonus stars are 8-bit and other digits are also 8-bit and they use $009045.


Note: this routine alone produces mere 1s and 10s place, so the numbers will be 8x8 instead of 8x16. The code at $008FAF will convert the digits to tile numbers of 8x16 digit graphics."
886,36947,3,Layer 3,Change to EAEAEA to get rid of the small bonus stars. Use in conjunction with address $00:9068
887,36968,3,Layer 3,Change to EAEAEA to get rid of the small bonus stars. Use in conjunction with address $00:9053
888,36985,88,Layer 3,"Subroutine that draws the power up item to the item box on the status bar during levels.

$0090AE is the X position of the Item Box item.

$0090B3 is the Y position of the Item Box item.

Note: Those two positions are only graphical. It won't change where the item drops from when select is pressed."
889,37073,104,Sprite tilemap related,"Tile numbers for 'MARIO START' and various similar messages.

$0090EE is for the top half of Time Up.

$009122 is for the bottom half of Time Up."
890,37177,98,Sprite tilemap related,"YXPPCCCT properties for 'MARIO START' and various similar messages.

Change $00913F from 30 to 34 and $009170 from F0 to F4 to fix the S in ""Mario/Luigi Start"".

$009156 is for the top half of 'TIME UP""."
891,37292,1,Misc.,Number of coins needed to get an 1up from the green star block.
892,37339,1,ASM,"Change it to D0 to switch the ""Mario/Luigi Start"""
893,37550,2,Misc.,"The scanline × 2 of the solid lava colour in the Iggy/Larry boss battle.


Change it to $A8,$01 (dw $01A8) to have it begin just where the sprite lava tiles end."
894,37673,84,Pointer,16-bit game mode pointers. Indexed by $7E:0100.
895,37769,4,Coordinate,"X position of the ""Nintendo Presents"" tiles"
896,37773,4,Sprite tilemap related,"""Nintendo Presents"" logo tilemap"
897,37797,1,Coordinate,"Y position of ""Nintendo Presents"" logo"
898,37808,1,Sprite tilemap related,"YXPPCCCT properties for ""Nintendo Presents""."
899,37825,1,Sound effect,"""Nintendo Presents"" logo sound effect"
900,37830,1,Timer,"How long ""Nintendo Presents"" stays on the screen before disappearing."
901,37835,1,Misc.,"Blinking Nintendo Presents (0F = 0 time, 1F = 1 time, 2F = 2 times, etc)

Also known as Nintendo Presents Brightness (Values use Brightness Register ($0DAE))"
902,37942,3,Misc.,Change from [AD 33 14] to [4C 17 94] to disable the circle fade in from Title screen. Use in conjunction with address $009AAD.
903,37947,1,Misc.,"How fast the circle right before the titlescreen opens. Default value is 04. The higher the value, the faster it opens. Don't go beyond #$19."
904,37969,7,Palette,Back area colours to use for each castle destruction scene (One byte per movie)
905,37977,7,Palette,Palette row (in the range 00-07) used by the castle in each castle destruction scene. 1 byte per scene.
906,37985,7,Stripe Image,Stripe image (index to pointers at $0084D0) to load as the background for each castle destruction scene.
907,38049,1,Music,"Music Bank that is used for the ending music.

0E = Overworld Music

48 = Level Music

59 = Ending Music"
908,38067,1,Music,Boss castle destruction sequence music #1
909,38155,1,Debug,DEBUG: Boss defeated scene select (30 = enable)
910,38239,1,Misc.,GFX File loaded for Credits font
911,38278,4,Level number,"Which level to use for the Yoshi's House part in the credits. 'A9 28 A0 01'. Do not change A9 and A0. 28 is the low byte of the level (Note: Level number + 24), 01 is the high byte."
912,38542,32,ASM,"This is the beginning of the code that is executed for game mode 10 (the black period between fadeout from the OW and Mario Start).

$0096A5 is which Layer 1 tile on the overworld will prevent the ""Mario Start!"" from appearing if the player is on it. (Default is $56, the Yoshi's House tile.)

Change $0096A6 to EA EA to make MARIO START! appear on the Yoshi's house OW tile number, or to 80 03 to make the MARIO START! never appear."
913,38574,158,ASM,"This is the code that is executed by game mode 03 (Load title). Game mode 11 (Mario Start) also uses parts of this code. The shared parts starts at $0096D5.


- $0096C4: music bank used for the Title Screen. 0E = Overworld Music, 48 = Level Music, 59 = Ending Music.

- $0096C7: title screen (level C7) music.

- $0096CC: title screen level number + $24.

- $009724: intro screen (level C5) music.

- $009725: changing it to [9C FB 1D] will allow you to change the music for the intro via Lunar Magic.

- $009737: Bowser scene 1 music."
914,38732,4,Subroutine (JSL),"Calls the hexadecimal to decimal subroutine (in short HexToDec) to convert a hexadecimal value into a decimal string at $009045 and ends in an RTL.


Input:

-A (8-bit value).


Output:

-A: 1s digit (repeated subtraction remainder (“modulo”) once A < 10)

-X: 10s digit (the “quotient” of A divided by 10)"
915,38927,2,Coordinate,"16-bit X position of Mario when he starts at the Iggy / Larry room. First byte = X lo, second byte = X hi (this byte is not recommended to change)."
916,39446,1,Coordinate,Y lo position of Mario at the start of the Morton/Ludwig/Roy battle.
917,39455,47,Subroutine (JSR),"Writes the Map16 data for Ludwig/Morton/Roy's boss battle room.

$009A40 is what tile the lava tiles in the Morton/Ludwig/Roy battles act like (by default: 05). Only Map16 page 00 is usable."
918,39597,3,Misc.,Change from [A9 33 85] to [4C C0 9A] to disable the circle fade in from Title screen. Use in conjunction with address $009436.
919,39602,1,Misc.,Change to [03] to make all layers appear at the same time during titlescreen load.
920,39627,76,Subroutine (JSR),"The cursor routine used in file selection, player selection, and erase file.

$009AD3 - If you change this to EA EA EA, the cursor arrow will never be shown in front of the game-start menus. (It will still act as though it were there, though.)

$009AE4 - SFX that comes up when you select a game at the title screen.

$009AFA - SFX played when you change an option at the title screen and overworld menus."
921,39709,2,Palette,BG Palette for the File Erase screen. Original value is $39C9.
922,39868,1,Sound effect,SFX for saving the game.
923,39881,74,Subroutine (JSL),Save Game function. (Load Game starts around $009CEF. Last byte used in SRAM seems to be $70:0358.)Documentation
924,39967,69,Controller,"Mario's movement data on Title Screen.

Format: xx yy xx yy xx yy [...] $FF

The XXs is the value to store to $15, except that the Select flag (#$20) is instead used to tell if the XY flag (#$40) should be masked away from $16 (if it's set, that bit is stored to $16 unchanged; if clear, that bit is masked away. All other bits are stored to $16.)

The YYs is how long to keep that value there. Setting an XX to $FF ends it."
925,40042,1,ASM,Change to 80 to open save game menu without pressing a button or Title Screen Playing.
926,40066,3,ASM,Change to [EA A9 00] to remove title screen movement. Title screen will not loop.
927,40071,1,ASM,Change D0 (BNE) to 80 (BRA) to never make the titlescreen loop.
928,40095,4,ASM,Change from 22 00 80 7F to EA EA EA EA to disable sprites from disappearing on the title screen when pressing a button (opening file select menu)
929,40105,1,Misc.,"Display following layers: ---o4321. o = sprite layer, 4 = layer 4 (unused), 3 = layer 3 (no effect however), 2 = layer 2, 1 = layer 1. Clear the corresponding bits for these layers to not make them display on file select screen load."
930,40109,3,ASM,"Change '9C 9F 0D' to 'EA EA EA', and, if you happened to have a HDMA effect in the titlescreen, it will not be disabled when you go to the File Menu."
931,40113,1,Level number,"Determines the low byte of the intro level number. Subtract 0x24 for the actual low byte (by default, E9-24=C5, meaning level C5, or possibly 1C5 with Lunar Magic's Display Level Message 1 fix). Change to [00] to skip the intro level and warp to the overworld immediately."
932,40139,3,Misc.,"SRAM starting addresses for each of the three save files, high byte."
933,40142,3,Misc.,"SRAM starting addresses for each of the three save files, low byte."
934,40148,2,Palette,BG Palette for File and Player Select screens. Original value is $7393.
935,40151,4,Sprite tilemap related,Y displacement for tiles in the first shared GFX routine ($019CF3).
936,40155,24,Sprite tilemap related,Properties for tiles in the first shared GFX routine ($019CF3).  It's indexed by the value of $05 times 4.
937,40240,8,Subroutine (JSR),"Subroutine used for changing the background color on the titlescreen, when entering/exiting the file erase menu. To use, load the color (16-bit) to A and a CGADDSUB value (for half-color math) to Y first.


Changing the first three bytes from [8D 01 07] to [EA EA EA] will disable the titlescreen back area color from changing."
938,40301,1,Misc.,How many exits you need to get the *96 icon.
939,40305,1,Misc.,First tile of the *96 icon.
940,40307,1,Misc.,Second tile of the *96 icon.
941,40331,1,Palette,"Palette for ""number of levels beaten"" in the Title Screen's Game Selection Menu (stored in YXPCCCTT format, but kind of screwy; value 30 seems to work well, though)"
942,40373,69,Subroutine (JSR),"The subroutine that checks if a saved game file is blank or not. When this subroutine returns, if Z = 0, the file is a new one."
943,40485,1,Misc.,"Amount of lives to start with, minus 1."
944,40501,2,ASM,"Set powerups at game start. ($19 = #$00, small Mario.)"
945,40556,1,Misc.,Number of options in the file select menu. $04 by default.
946,40558,1,Misc.,Number of options in the 1/2 player select menu. $02 by default.
947,40641,1,Layer 3,Tile number of the arrow cursor in the title screen menus.
948,40642,1,Palette,YXPCCCTT properties of the arrow cursor in the title screen menus.
949,40746,1,Misc.,Speed of Fade-ins and Fade-outs.
950,40751,1,Overworld border,"Change from 01 to 0F to stop fadeout on entering level, new area, and back to submap. (Use with $00:9F59)"
951,40759,81,Subroutine (JSR),"Fading/mosaic routine.

Change $009F59 from D0 to 90 to eliminate all fadeouts. (use in conjunction with $009F2F). Mod note: I've heard that this one is buggy. Use on your own risk.

$009F67 controls which layers are affected by the mosaic effect.

Format: xxxx4321.

The numbers present the layer numbers to add mosaic on. So 1 = Layer 1, 2 = Layer 2, etc."
952,40840,48,Layer 3,"Layer 3 settings. The table is indexed by 3t + i, where t is the tileset number and i is the Layer 3 image setting (00 = variable tide, 01 = low tide, 02 = tileset-specific image). It is used by the routine at $009FB8. The actual format seems to be:

01 = variable-height tide

02 = fixed-height tide

80 = Layer 3 smashers/cage

81 = slow-auto-scrolling background (except in tilesets 1 and 3, where it will be a background that scrolls at half the rate Layer 1 does)

C0 = same as 80, except without the smasher palette"
953,40888,141,Subroutine (JSR),"The main Layer 3 handling routine in levels.


- $009FDA: Starting Y position of the rising/lowering tide.

- $009FDF: Y position of the fixed-height tide.

- $009FF3: One of two tilesets for which the tileset-specific Layer 3 background will not auto-scroll. The other is at $009FF7.

- $009FF7: One of two tilesets for which the tileset-specific Layer 3 background will not auto-scroll. The other is at $009FF3.

- $00A00A: Pointer to the layer 3 crusher palette."
954,41029,38,Layer 3,"The routine that sets the interaction of the Layer 3 tide tiles.


Both $00A04E and $00A04F are the low byte of the Map16 tile that the tides act like; nothing is stored to the high byte, so this is always on page 0."
955,41067,14,Coordinate,"16-bit X-coordinates for each of the seven submaps. The main map has values of 0, and is overridden elsewhere."
956,41081,14,Coordinate,"16-bit Y-coordinates for each of the seven submaps. The main map has values of 0, and is overridden elsewhere."
957,41116,1,Timer,"Timer to disable skipping the intro message (level C5).

The timer decreases every 4 frame."
958,41164,3,Misc.,Saves Mario/Luigi's powerups based on which one you are using for the level
959,41209,1,ASM,"Part of the routine that runs after dying with zero lives. 


If # of levels beat is zero, then it will take you back to the intro screen, if levels beat is positive, it will take you back to the last place you saved on the OW and bring up the Continue/End dialog.


Change this byte to BRA ($80) to cause it to not send you to the intro screen and bring up the Continue/End dialog if you haven't saved for the first time. (In other words, it will take you back to Yoshi's House on an unedited overworld.)"
960,41288,1,Overworld,GFX file for animated tiles (waterfalls etc) on the overworld.
961,41306,4,Overworld border,"Call to the routine to draw the number of lives on the overworld border.


Change to [80 02] (BRA $02) to disable the amount of lives from being shown in the overworld border. Use with $04A530."
962,41443,1,ASM,Change to 0xEA to keep the game running when a message box is on the screen.
963,41502,1,Controller,Button to press for Pause. (Checks $16)
964,41503,1,ASM,Change from F0 (BEQ) to 80 (BRA) to disable pausing
965,41517,1,Timer,Timer (in frames) that runs to prevent the pause flag from being flipped instantly. Change [3C] to another value to change the time it takes for Mario to pause/unpause.
966,41534,1,Music,Change to 12 and music will continue to play when you pause the game. Changing [11] to another value will alter the sound effect that occurs when pausing the game.
967,41544,1,Debug,DEBUG: Advance frame / Slow motion (00 = enable)
968,41558,1,Debug,DEBUG: Slow motion speed
969,41563,47,Controller,"Code to handle leaving the level with Start+Select.


Change $00:A268 to 00 to always allow leaving the level.

Change $00:A273 to 00 to beat the level by doing that, not just leave it. Holding A or B will give the secret exit."
970,41728,144,Subroutine (JSR),"The routine that handles the graphics that get DMA'd to the first five 16x16 tiles in SP1. It also write the necessary colors to the player's palette (colors 6-F).

$00A30A - Mario/Luigi Palette - Starting Index (Changing this will cause Mario/Luigi to flash when the screen fades out after beating a boss)

$00A320 - Mario/Luigi Palette - Amount of colours * 2"
971,41872,1,ASM,"[C2] Change to 60 to disable all animations in levels. This includes colour 64.

Note: LM will still show the animations."
972,41947,2,Overworld border,[00 08] For which VRAM address animation data will be broken up into two lines of two tiles instead of a single line of four tiles.
973,41984,2,Overworld border,[00 09] VRAM address of the second line of two animated tiles (value should be $00A3DB + 0x100).
974,42010,1,Palette,"[A9] Changing this to 60 will disable the flashing yellow color in levels, but not on the overworld."
975,42011,1,Palette,Palette number to use for the flashing palette. Default value is $64
976,42025,12,Palette,"Changing [B9 0C B6 8D 22 21 B9 0D B6 8D 22 21] to [80 0A EA EA EA EA EA EA EA EA EA EA] will disable the flash animation of colour #64. Make sure that the ""View Animation"" function in Lunar Magic is disabled.

WARNING: Will disable the animated colours on the OW too!"
977,42041,1,Misc.,"Change [F0] (BEQ) to [80] (BRA) to prevent various tiles in SP1 to be overwritten (which meant using ExGFX for them would have no effect). This does not affect tiles 00-09, 10-19 and 7F of SP1."
978,42260,1,Palette,The first animated colour on the overworld.  (Default: 6D.)
979,42269,1,Palette,The second animated colour on the overworld.  (Default: 7D.)
980,42839,1,Misc.,How far to offset the players position to the right when exiting a vertical pipe. Values above 0F aren't recommended.
981,42847,1,Misc.,How many frames to move Mario when exiting upward from a vertical pipe.
982,42851,1,Misc.,How many frames to move Mario when exiting downward from a vertical pipe while small.
983,42857,1,Misc.,How many frames to move Mario when exiting downward from a vertical pipe while with a powerup.
984,43054,1,Misc.,"GFX File loaded for ""MARIO START!"", ""GAME OVER"", etc."
985,43203,104,Sprite Misc.,"26x4 byte table, Sprite GFX list.

Normal levels can use 00-0F, but the following values have also been observed:

10: [00 00 00 08] Unused?

11: [10 0F 1C 1D] Overworld

12: [00 01 24 22] Morton, Roy, Ludwig

13: [00 01 25 22] Iggy, Larry, Reznor

14: [00 22 13 2D] Castle destruction sequence

15: [00 01 0F 22] Walking home during the credits

16: [00 26 2E 22] Yoshi's House during the credits

17: [21 0B 25 0A] Boss list from the credits

18: [00 0D 24 22] Bowser

19: [2C 30 2D 0E] THE END screen"
986,43307,60,Level data,"26x4 byte table, FG/BG GFX list.

Normal levels can use 00-0E, but cutscenes set this to higher values."
987,43375,28,Level data,Submap Foreground Graphics
988,43411,63,Layer 3,Layer 3 GFX28 to 2B upload routine. Pages are uploaded in 64 tile chunks in four passes.
989,43469,1,Misc.,GFX file to use for Nintendo Presents logo
990,43632,1,Misc.,GFX file to load special world graphics into
991,43638,1,ASM,Change from 10 to 80 to disable the Koopas from using different graphics after the special world is passed
992,43641,1,Sprite tilemap related,GFX File loaded for enemies after Special World is passed
993,43843,1,Mode 7 tilemap,GFX File loaded for Mode 7 objects
994,44038,2,Palette,Layer 3 Palettes Pointer
995,44043,2,Palette,Layer 3 Palettes Starting Index
996,44048,2,Palette,Layer 3 Palettes X-Span -1
997,44053,2,Palette,Layer 3 Palettes Y-Span -1
998,44061,2,Palette,Foreground/Sprite Palettes Pointer
999,44066,2,Palette,Foreground/Sprite Palettes Starting Index
1000,44071,2,Palette,Foreground/Sprite Palettes X-Span -1
1001,44076,2,Palette,Foreground/Sprite Palettes Y-Span -1
1002,44092,2,Palette,Back Area Colours Pointer
1003,44098,2,Palette,Tileset Specific FG Palettes Pointer
1004,44121,2,Palette,Tileset Specific FG Palettes Starting Index
1005,44126,2,Palette,Tileset Specific FG Palettes X-Span -1
1006,44131,2,Palette,Tileset Specific FG Palettes Y-Span -1
1007,44139,2,Palette,Tileset Specific Sprite Palettes Pointer
1008,44162,2,Palette,Tileset Specific Sprite Palettes Starting Index
1009,44167,2,Palette,Tileset Specific Sprite Palettes X-Span -1
1010,44172,2,Palette,Tileset Specific Sprite Palettes Y-Span -1
1011,44180,2,Palette,Layer 2 Background Palettes Pointer
1012,44203,2,Palette,Layer 2 Background Palettes Starting Index
1013,44208,2,Palette,Layer 2 Background Palettes X-Span -1
1014,44213,2,Palette,Layer 2 Background Palettes Y-Span -1
1015,44221,2,Palette,Layer 1 Berry Palettes Pointer
1016,44226,2,Palette,Layer 1 Berry Palettes Starting Index
1017,44231,2,Palette,Layer 1 Berry Palettes X-Span -1
1018,44236,2,Palette,Layer 1 Berry Palettes Y-Span -1
1019,44244,2,Palette,Berry Sprite Palettes Pointer
1020,44249,2,Palette,Berry Sprite Palettes Starting Index
1021,44254,2,Palette,Berry Sprite Palettes X-Span -1
1022,44259,2,Palette,Berry Sprite Palettes Y-Span -1
1023,44318,7,Palette,Palette IDs to use for each submap
1024,44328,2,Palette,Overworld Map Layer 2 Palettes Pointer
1025,44336,2,Palette,Overworld Map Layer 2 Palettes Pointer (Special World Passed)
1026,44365,2,Palette,Overworld Map Layer 2 Palettes Starting Index
1027,44370,2,Palette,Overworld Map Layer 2 Palettes X-Span -1
1028,44375,2,Palette,Overworld Map Layer 2 Palettes Y-Span -1
1029,44383,2,Palette,Overworld Map Layer 1 Palettes Pointer
1030,44388,2,Palette,Overworld Map Layer 1 Palettes Starting Index
1031,44393,2,Palette,Overworld Map Layer 1 Palettes X-Span -1
1032,44398,2,Palette,Overworld Map Layer 1 Palettes Y-Span -1
1033,44406,2,Palette,Overworld Map Sprite Palettes Pointer
1034,44411,2,Palette,Overworld Map Sprite Palettes Starting Index
1035,44416,2,Palette,Overworld Map Sprite Palettes X-Span -1
1036,44421,2,Palette,Overworld Map Sprite Palettes Y-Span -1
1037,44429,2,Palette,Overworld Map Layer 3 Palettes Pointer
1038,44434,2,Palette,Overworld Map Layer 3 Palettes Starting Index
1039,44439,2,Palette,Overworld Map Layer 3 Palettes X-Span -1
1040,44444,2,Palette,Overworld Map Layer 3 Palettes Y-Span -1
1041,44457,2,Palette,Title Screen Layer 3 Palettes (Row 1) Pointer
1042,44462,2,Palette,Title Screen Layer 3 Palettes (Row 1) Starting Index
1043,44467,2,Palette,Title Screen Layer 3 Palettes (Row 1) X-Span -1
1044,44472,2,Palette,Title Screen Layer 3 Palettes (Row 1) Y-Span -1
1045,44480,2,Palette,Title Screen Layer 3 Palettes (Row 2) Pointer
1046,44485,2,Palette,Title Screen Layer 3 Palettes (Row 2) Starting Index
1047,44490,2,Palette,Title Screen Layer 3 Palettes (Row 2) X-Span -1
1048,44495,2,Palette,Title Screen Layer 3 Palettes (Row 2) Y-Span -1
1049,44566,1,Misc.,"[02] Sprite Palette setting for Morton, Ludwig, Roy, Reznor, and Bowser battles"
1050,44571,1,Misc.,"[07] FG Palette setting for Morton, Ludwig, Roy, Reznor, and Bowser battles"
1051,44853,4,ASM,Change to 4C 91 B0 EA to completely disable the fade-out only when beating a level. (USE WITH $00:B091).
1052,44857,1,ASM,Change to 80 to completely disable the fade-out when beating a level. Warning: Boss fights including Reznor will glitch out and not send you back to the overworld when doing this.
1053,44986,3,Misc.,"Change from B9 F7 AE [LDA $AEF7,y] to A9 00 00 [LDA #$0000] to disable fading completely, even in boss levels. WARNING: When end level scorecard pops up in boss levels, mode 7 stuff will disappear due to the mode being changed to 1 so layer 3 stuff shows up."
1054,45201,15,Empty,"Unused data.

Change to AD C6 13 F0 FA A5 13 29 03 4C 39 AF to completely disable the fade-out only when beating a level. Does not apply to bosses (USE WITH $00:AF35)."
1055,45216,16,Palette,Shared background area colour. Back area colour 0 - 7
1056,45232,24,Palette,BG Palette 0
1057,45256,24,Palette,BG Palette 1
1058,45280,24,Palette,BG Palette 2
1059,45304,24,Palette,BG Palette 3
1060,45328,24,Palette,BG Palette 4
1061,45352,24,Palette,BG Palette 5
1062,45376,24,Palette,BG Palette 6
1063,45400,24,Palette,BG Palette 7
1064,45424,16,Palette,Palette 0 colours 8-F in levels.
1065,45440,16,Palette,Palette 1 colours 8-F in levels.
1066,45456,12,Palette,"Palette 2 colours 2-7, FG Palette 0, in levels."
1067,45468,12,Palette,"Palette 3 colours 2-7, FG Palette 0, in levels."
1068,45480,12,Palette,"Palette 2 colours 2-7, FG Palette 1, in levels."
1069,45492,12,Palette,"Palette 3 colours 2-7, FG Palette 1, in levels."
1070,45504,12,Palette,"Palette 2 colours 2-7, FG Palette 2, in levels."
1071,45516,12,Palette,"Palette 3 colours 2-7, FG Palette 2, in levels."
1072,45528,12,Palette,"Palette 2 colours 2-7, FG Palette 3, in levels."
1073,45540,12,Palette,"Palette 3 colours 2-7, FG Palette 3, in levels."
1074,45552,12,Palette,"Palette 2 colours 2-7, FG Palette 4, in levels."
1075,45564,12,Palette,"Palette 3 colours 2-7, FG Palette 4, in levels."
1076,45576,12,Palette,"Palette 2 colours 2-7, FG Palette 5, in levels."
1077,45588,12,Palette,"Palette 3 colours 2-7, FG Palette 5, in levels."
1078,45600,12,Palette,"Palette 2 colours 2-7, FG Palette 6, in levels."
1079,45612,12,Palette,"Palette 3 colours 2-7, FG Palette 6, in levels."
1080,45624,12,Palette,"Palette 2 colours 2-7, FG Palette 7, in levels."
1081,45636,12,Palette,"Palette 3 colours 2-7, FG Palette 7, in levels."
1082,45648,12,Palette,Palette 4 colours 2-7 in levels.
1083,45660,12,Palette,Palette 5 colours 2-7 in levels.
1084,45672,12,Palette,"Palette 6 colours 2-7 in levels. Colour 4 will be overwritten in levels, but not in boss rooms."
1085,45684,12,Palette,Palette 7 colours 2-7 in levels.
1086,45696,12,Palette,"Palette 8 colours 2-5 in levels, the last four bytes (colours 6-7) are only available during the Nintendo Presents logo; after that, they are overwritten by the first two colours from Mario's palette."
1087,45708,12,Palette,Palette 9 colours 2-7 in levels.
1088,45720,12,Palette,"Ludwig palette, and palette A colours 2-7 in levels."
1089,45732,12,Palette,"Roy palette, and palette B colours 2-7 in levels."
1090,45744,12,Palette,Palette C colours 2-7 in levels.
1091,45756,12,Palette,"Morton palette, and palette D colours 2-7 in levels"
1092,45768,20,Palette,Mario Palette
1093,45788,20,Palette,"Luigi palette. Colours 6-F of palette 8 while small, big, or caped Luigi."
1094,45808,20,Palette,Fire Mario's palette
1095,45828,20,Palette,Fire Luigi palette. Colours 6-F of palette 8 while fire Luigi.
1096,45848,24,Palette,"Sprite palette 0, loaded to palettes E and F."
1097,45872,24,Palette,"Sprite palette 1, loaded to palettes E and F."
1098,45896,24,Palette,"Sprite Palette 2, loaded to palettes E and F."
1099,45920,24,Palette,"Sprite palette 3, loaded to palettes E and F."
1100,45944,24,Palette,"Sprite palette 4, loaded to palettes E and F."
1101,45968,24,Palette,"Sprite palette 5, loaded to palettes E and F."
1102,45992,24,Palette,"Sprite palette 6, loaded to palettes E and F."
1103,46016,24,Palette,"Sprite palette 7, loaded to palettes E and F."
1104,46040,14,Palette,"YI Overworld Palette 4, Colours 1-7"
1105,46054,14,Palette,"YI Overworld Palette 5, Colours 1-7"
1106,46068,14,Palette,"YI Overworld Palette 6, Colours 1-7"
1107,46082,14,Palette,"YI Overworld Palette 7, Colours 1-7"
1108,46096,14,Palette,"Main Overworld Palette 4, Colours 1-7"
1109,46110,14,Palette,"Main Overworld Palette 5, Colours 1-7"
1110,46124,14,Palette,"Main Overworld Palette 6, Colours 1-7"
1111,46138,14,Palette,"Main Overworld Palette 7, Colours 1-7"
1112,46152,14,Palette,"Star World Overworld Palette 4, Colours 1-7"
1113,46166,14,Palette,"Star World Overworld Palette 5, Colours 1-7"
1114,46180,14,Palette,"Star World Overworld Palette 6, Colours 1-7"
1115,46194,14,Palette,"Star World Overworld Palette 7, Colours 1-7"
1116,46208,14,Palette,"Vanilla Dome/Bowser's Valley Overworld Palette 4, Colours 1-7"
1117,46222,14,Palette,"Vanilla Dome/Bowser's Valley Overworld Palette 5, Colours 1-7"
1118,46236,14,Palette,"Vanilla Dome/Bowser's Valley Overworld Palette 6, Colours 1-7"
1119,46250,14,Palette,"Vanilla Dome/Bowser's Valley Overworld Palette 7, Colours 1-7"
1120,46264,14,Palette,"Forest of Illusion Overworld Palette 4, Colours 1-7"
1121,46278,14,Palette,"Forest of Illusion Overworld Palette 5, Colours 1-7"
1122,46292,14,Palette,"Forest of Illusion Overworld Palette 6, Colours 1-7"
1123,46306,14,Palette,"Forest of Illusion Overworld Palette 7, Colours 1-7"
1124,46320,14,Palette,"Special World Overworld Palette 4, Colours 1-7"
1125,46334,14,Palette,"Special World Overworld Palette 5, Colours 1-7"
1126,46348,14,Palette,"Special World Overworld Palette 6, Colours 1-7"
1127,46362,14,Palette,"Special World Overworld Palette 7, Colours 1-7"
1128,46418,14,Palette,Palette 5 colours 9-F.
1129,46432,14,Palette,Palette 6 colours 9-F.
1130,46446,14,Palette,Palette 7 colours 9-F.
1131,46558,16,Palette,Contains the colors for the flashing lightning in Valley of Bowser.
1132,46604,16,Palette,"Colours used in animation of Yoshi coin and yellow map spot. ($02DF,$035F,$27FF,$5FFF,$73FF,$5FFF,$27FF,$035F)"
1133,46620,16,Palette,Colours used in animation of red map spot
1134,46686,14,Palette,Iggy/Larry Platform Palette
1135,46708,14,Palette,"Palettes 2 and 9, colours 9-F."
1136,46722,14,Palette,"Palettes 3 and A, colours 9-F."
1137,46736,14,Palette,"Palettes 4 and B, colours 9-F."
1138,46750,112,Palette,"Bowser palettes (8 palettes, 7 colours each)"
1139,46862,36,Palette,"""The End"" palettes (3 palettes, 6 colours each; order is Luigi, Mario, Princess)"
1140,47506,50,Graphics,"Pointers to GFX00 through GFX31, low byte"
1141,47556,50,Graphics,"Pointers to GFX00 through GFX31, high byte"
1142,47606,50,Graphics,"Pointers to GFX00 through GFX31, bank byte"
1143,47693,19,Empty,Unused data.
1144,47712,32,Pointer,"The low byte of a series of Map16 data pointers in horizontal levels.  The high bytes are at $00BA9C, and the bank byte is either $7E or $7F.  These are indexed by screen number; each byte in this table and the other corresponds to the start of a particular screen's Map16 data (or chunk of 0x1B0 bytes). These are used in various routines that read or write Map16 data to find where a particular tile is."
1145,47744,28,Pointer,"The low byte of a series of Map16 data pointers in vertical levels.  The high bytes are at $00BABC, and the bank byte is either $7E or $7F.  These are indexed by screen number; each byte in this table and the other corresponds to the start of a particular screen's Map16 data (or chunk of 0x200 bytes, which means that all of these will be 00 in a clean ROM anyway). These are used in various routines that read or write Map16 data to find where a particular tile is."
1146,47772,32,Pointer,"The high byte of a series of Map16 data pointers in horizontal levels.  The low bytes are at $00BA60, and the bank byte is either $7E or $7F.  These are indexed by screen number; each byte in this table and the other corresponds to the start of a particular screen's Map16 data (or chunk of 0x1B0 bytes). These are used in various routines that read or write Map16 data to find where a particular tile is."
1147,47804,28,Pointer,"The high byte of a series of Map16 data pointers in vertical levels.  The high bytes are at $00BA80, and the bank byte is either $7E or $7F.  These are indexed by screen number; each byte in this table and the other corresponds to the start of a particular screen's Map16 data (or chunk of 0x200 bytes, which means that these are all simply multiples of 2 plus #$C8). These are used in various routines that read or write Map16 data to find where a particular tile is."
1148,48816,268,Subroutine (JSL),"SMW's Map16-tile-generating routine. It uses values of $9C to determine which tile to generate, but these values are hardcoded. (See RAM address $9C.) This is the main part; $00BFBC runs the codes for each tile."
1149,49084,67,Subroutine (JSR),"A subroutine used with $00BEB0; it runs different codes depending on the value of $9C.  The pointers for the different values begin at $00BFC9. They go from 01 to 1B, although the actual codes are kind of weird...the pointers vary depending on which Map16 page the tile is on, whether or not item memory should be affected, and if there are special cases (such as the Yoshi coin, which generates two tiles simultaneously)."
1150,49165,86,Subroutine (JSR),The subroutine that sets item memory bits.  It is called during the subroutine at $00BEB0 for values of $9C that utilize item memory.
1151,49259,9,Misc.,"Tiles to generate on Map16 page 0, used for values 01-09 of $9C. Note that the first byte is unused."
1152,49268,54,Subroutine (JSR),"SMW's subroutine for generating tiles on Map16 page 0.  $00C077 is an alternate entry point to this routine; if it is used instead, then the tile generation will not affect item memory."
1153,49330,15,Misc.,"Tiles to generate on Map16 page 1, used for values 0A-17 of $9C."
1154,49345,58,ASM,"A portion of code used in SMW for generating tiles on Map16 page 1.  $00C0C4 is an alternate entry point to this routine; if it is used instead, then the tile generation will not affect item memory."
1155,49403,177,ASM,"The portion of code in SMW's Map16-tile-generating routine that changes the actual graphics of the tile.  Both $00C074 and $00C0C1 use it (the former jumps to it, and it immediately follows the latter)."
1156,49822,72,Misc.,BG Tiles/Palette for Flipped Gate (1)
1157,49894,72,Misc.,BG Tiles/Palette for Flipped Gate (2)
1158,50351,1,Misc.,"If you change this byte from [02] to [01], the keyhole will activate the normal exit."
1159,50470,1,Music,Music played when you have completed the Bonus Game.
1160,50520,1,Sound effect,POW Finishing Sound Effect.
1161,50544,1,Misc.,[F0] Change to [80] to make the item not drop when the player presses Select.
1162,50550,1,Debug,DEBUG: Powerup select (F0 = enable)
1163,50585,28,Pointer,Pointer to Mario's animation routines. ($7E0071)
1164,50638,3,ASM,"[9C 9F 0D] This address disables HDMA effects when player animation #$0B (Freeze) is triggered.


To fix this, change to [EA EA EA] (NOP #3)."
1165,50664,248,Misc.,"Movement data for all of the castle destruction scenes.


Each data entry consists of two values, the first being the command and the second being the number of frames to keep that command active.

If bit 4 of the command byte is set, question marks will be drawn above Mario (as in Roy/Ludwig's scenes).

If bit 5 is clear, the rest of the byte is read as input data for $15/$16.

If bit 5 is set, then the first four bits are used to run additional commands. x0-x6 will run a variety of small routines, while x7-xF will change Mario's pose.

If #$2D, the P-balloon sound will also be played (for Lemmy's).

Lastly, #$FF marks the end of that scene's data."
1166,50912,7,Misc.,Base indices to the data at $00C5E8 for each of the castle destruction scenes.
1167,51272,40,Controller,"Table that holds controller input data for the No Yoshi cutscenes, used by the routine at $00C870.


The table is divided in two parts: the first (15 bytes) is used when the player doesn't have a Yoshi, the second (25 bytes) is used when there's Yoshi.


The table is formatted as a sequence of two bytes chunks: the first is used as the input data, which first is ANDed with #$DF and then copied to $15 (so the third highest bit is ignored). When the value equals #$20, #$80 is stored to $18, to force an A press and dismount Yoshi. Instead, when the value has the second highest bit set (#$40), the entrance door starts animating.

The second byte is the number of frames that the current input will be used, before passing on to the next.
$88 is used as an index for the current entry being used, while $89 is used for the timer.


Both parts of the table end with a $FF byte which makes the cutscene end when reached."
1168,51312,165,Subroutine (JSR),"Routine that handles No Yoshi cutscenes, run whenever $71 is #$0A.


The routine first sets up sprite data depending on the current cutscene type (ghost house, rope or castle).

Then, it checks if A or B are pressed: in this case, the cutscene ends immediately. Otherwise, the player's controls are disabled, and the player's movement is handled by using the table at $00C848 (follow the link for more details on this). The entrance door animation is handled once a certain value in the table (#$40) is reached. During the entire process the code at $00CD82 is jumped to to handle some of Mario's physics (jump, cape spinning, throwing fireballs, cape flying) and animations.


Once the value #$FF is read from the table (or the player presses A/B), the cutscene ends and the gamemode is changed to #$0F (fade to level)."
1169,51500,2,Misc.,[F0 3D] Change to [EA EA] to prevent Mario walking after touching goal spheres or the goal tape.
1170,51623,7,Level number,"The level numbers that triggers the seven castle destruction sequences. The first byte is for scene 1, the second is for scene 2, and so on."
1171,51630,1,Level number,One of the two level numbers that triggers the credits scene. The other is at $00CA13.
1172,51645,1,Music,Goal point fade-out music
1173,51710,3,ASM,"[8D D5 0D] The code itself stores either 01 or 02 to $0DD5. Change to [EA EA EA] to make it possible to set the normal/secret exit info through $0DD5 via LevelASM, sprites, etc. (Note: To activate any exit at all, $0DD5 has to be explicitly set to 01 or 02.  Leaving it as 00 will cause no exit to be activated at all, and values 03-FF should not be used.)"
1174,51724,1,Level number,Translevel number of the level where defeating a boss will activate the secret exit.
1175,51730,2,Misc.,"[C9 31] Changing this to [80 11] will prevent any ""boss defeated"" scenes from ever being played.

$00CA13 is one of the two level numbers that triggers the credits scene. The other is at $00C9AE."
1176,51756,1,Misc.,Set to 00 to disable midway points (they'll still make you big though)
1177,51761,13,Subroutine (JSR),"Set the ""peace"" pose for the player depending on whether he's on Yoshi or not."
1178,51980,1,ASM,"Change from '8D' to '0C' to not make HDMA gradients act strangely at the end of the level (goal tape). Of course, you should still avoid using HDMA channel 7 if this is all you change."
1179,51986,258,Misc.,"Opening window data.

$00CBA3 - Change 4B to 49 to fix a misplaced tile on the keyhole ""iris in"" effect."
1180,52356,1,Debug,DEBUG: Free-roaming mode (F0 = enable)
1181,52357,1,Debug,Change this to 00 and you'll activate free roaming mode (just like $00CC84)
1182,52558,4,ASM,[AD 8F 14 0D] Change to [EA EA EA AD] to enable climbing while holding an item
1183,52575,1,Mario physics,"Change from [15] to [16] so you don't automatically grab whatever you are climbing (vine, net, etc.) again if you happen to still be holding up/down. Instead after you jump it will let go and let you jump until you press up/down again."
1184,52649,4,Misc.,Mario riding on Yoshi animations
1185,52677,1,Misc.,Animation frame for Mario crouching on Yoshi
1186,52726,131,Subroutine (JSR),"L & R scrolling routine.

Change $00CDFC from D0 to 80 to disable L & R scrolling. Or change to [EA EA] to allow scrolling even if the player is holding multiple buttons (works best if $00CE12 is set to 01).

$00CE12 is the number of frames L or R must be held before screen scrolling occurs.

$00CE40 is the screen scroll sound effect."
1187,52889,8,Mario tilemap,"Spin Jump frame table 

(00 00 - Mario Standing - Small - Big)

(25 44 - Mario Back to Screen - Small - Big)

(00 00 - Same as first)

(0F 45 - Mario Facing Screen - Small - Big)


They are indexed by the frame counter."
1188,52897,8,Mario tilemap,Spinjump direction table.
1189,52905,8,Mario tilemap,"Cape spin cape image table. 


These are run while spin jumping with a cape or doing a spin attack. Only these four cape images ($02,$07,$06,$09) seem to work with cape contact, and will only work if RAM $14A6 is above zero."
1190,52926,1,Mario physics,"Amount of frames to show the cape at highest altitude frame. (After, for example, a spin-jump has been done.)"
1191,53058,1,Mario physics,Power-up that can attack with both cape spin and spin jump
1192,53109,1,Mario tilemap,[3F] Mario shooting fireball on ground pose.
1193,53115,1,Mario tilemap,[16] Mario shooting fireball in air pose.
1194,53136,1,Mario tilemap,[0F] Mario turning around while holding item pose.
1195,53194,1,Controller,Which button to press to look up. (Look at Ram Address $7E:0015 for values).
1196,53195,1,Mario physics,Change from [F0] to [80] to disable looking up.
1197,53198,1,Mario tilemap,"This is the player looking up pose, the default is #$03."
1198,53300,8,Mario physics,"Cape Collision X (Horizontal) Offsets: Two bytes for right and left, on ground and in air.


The first two sets are for when Mario is on the ground while spinning ($0C,$00- right; $F4,$FF left), and the second two are while he is in the air ($08,$00 - right; $F8,$FF - left)


The first byte in each set determines the position per pixel, the second sets whether it is in front or behind him ($FF is behind, $00 is in front) Use $FF-$80 for the behind byte($FF), and $00-$79 for the in front byte ($00)


This does not effect the image offsets."
1199,53308,8,Mario physics,"Cape Collision Y (Vertical) Offsets: 2 bytes for right and left, on ground and in air.


The first two sets are for when Mario is on the ground while spinning ($10,$00 - right; $10,$00 - left), and the second two are while he is in the air ($02,$00 - right; $02,$00 - left)


The first byte in each set determines the position per pixel, the second sets whether it is above him or below him ($FF is below his feet, $00 is from his feet up) Use $FF-$80 for the below byte ($FF), and $00-$79 for the above byte ($00)


This does not effect the image offsets."
1200,53316,30,Mario physics,Routine that does the actual calculation for cape-interaction. Uses the two tables at $00:D034 and $00:D03C.
1201,53346,31,Subroutine (JSR),"Cape Swing routine.

$00:D065 controls which power-up the player needs to have to be able to cape spin.

Change $00:D067 to 00 to make mario cape spin in all forms.

$00:D077 controls how long Cape Spin lasts.

$00:D07C controls the cape spin sound effect to generate."
1202,53377,45,Subroutine (JSR),"Fireball throwing routine.

$00D082 is the power-up that can throw fireballs.

Change $00D084 to 00 to let Mario throw fireballs in all forms.

Change $00D085 from A5 73 to A9 00 to enable throwing fireballs while ducking.

Change $00D087 from 0D 7A 18 to EA EA EA to enable throwing fireballs while on Yoshi.

Change $00D08A to 80 do disable throwing fireballs.

Change $00D093 from F0 to 80 to disable throwing fireballs while spin jumping."
1203,53433,1,Mario tilemap,Mario death pose (uses RAM $13E0)
1204,53461,3,ASM,Set 9C C1 0D to EA EA EA in order to not lose Yoshi on the OW when you fall down a pit when on top of Yoshi.
1205,53464,3,ASM,ASM that handles losing lives. Change to [EA EA EA] to not lose a life after dying. Change to [80 03 EA] to always go to the Game Over screen when dying.
1206,53470,1,Music,Game Over music
1207,53489,1,ASM,ASM that handles the 'TIME UP!' message. Change 'D0' to '80' to disable it.
1208,53496,10,Misc.,"Controls timer for TIME UP/GAME OVER message. Change $00D0F9 from C0 to 00 to remove the animation, and change $00D0FE from FF to whatever you want to shorten the timer (however, 00 is as long as FF; 01 is the shortest)."
1209,53530,1,ASM,Change [85] to [60] and Mario will not flip X-wise when he dies.
1210,53533,12,Mario tilemap,Mario Shrinking Animation poses (uses RAM $13E0).
1211,53569,1,Timer,How long flashing invincibility (when you get hit) lasts
1212,53590,5,ASM,"Change to EE E4 18 EA 64 to turn the Mushroom into a 1up, but it'll still play the animation"
1213,53645,6,Mario physics,"Speed at which Mario enters/exits a pipe.

The first two bytes are horizontal speed when entering/exiting a horizontal pipe.

The next two bytes are both horizontal speed in vertical pipes, and vertical speed in horizontal pipes.

The last two are the vertical speed in vertical pipes."
1214,53678,1,Misc.,Animation frame for Mario entering horizontal pipe on Yoshi
1215,53770,1,Mario tilemap,Mario's pose for entering a vertical pipe (Default is 0F - facing screen)
1216,53801,1,Misc.,Animation frame for Mario entering vertical pipe on Yoshi
1217,53809,5,Overworld border,Change (A9 02 8D F9 13) to EA EA EA EA EA to remove Mario's priority when he's going down a pipe.
1218,53845,1,Sound effect,Mario emerge from vertical pipe Sound Effect.
1219,53949,16,Mario physics,"Mario's jump height. The earlier ones are when Mario is moving slowly (or standing still); the latter is when he's moving faster. Even entries are normal jump, odd are spin.Formula"
1220,54085,104,Mario physics,"Accelerations for Mario in a non-slippery level, or in a slippery level while in midair.

The table is split into sets of four 16-bit values each, in the order of $13E1. The values in these sets are ordered as: walking (no X/Y) left, running (X/Y held) left, walking right, running right."
1221,54189,16,Mario physics,"Accelerations for Mario when flying.

Consists of 16-bit values in two sets (facing left/right) of two groups (moving left/right) with two values each (no X/Y and X/Y held)."
1222,54205,24,Mario physics,"Sliding accelerations on slopes in a non-slippery level.

Each value is 16-bit, in the same order as $13E1 (excluding flat ground)."
1223,54229,104,Mario physics,"Turning decelerations for Mario in a non-slippery level, or in a slippery level while in midair.

The table is split into sets of four 16-bit values each, in the order of $13E1. The values in these sets are ordered as: walking (no X/Y) left, running (X/Y held) left, walking right, running right."
1224,54333,104,Mario physics,"Accelerations for Mario in a slippery level.

The table is split into sets of four 16-bit values, in the order of $13E1. The values in these sets are ordered as: walking (no X/Y) left, running (X/Y held) left, walking right, running right."
1225,54453,24,Mario physics,"Sliding accelerations on slopes in a slippery level.

Each value is 16-bit, in the same order as $13E1 (excluding flat ground)."
1226,54477,104,Mario physics,"Turning decelerations for Mario in a slippery level.

The table is split into sets of four 16-bit values, in the order of $13E1. The values in these sets are ordered as: walking (no X/Y) left, running (X/Y held) left, walking right, running right."
1227,54581,104,Mario physics,"Mario's maximum X speeds on flat ground and on slopes.

The table consists of sets of 8 bytes, in the order of $13E1. Each of these sets then consists of four groups of two bytes each (for max left and max right), in the order: walking, running, running fast, sprinting.


The ""running fast"" values get used when running faster than #$23 (defined at $00D723) and either on the ground or shot out of a diagonal pipe."
1228,54685,16,Mario physics,"Mario's maximum X speeds while flying. The first 8 bytes are facing right, the second 8 are facing left.

Each of these sets are split into four groups of two bytes each (for maximum left and right speeds). Only the first two groups are actually used, for flying without X/Y and flying with X/Y respectively.

Also, in case it's not clear, the maximum speeds in the direction opposite of Mario's are from pressing that direction with B to slow down (e.g. <+B when facing right)."
1229,54701,16,Mario physics,"Mario's maximum X speeds in water.

The first set of 8 bytes is for when Mario isn't carrying an item, while the second set is with one. Each set consists of four groups of two bytes each (for max left and max right), in the order: on ground, swimming, on ground in a tide, swimming in a tide."
1230,54717,12,Mario physics,"Mario's maximum X speeds when sliding down slopes with the down button. In the order of $13E1, without flat ground or flying included."
1231,54729,34,Mario physics,"Mario's minimum X speeds on flat ground and on slopes.

The table is in the order of $13E1. Each entry gets two bytes; the second byte is the actual speed ($7B), while the first is the accumulating fraction bits ($7A).


The last 8 bytes of the table seem to be unused."
1232,54730,30,Mario physics,"How much Mario moves while on slopes, added to $7B. Values correspond to $7E:13E1 (slope type) divided by four. Every second byte is unused."
1233,54760,1,Mario physics,X speed of player as he's floating in water freely in a level where a Layer 3 tide is active. (Does not affect the speed given when the player manually moves around on his own horizontally.)
1234,54762,1,Mario physics,X speed of player as he's floating in water AND standing on a platform (like the floating grassy platforms) in a level where a Layer 3 tide is active. (Does not affect the speed given when the player manually moves around on his own horizontally.)
1235,54787,1,Controller,"Which button to press to duck. Format: byetUDLR; b = A or B; y = X or Y; e = select; t = Start; U = up; D = down; L = left, R = right."
1236,54788,1,ASM,"Change from F0 (BEQ) to 80 (BRA) to disable ducking.

Note that setting $01EB16 to [EA EA A5 73] (NOP #2 : LDA $73) is a good idea if you're using this."
1237,54812,2,ASM,Change from 30 12 to EA EA to disable jumping.
1238,54846,1,ASM,Change from 10 to 80 to disable Spin Jump.
1239,54852,1,Mario physics,"[19] Change to [00] to allow Mario to spin jump while carrying an item. Because Mario spins so fast, the animation will not be smooth."
1240,54853,1,ASM,"Change this from ""1A"" to ""60"" to disable spin jumping. Unlike 0583E (SNES $00:D63E) from ""10"" to ""80"", changing this address does not make the ""A"" button do the regular jump, but it disables spin jumping altogether. This way, you can use the ""A"" button for something else without it jumping automatically.


Note: Still allows you to spinjump out of the water and dismount Yoshi."
1241,54858,1,Misc.,"Spin Jump Sound, uses bank 1DFC."
1242,54878,10,ASM,"Mario jumping routine. (Sound effect + store to Mario Y speed.)

$00D65F is the Sound effect for Mario jumping. $00D661 is the bank for the sound effect. By default it uses $1DFA, but you can make it use $1DFC by changing $00D661 to FC or $1DF9 by changing it to F9."
1243,54895,1,Mario physics,"Change to 80 to disable Cape Flight and Jumping High while dashing. Interestingly enough, changing it to A9 will make Mario do a dash jump with every jump, even at a standstill, and will allow him to gain speed in the air. In addition, doing so will have the effect of causing every Jump performed by Cape Mario to become a Cape Flight."
1244,54900,1,Mario physics,"[D0] Change to 80 to prevent the player from flying with a cape.  The player will still be able to float, cape-spin, and jump higher when running but will never ""take off""."
1245,54903,1,Mario physics,Mario fly time
1246,55047,1,Mario tilemap,[0D] Mario's turning(skidding) pose
1247,55063,1,ASM,"Change [50] to [80] to disable running and cause Mario to never run. The Y (or X) button will not cause Mario to run. This does not affect other uses of the Y button, like shooting fireballs or carrying sprites."
1248,55064,1,Mario physics,"Change [1E] to [00] to cause Mario to always run, as if the Y button is always down. This does not affect other uses of the Y button, like shooting fireballs or carrying sprites. Also, Cape Mario will still need the Y button to fly."
1249,55084,1,Misc.,Number of frames Mario should continue to show his running frames for after jumping.
1250,55205,3,Mario physics,"Gravity. The first byte is when not holding B (or A), the second is gravity when holding B/A, and the third is when riding on a winged Yoshi."
1251,55215,1,Mario physics,Falling maximum speed (without button held)
1252,55216,1,Mario physics,Falling maximum speed with button held
1253,55225,1,Mario physics,"The speed at which Mario falls with a cape. Set it lower to make him float slower, higher to float faster, and over D0 to enable unlimited jumping in midair with the cape."
1254,55226,1,Mario physics,Flight acceleration (added to y speed)
1255,55240,7,Mario physics,"Maximum falling speed for cape mario, index by RAM address $1407 (cape phase)."
1256,55247,6,Mario physics,cape speed
1257,55301,1,Mario physics,Power-up that can fly
1258,55530,1,Misc.,power-up that can float (cape by default)
1259,55557,1,Mario physics,change to 16 = Raccoon Mario (floating if you tap Y instead of holding it)
1260,55561,1,Mario physics,Time until you stop floating after you have pressed B while while in the air with a cape.
1261,55666,1,Mario physics,Change to 00 to disable sprinting after running on the ground for a long period of time. Note that cape flight will also be disabled as a consequence.
1262,55704,1,ASM,"Change this from [F0] (BEQ) to [80] (BRA) so that when the player is carrying an item while swimming, his Y speed won't be affected (the player will sink normally). Also, if you change this to [D0] (BNE), the player will float if carrying nothing and sink if carrying an item."
1263,55760,1,Mario physics,"Maximum sinking speed of player when holding an item while swimming. When adjusting this value, it's recommended that it's equal to x5BD4. Format of RAM $7E007D."
1264,55764,1,Mario physics,"Maximum sinking speed of player when holding an item while swimming. When adjusting this value, it's recommended that it's equal to x5BD0. Format of RAM $7E007D."
1265,55768,1,Mario physics,"Maximum rising speed of player when holding an item while swimming. When adjusting this value, it's recommended that it's equal to $00D9DC. Format of RAM $7E007D."
1266,55772,1,Mario physics,"Maximum rising speed of player when holding an item while swimming. When adjusting this value, it's recommended that it's equal to x5BD8. Format of RAM $7E007D."
1267,55863,1,ASM,"Change to 80 to disable ducking underwater, can be used in conjunction with $00D604 hex edit."
1268,55893,84,Mario physics,"Mario's horizontal water interaction routine.

To disable layer 3 tides moving him, set $00:DA6F (0x05C6F) and $00:DA58 (0x05C58) to 80 (BRA)."
1269,55950,1,Mario tilemap,Shooting fireball while swimming pose. Default is #$18 (Swimming pose 3)
1270,55978,1,Sound effect,Sound effect that plays when you press the button to swim
1271,55991,1,Mario physics,Vine climbing speed 1 (right and down)
1272,55993,1,Mario physics,Vine climbing speed 2 (left and up)
1273,56218,1,ASM,[10] Change to 80 to disable jumping while climbing.
1274,56230,1,Sound effect,Sound effect to play when jumping while climbing. The bank it stores to is located at $00DBA8 [$1DFA by default] and can be changed to $1DF9 or $1DFC.
1275,56243,1,Sound effect,Sound effect played when Mario hits a net. (1DF9)
1276,56365,75,Mario physics,"Routine that updates the player's X and Y position ($94 and $13DA, $96 and $13DC) by X and Y speed ($7B and $7D).


The player's position is actually measured in units of “subpixels” -- 1/16th of a pixel for more precise movement, by using fixed-point arithmetic.


It is calculated like this: Take $7B/$7D, divide by 16 (LSR #4), and that is the amount of movement per frame, in pixels the player will be offset by.Math example"
1277,56440,4,Misc.,"Number of animation frames to use for walking/running Mario, indexed by Mario's status.


Ex: db $01,$02,$02,$02 The first byte it for small Mario, next is Super (Big) Mario, then Cape Mario, and finally Fire Mario. $01 means 2 frames for small Mario and $02 means 3 frames for the others. Longer animations are possible, but that'd require moving stuff around in $13E0, which hasn't been researched yet."
1278,56444,112,Mario tilemap,"Animation rates for both Mario's run animation and his cape animation (as it's flapping in the ""wind"" from running).

Indexed by the absolute value of Mario's X speed divided by 8, plus $13E5 (which holds a multiple of 8).


Index = |MarioXSpeed| / 8 + $13E5Byte structure"
1279,56654,228,Mario tilemap,"X positions of Mario's tiles in various poses, two bytes per tile."
1280,56798,2,Mario tilemap,X offset of cape when climbing.
1281,56882,228,Mario tilemap,"Y positions of Mario's tiles in various poses, two bytes per tile."
1282,57026,2,Mario tilemap,Y offset of cape when climbing.
1283,57110,4,Mario tilemap,"Tileset to use for Mario, paged by status ($7E0019)"
1284,57114,70,Pointer,Tile expansion pointer table (Small Mario)
1285,57184,122,Pointer,Tile expansion pointer table (Big Mario)
1286,57306,50,Mario tilemap,Tile expansion table (8x8 tiles in GFX00 used by Mario)
1287,57356,192,Mario tilemap,Mario upper tile.
1288,57548,192,Mario tilemap,Mario lower tile.
1289,57740,2,Palette,This is a two byte table used to index the player's palette based on the direction the player is facing.
1290,57914,44,Mario tilemap,Cape tile map
1291,57958,44,Mario tilemap,cape offsets
1292,58067,1,Debug,DEBUG: Infinite star (set to 00 to activate)
1293,58125,1,Misc.,"How many palettes to cycle through when Mario/Luigi is invincible, -1"
1294,58191,4,Misc.,Change to EA EA EA EA (NOP #4) and all forms of Big Mario will not go into the ground a few pixels.
1295,58205,3,ASM,"Change to $EA,$EA,$EA (NOP #3) to cancel out Mario moving up and down one pixel while walking and running. This is useful if you are using more than three animation frames for walking/running, and thus can be worked into your GFX/tilemap accordingly."
1296,58212,1,ASM,Change to $80 (BRA) to disable Mario from being offset vertically by one pixel while running on the wall (using the purple triangles). This should be combined with $00E34F and $00E35D for the complete effect.
1297,58282,1,Misc.,Which animation frame value to start pulling tilemaps from the size-independent table
1298,58366,1,Misc.,power-up that shows the cape graphics
1299,58553,33,Misc.,"Values stored to $13E1 for each slope tile.


Rather than being indexed by the tile's Map16 tile number, this table is instead indexed based on the actual slope tile used; for instance, gradual slopes have 8 tiles (4 left-facing and 4 right-facing) whereas normal slopes have 4 (2 left-facing and 2 right-facing). The slopes in the table by index are:

00 - Gradual

08 - Normal

0C - Steep

0E - Purple Triangle

10 - Very Steep Ledge-edge (from standard object 13)

12 - Upside-down Steep (unused)

14 - Upside-down Normal (unused)

18 - Conveyors

1C - Very Steep

20 - Flat ground"
1300,58586,33,Mario physics,Y speeds to give Mario when standing stationary or walking down on various slope tiles. These values are ordered the same way as $00E4B9.
1301,58619,33,Mario physics,"Y speeds to give Mario when moving up various slope tiles (i.e. towards its ""peak""). These values are ordered the same way as $00E4B9, though the ""flat ground"" value is unused."
1302,58652,33,Misc.,"Sizes of the ""top"" area on various slope tiles; if Mario is moving downwards while within this distance from the top of the ledge/slope, he will be pushed on top of it. These values are ordered the same way as $00E4B9."
1303,58685,33,Misc.,"Values stored to $13EE/$15B8 for each slope tile. These values are ordered the same way as $00E4B9, although the upside-down slope values actually do get used (perhaps unintentionally) for fireballs."
1304,58718,106,Misc.,"Indices to the tables at $00E4B9-$00E53D and $00E632, when in any tileset except 0 and 7 (used for upside-down slopes). This table is indexed by Map16 tile number, for the range 16E-1D7.


An index to this table is stored at $82."
1305,58824,106,Misc.,"Indices to the tables at $00E4B9-$00E53D and $00E632, when in tilesets 0 or 7 (used for diagonal pipes). This table is indexed by Map16 tile number, for the range 16E-1D7.


An index to this table is stored at $82."
1306,58930,512,Misc.,"Values stored to $1694 for slopes, to indicate how far the top of the slope is from the top of the actual tile at any given X position; essentially, these values define the actual shape of each slope.


The indices to this table are the same as $00E4B9 (excluding flat ground), except multiplied by #$10 and with the sprite's X position within the tile (from $9A) added to it."
1307,59912,3,ASM,"Change [20 29 F6] to [EA EA EA] (JSR $F629 to NOP NOP NOP) to prevent the player from getting killed when stuck in a block, such as a cement block. Instead, he will get thrown downwards."
1308,60034,1,Mario physics,[10] Change to 80 to disable spin jumping from water
1309,60046,1,Sound effect,Mario spin-jump from water sound effect.
1310,60060,1,Mario tilemap,Mario's pose as he comes out of the water.
1311,60064,1,Mario physics,How high Mario can jump out of the water.
1312,60097,26,Objects,Table of which slope tiles on Map16 page 1 are in water.
1313,60281,2,ASM,Change to A9 00 to make Super/Fire/Cape Mario have a 16x16 interaction field (like Small Mario) or change it to A9 01 to have a 16x32 interaction field (like big Mario) (in conjunction with addresses $01B4C0 and $03B67C)
1314,60413,4,Misc.,"Code that checks Mario's powerup state when entering doors.


Change to [80 02] to allow small doors can be entered even if Mario is big, and normal doors to be entered even if riding Yoshi."
1315,60427,1,Controller,"Change from 16 to 15 to allow Mario to enter doors by holding up, instead of just pressing it."
1316,60429,1,Controller,What button to press to activate a door. Format of $7E0015. (byetUDLR)
1317,60433,1,Sound effect,Entering Door Sound Effect.
1318,61033,2,ASM,"Change to EA EA (NOP #2) if you want Small Mario to be able to break turn blocks with a spin jump. Alternatively, change this address to 80 18 (BRA $18) if you want turn blocks to not be breakable by spin jumps."
1319,61049,1,Objects,Controls which (page 1) tile activates the brown creating/eating block sprite when stood on. Note that a few tiles are handled before this and can not trigger this effect.
1320,61106,1,Objects,"Change from 1E to 04 (BNE jumps to $00EEB7 instead of $00EED1) to make it possible to trigger already triggered switch palace switches, as opposed to them randomly becoming solid for no obvious reason.


Note that this only applies to switches inserted using Direct Map16; switches inserted as extended objects will still disappear."
1321,61174,1,Mario physics,Change this to [80] to disable sliding on slopes. The slide will instead be changed to ducking like on flat terrain
1322,61176,3,ASM,Change to [EA A9 00] to enable sliding while holding an item.
1323,61532,36,Misc.,"Table for several Map16 blocks that handles which bounce block sprite is shown when the block is hit. Please see this thread and this thread for additional information.

Block order is as follows:

00-1C: Tiles 111-12D

1D-20: Tiles 021-024

21: Broken turnblock

22: Green ! block

23: Yellow ! block"
1324,61568,36,Misc.,Table for several Map16 blocks that handles which powerup is spawned out of the block when it's hit (see here for more details). Block order is the same as $00F05C.
1325,61604,36,Misc.,"Table for several Map16 blocks that handles from which sides the block is activated, in ----btrl format.

- = unused, b = bottom, t = top, r = right, l = left

Block order is the same as $00F05C."
1326,61640,36,Objects,Table for several Map16 blocks that handles which tiles to generate (the value stored to $9C) when the block is hit. Block order is the same as $00F05C.
1327,61732,2,ASM,Change from D0 39 to EA EA to make Munchers (and other hurt blocks such as castle spikes) hurt Mario while riding Yoshi.
1328,61792,263,Subroutine (JSL),"Routine used to trigger SMW blocks, used for example by kicked sprites to make ON/OFF blocks, Note blocks, etc. activate when hitting them.


Inputs:

 - $98: 16-bit Y position of the block.

 - $9A: 16-bit X position of the block.

 - $1933: which layer the block is in.

 - Y: must be #$00.

 - A: map16 number low byte (high byte is always #$01, since all the blocks that can be triggered by this are in map16 page 1).Example code"
1329,61814,131,Objects,"Green Star Block code.

$00:F1E9 - FG/BG Tileset in which coin question blocks' behavior are changed for the 3-block 1up bonus game.

$00:F1EA - Change from F0 0D to EA EA to disable the 3-block 1up bonus game, allowing you to use coin question blocks in levels with the switch palace tileset (4), and freeing up the 5 bytes at RAM address $13F4 for custom use."
1330,61818,1,Objects,"How many colored Exclamation Blocks are allowed by default within all tilesets to enable spawning items, with the exception of Ghost House, Boss Battles, etc...


$02 (Green, Yellow) by default, Can be set to $00 to disable item spawning, and instead make them solid."
1331,61981,1,Sprite Misc.,"Sprite to generate out of the bonus block (the rows of ?-blocks) if all three of them were guessed right. Default: #$05 (1-Up). Other possible values include, but are not excluded to: #$00 = None; #$01 = Mushroom; #$02 = Fire Flower; #$03 = Star; #$04 = Feather."
1332,62007,1,Sound effect,Incorrect! Sound effect for the bonus 3 block minigame.
1333,62035,1,Misc.,What the remaining blocks become when hitting the incorrect block in a bonus area
1334,62139,3,ASM,Change [99 3C 1F] to [EA EA EA] to make the 1up checkpoint work again when reentering a level
1335,62157,33,Objects,"The code for the midway point tile (Map16 tile 38, not the extended object).


- $00F2CE: what tile gets generated after breaking the midway point tape (see $9C; default is 02 - none).

- $00F2D5: change to [80 01] to disable the glitter that appears after touching a midpoint.

- $00F2E2: change to [80] to disable midway powerups (or [80 01] to make them always make you big, even if you have a better powerup).

- $00F2E5: what powerup midway points give you.

- $00F2E9: what sound effect midway points play."
1336,62230,1,Misc.,"Change '0F' to the following, and the 3UP moon will add this to your life or score counter:


00 = Nothing at all

01 - 0C = Scores 10-8000.

0D = 1UP.

0E = 2UP.

0F = 3UP.

10 = 5UP (glitched).

11-FF = Best not to use."
1337,62245,3,ASM,Replace '99 EE 1F' with 'EA EA EA' to make moons reappear when you re-enter a level after collecting them.
1338,62258,69,ASM,"The code that handles a Yoshi coin being collected.


- $00F333: Map16 tile number of the top half of the coin.

- $00F33C: offset of the score sprite when the top half is collected, relative to the bottom half.

- $00F343: changing [EE 22 14] to [EA EA EA] will disable the Yoshi Coin counter in the status bar. Note that this will also stop them from respawning when you've got five of them.

- $00F34A: number of Yoshi coins that need to be collected to trigger the ""collected all"" flag.

- $00F354: changing [99 2F 1F] to [EA EA EA] will make the Yoshi coins reappear even after collecting all 5 (or more) of them.

- $00F359: Yoshi coin sound.

- $00F35E: amount of regular coins a Dragon Coin gives you.

- $00F364: value stored to $9C when the coin is collected."
1339,62327,59,Subroutine (JSL),"The subroutine that handles the score when you get a Yoshi coin.

Changing $00F37A [EE 20 14] to [EA EA EA] will stop the Yoshi Coin counter from increasing and giving you points and giving you a life after you collected enough for one."
1340,62346,40,Subroutine (JSL),"Subroutine to spawn a score sprite at Mario's position. Load the score sprite to spawn in A before calling; alternatively, jump a few bytes earlier to $00F388 to specifically spawn a 1up score sprite."
1341,62386,18,Subroutine (JSR),"This subroutine gets an index to the ""one bit per level"" tables ($1F2F, $1F3C, $1FEE) depending on the overworld level number ($13BF). When it returns, Y holds the byte index to $1F2F and A holds the bit to check/set."
1342,62435,1,Coordinate,"[0A] Signed offset of the enterable region of the left tile of an exit-enabled vertical pipe from the left edge of the tile, in pixels, minus 1


Change to #$FF to make up pipes enterable as no matter where you hit them. (For use with the hex edit at $00F3F9)"
1343,62436,1,Coordinate,"[FF] Signed offset of the enterable region of the right tile of a vertical exit-enabled pipe from the left edge of the tile, minus 1"
1344,62437,4,Controller,"Which button you have to be pushing in order to enter the 4 kinds of pipes. In order: End on right, end on left, end on bottom, end on top."
1345,62445,1,Misc.,[37] Offset of entering vertical pipes. Setting it to any other number than 36-38 will make the player incapable of entering.
1346,62457,1,Coordinate,"[05] Width of the enterable region of a vertical exit-enabled pipe tile (either one), in pixels


In vanilla SMW, this is half the width of the enterable region of the entire pipe, but this won't be true if the two exit-enabled pipe tiles are made to have overlapping enterable regions.


Change to #$10 to make up pipes enterable no matter where you hit them. (For use with the hex edit at $00F3E3)"
1347,62522,1,Sound effect,Going Down Pipe Sound
1348,62531,10,Subroutine (JSR),"Subroutine that checks if Mario is in the center of a door. Not used for boss doors.


$00F44B [08] is the width of the enterable region of the door (up to 0x10). $00F447 [04] is how far to offset the enterable region; this should be set to half of $00F44B."
1349,62541,24,Mario physics,"Routine that sets up Mario's object collision points for RAM addresses $98-$9B, inclusive."
1350,62789,80,Subroutine (JSL),"Routine that handles behaviours for various Map16 tiles. For P-Switch dependent tiles, this routine only sets the ""act as"", not the graphics.


$00F54C: Map16 tile number (low byte) that should act like a ? Coin Block when the blue P-Switch is active. Default is ($00)29, the Invisible POW ? Coin Block.

$00F555: Map16 tile number (low byte) that the Invisible POW ? Coin Block should act like when the blue P-Switch is active. Default is ($01)24, the ? Coin Block.


$00F55B: Map16 tile number (low byte) that should act like a Brown ""used"" Block when the blue P-Switch is active. Default is ($00)2B, the Coin.

$00F572: Map16 tile number (low byte) that Coins should act like when the blue P-Switch is active. Default is ($01)32, the Brown ""used"" Block.


$00F561 & $00F563: Range of Map16 tiles (page 0) that set the ""current Palace Switch being pressed"" value in $1423. $00F561 (#$EC) is subtracted from the Map16 tile number, then compared with $00F563 (#$10). If the result is less than #$10, the value gets incremented by 1 and stored to $1423. This makes it so that only tiles ($00)EC to ($00)FB, the Palace Switch tiles, set $1423.


$00F57B: Map16 tile number (low byte) that should act like a Coin when the blue P-Switch is active. Default is ($01)32, the Brown ""used"" Block.

$00F585: Map16 tile number (low byte) that should act like a Coin when the silver P-Switch is active. Default is ($01)2F, the Black Piranha Plant.

$00F58E: Map16 tile number (low byte) that the Brown ""used"" Block should act like when the blue P-Switch is active, and the Black Piranha Plant should act like when the silver P-Switch is active. Default is ($00)2B, the Coin."
1351,62872,2,Mario physics,"Highest Y position that the player is able to be at, 16 bit. Note that this is a negative value."
1352,62893,2,Misc.,"Change to 80 03 (BRA $03) to make it so falling into a pit results in death even in Yoshi wings levels, or to 80 00 (BRA $00) to make it so falling into a pit will always activate the normal exit."
1353,62903,79,Subroutine (JSL),"Hurt Subroutine (JSL to it to hurt the player).

$00:F5B9: Change to F0 to make mario invincible. (Will not make him invincible to crushing objects, lava or pitfalls).

$00:F5C1-$00:F5C3: Change from 0D 93 14 to EA EA EA to make Mario die normally when touching an enemy/muncher even after getting the goal tape/sphere.

$00:F5C6: Change from 9C E3 18 to EA EA EA to prevent coin game cloud counter from resetting on hit.

$00:F5D7: Change this to 80 to have Mario die when touched, regardless of powerup status.

$00:F5E3: This SFX plays when you get hit when flying.

$00:F5ED: Invincibility timer when hit while flying.

$00:F5F4: Mario shrinking SFX.

$00:F5F8-$00:F5FB: Set to EA EA EA EA to disable item box auto-falling when you get hurt.

$00:F5FC-$00:F5FF: Change the ""A9 01 85 71"" to ""EA EA EA EA"" to disable mario's shrinking animation when hit."
1354,62982,35,Subroutine (JSL),"Death Subroutine (JSL to it to kill Mario).

$00F607 controls the speed at which the player jumps up ($7E007D format).

$00F60B controls which music is played when Mario dies.

$00F619 can be changed from 0D 14 to 12 14 to make the screen not scroll when the player loses a life.

$00F61C controls the amount of time Mario stays on screen before dying.


*note that if Mario Falls into a hole, the rom will JSL to $00F60A to skip the death animation"
1355,63135,4,Misc.,"Where Mario has to be vertically on-screen for the game to consider the screen ""caught up"" with him in a particular direction, thereby stopping it from scrolling. The first two bytes are for scrolling upwards, while the second two are scrolling down."
1356,63143,6,Misc.,"How fast the camera ""catches up"" to Mario when scrolling vertically. The first two bytes are when scrolling upwards, while the second two are scrolling down.


The third entry is a bit strange, and for the most part unused. If the level is set to ""no vertical scroll unless flying/climbing/etc."", then it gets used as the upwards scroll speed of the screen when it's below the point where the screen ""locks"" vertical scrolling. Since this is normally at the bottom of a level where the screen can't scroll any further down, it can only really get used in vertical levels."
1357,63149,6,Misc.,"Vertical limits for scrolling the screen.


The first two bytes are the highest distance the screen can scroll upwards; essentially, it's the top of the level.

The second two are the highest distance the screen can scroll upwards... when the screen is stationary or moving downwards. Recommended to keep it identical to the first two bytes.

The third entry is where the screen's vertical scrolling locks in a level with the ""no vertical scroll unless flying/climbing/etc."" option. The screen can actually still scroll vertically if it goes below this point, but it can't scroll up past it unless one of the special conditions is met."
1358,63155,4,Misc.,"The maximum distances the screen will scroll normally (without L/R held), in 16-bit. The first two are scrolling left, the second two are scrolling right.


Setting these values higher than the ones in $00F6CD may cause the screen to act strangely."
1359,63169,4,Misc.,"How quickly the screen moves when scrolling with L/R. The first two bytes are scrolling right, while the second two are scrolling left.


It's worth noting that these are also used to check whether Mario is facing the direction the screen is scrolling, for deciding whether to have it ""catch up"" to him while he's walking around. It only matters whether the two values are negative or positive, though, so as long as you aren't changing the scroll direction, there shouldn't be any issues. If you want to fix that, you can do so by changing $00F8CB from 0xBF to 0xC5."
1360,63175,4,Misc.,"How quickly the screen scrolls horizontally when ""catching up"" to Mario while he's walking around normally. The first two bytes are right, while the second are left."
1361,63181,4,Misc.,"The maximum distances the screen can be scrolled with L and R, in 16-bit. The first is scrolling right, the second is scrolling left.


Setting these values lower than the ones in $00F6B3 may cause the screen to act strangely when screen scrolling."
1362,63205,2,Misc.,"Distance Mario must be offset to the left of the screen's ""hotspot"" defined by $7E142A for the screen to scroll leftwards."
1363,63212,2,Misc.,"Distance Mario must be offset to the right of the offset at $00F6E5 for the screen to scroll rightwards. Essentially, this defines the width of the area where the screen will never scroll horizontally."
1364,63246,2,Coordinate,"Lowest Y position the screen is allowed to scroll down to in horizontal levels. Change from C0 00 to CF 00 (do the same on $00F6B1 so the ""no vertical scroll unless flying/climbing/etc."" work consistently) to allow the bottom row of 16x16 blocks to be shown."
1365,63271,1,Misc.,"Change #$00 to #$02 (value to be stored in $7E:0055 and $7E:0056) and you'll get a SMB1-like effect regarding screen-scrolling: it's impossible to go to the left, even with L/R-scrolling."
1366,63389,13,ASM,"Code that handles the Layer 2 horizontal scroll settings (LM's ""Layer 2 (BG) Scrolling Rate"")."
1367,63402,24,ASM,"Code that handles the Layer 2 vertical scroll settings (LM's ""Layer 2 (BG) Scrolling Rate"")."
1368,63494,2,Coordinate,"How high Mario must be in order to make the screen scroll vertically, when the scrolling mode is 'Vertical scroll at will', when Mario lands on a platform. 16-bit value, little endian.

The lower the value, the higher Mario must be in order to make the screen scroll vertically."
1369,63608,1,Misc.,Change from D0 to 80 to activate free vertical scrolling. This will bypass the routine that checks whether Mario is standing on solid ground or not (RAM address $72) and sets the scrolling flag accordingly. The camera follows Mario instead of waiting for him to land on something.
1370,63900,2,Coordinate,"What 16-bit Y position on screen ($7E:0080) the player should have at the very minimum, before being killed in the Iggy/Larry battle room. Used to simulate lava tiles."
1371,63989,27,Empty,Unused data.
1372,64016,9,Subroutine (JSL),"Unreachable, but can be JSL'ed to clear out the sprite status table."
1373,64070,1,Misc.,Time to shake ground when you hit the big switch in the switch palace. Default is 20.
1374,64077,1,Sprite number,Sprite that's spawned when hitting a switch palace. Note that it always uses slot 02.
1375,64128,95,Subroutine (JSL),"The routine which triggers the goal tape.


$00FABF - [06] The state which sprites are put into when the goal tape is triggered. Can be set to any of the valid values for RAM address $14C8."
1376,64223,28,Misc.,"Table of the various sprites Mario receives for carrying different items past the goal tape.


The table itself is divided into four 7-byte sections: P-switches and springboards will use the second section, keys will use the third, baby Yoshi will use the fourth, and anything else will use the first.

Each section is then indexed by Mario's current state, in the order: small, big, cape, fire, with star power, on Yoshi, and unused. The star power index is essentially unused, however, because the counter always gets cleared before the table gets loaded from.


If the value returned is E0-EF, Mario will receive the sprite written at $00FB50 (1-up by default). If it's F0-FF, he'll receive the sprite at $00FB54 (...also a 1-up by default). In both cases, it'll also store the lower four bits to $1594, which for a 1up, will affect the number of lives it gives (0 = 1 life, 1 = 2 lives, 2 = 3 lives, 3 = 5 lives). It's 0 in every obtainable case, though, so the feature is effectively unused.


Additionally, $00FB40 is the sprite to spawn if Mario already has the sprite in his item box (again, 1-up by default).


Lastly, you can re-enable factoring star power into the table by changing $01C0FE to EA EA EA."
1377,64320,1,Sprite number,"Sprite that the Blue/Silver P-switch, Portable Spring Board, Throw Block Sprite and carryable stunned enemies will turn into when they reach the goal point."
1378,64336,1,Sprite number,Sprite that the Key will turn into when it reaches the goal point.
1379,64339,5,ASM,"Change to EA EA EA EA EA to prevent the 1UPs being spawned at the goal point. $00:FB54 controls the sprite number that Baby Yoshi (Green, Red, Yellow, Blue) will turn into when it reaches the goal point."
1380,64367,1,Sprite Misc.,The Y speed of the sprite when you carry an item over the goal.
1381,64372,1,Sprite Misc.,The X speed of the sprite when you carry an item over the goal.
1382,64382,1,Sound effect,Sound for items given at goal point
1383,64535,1,Misc.,"[02] Difference between point values of successive sprite coins spawned at the goal tape.  The default is 02, so the point sequence will go 100, 400, 1000, 4000, etc.; you can change it to 01 to make the point values go 100, 200, 400, 800, etc. or to 00 to make it always stay at 100 no matter how many sprites get turned into coins."
1384,64634,114,Subroutine (JSL),"Used in SMW to initialize Yoshi when entering a level, or sublevel. JSLing to this will cause a Yoshi to spawn and Mario will be riding him, however the Yoshi will not transfer to sublevel or to the overworld. You must set $13C7 if you plan to manually JSL to this routine.

Changing $00FCCE to 0x80 will keep Yoshi from turning blue after grabbing a pair of Yoshi wings."
1385,64758,1,Coordinate,X lo position of Iggy and Larry at the start of the boss battle.
1386,64762,1,Coordinate,X hi position of Iggy and Larry at the start of the boss battle.
1387,64767,1,Coordinate,Y lo position of Iggy and Larry at the start of the boss battle.
1388,64771,1,Coordinate,Y hi position of Iggy and Larry at the start of the boss battle.
1389,64807,1,Sprite number,"Object that Mario ""breathes"" while underwater (small bubble)"
1390,64858,67,Subroutine (JSR),"SMW's glitter trail subroutine, called when you collect a coin or Yoshi coin.

Change $00FD6B to EA EA EA EA EA (NOP #5) to disable showing a glitter effect when a coin is collected."
1391,65047,1,Sprite number,Object that Mario leaves when he jumps into water (small bubble)
1392,65098,73,Subroutine (JSR),Routine to show little puff of smoke when the player turns around.
1393,65172,1,Mario physics,Initial fireball X speed facing left
1394,65173,1,Mario physics,Initial fireball X speed facing right
1395,65174,1,Coordinate,X-position of Mario's fireball (left)
1396,65175,1,Coordinate,X-position of Mario's fireball (right)
1397,65176,1,Coordinate,X-position of Mario's fireball when on Yoshi (left). Only relevant if you enable the debug code at $00D087.
1398,65177,1,Coordinate,X-position of Mario's fireball when on Yoshi (right). Only relevant if you enable the debug code at $00D087.
1399,65178,1,Coordinate,X-position of Mario's fireball when on Yoshi and ducking (left). Only relevant if you enable the debug code at $00D087.
1400,65179,1,Coordinate,X-position of Mario's fireball when on Yoshi and ducking (right). Only relevant if you enable the debug code at $00D087.
1401,65180,1,Coordinate,"X-position of Mario's fireball (left), high byte."
1402,65181,1,Coordinate,"X-position of Mario's fireball (right), high byte."
1403,65182,1,Coordinate,"X-position of Mario's fireball when on Yoshi (left), high byte. Only relevant if you enable the debug code at $00D087."
1404,65183,1,Coordinate,"X-position of Mario's fireball when on Yoshi (right), high byte. Only relevant if you enable the debug code at $00D087."
1405,65184,1,Coordinate,"X-position of Mario's fireball when on Yoshi and ducking (left), high byte. Only relevant if you enable the debug code at $00D087."
1406,65185,1,Coordinate,"X-position of Mario's fireball when on Yoshi and ducking (right), high byte. Only relevant if you enable the debug code at $00D087."
1407,65186,1,Coordinate,Y-Position for Mario's Fireballs (Left)
1408,65187,1,Coordinate,Y-Position for Mario's Fireballs (Right)
1409,65188,1,Coordinate,Y-position of Mario's fireball when on Yoshi (left). Only relevant if you enable the debug code at $00D087
1410,65189,1,Coordinate,Y-position of Mario's fireball when on Yoshi (right). Only relevant if you enable the debug code at $00D087
1411,65190,1,Coordinate,Y-position of Mario's fireball when on Yoshi and ducking (left). Only relevant if you enable the debug code at $00D087.
1412,65191,1,Coordinate,Y-position of Mario's fireball when on Yoshi and ducking (right). Only relevant if you enable the debug code at $00D087.
1413,65206,1,Sound effect,Fireball sound effect
1414,65216,1,Sprite number,Object Fire Mario shoots (must change $00FEA9 to 07 for some values to work)
1415,65221,1,Mario physics,Initial fireball Y speed
1416,65427,45,Empty,"Empty (all FF) in a clean ROM.

Used by many patches (like fastrom), and the last byte becomes 42 when you lock the ROM."
1417,65472,21,Misc.,Internal rom name.
1418,65493,1,Misc.,"xxAAxxxB. If both A bits are set, FastROM. B is HiROM. x = unknown?"
1419,65495,1,Misc.,Size of ROM byte. Amount of kilobytes = 2^decimal value of $00FFD7.
1420,65496,1,Misc.,"SRAM size. Amount of kilobytes = 2^decimal value of $00FFD8. Default value is 01, which is 2kb. The limit is 07 which is 128kb."
1421,65497,1,ASM,Region Changer: Can change NTSC to PAL.
1422,98312,6,Sprite subroutine (JSR),"Subroutine that checks if a sprite is touching a wall. If the accumulator is set, it's touching a wall."
1423,98318,6,Sprite subroutine (JSR),"Subroutine that is accessed by sprites to check if a sprite is touching the ground. If the accumulator is set, it's touching the ground."
1424,98324,6,Sprite subroutine (JSR),"Routine that checks if a sprite is touching a ceiling. If the accumulator is set, it's touching a ceiling."
1425,98330,8,Sprite subroutine (JSL),The subroutine that updates a sprite's Y position without gravity.
1426,98338,8,Sprite subroutine (JSL),The subroutine that updates a sprite's X position without gravity.
1427,98346,8,Sprite subroutine (JSL),"Subroutine that updates a sprite's X/Y position, including gravity and block interaction."
1428,98354,8,Sprite subroutine (JSL),Sprite<->sprite interaction subroutine
1429,98362,8,Sprite subroutine (JSL),"A subroutine that makes sprites interact with each other and with the player, essentially combining $018032 and $01A7DC."
1430,98370,8,Sprite subroutine (JSL),SMW's first shared subroutine for drawing sprites. This one draws four 8x8 tiles in a 16x16 arrangement. Not very useful for custom sprites.
1431,98378,4,Subroutine (JSR),Routine that inverts the value in the accumulator.
1432,98382,62,Sprite subroutine (JSR),Routine to spawn dust sprite (smoke sprite number $03) at the sprite's position. Used for example by Sliding Koopas and Monty Moles.
1433,98444,63,Subroutine (JSL),Routine that runs all the normal and cluster sprites routines.
1434,98514,85,Subroutine (JSR),Routine that gets the current sprite's OAM index and decrements all the sprite timers.
1435,98615,26,Pointer,"Sprite status subroutine pointers.  These are called based on the value of $14C8,x; valid values are 00-0C."
1436,98641,6,Sprite Misc.,"This is sprite status #$00, which is is called when a sprite is either dead or nonexistent.  It also sets $161A,x to #$FF to prevent that sprite from being reloaded."
1437,98674,11,Subroutine (JSR),"This is sprite status #$01, which will call the current sprite's init routine."
1438,98685,402,Pointer,"Pointers to sprite initialization routines.  These are called based on the sprite number ($9E,x).  Valid values are 00-C8; sprites C9 and above are considered different types of sprites and handled by other routines."
1439,98851,2,Pointer,"Change from C2 85 to 35 84 to allow throw blocks to be placed directly in Lunar Magic, with infinite timer until they disappear."
1440,99111,1,Timer,"[3F] How many frames until a Timed Lift (sprite BA) will fall if it starts at an odd X position.  Default value is $3F, or about 1 second."
1441,99119,1,Timer,"[FF] How many frames until a Timed Lift (sprite BA) will fall if it starts at an even X position.  Default value is $FF, or about 4 seconds."
1442,99125,4,Palette,"Colours of Yoshi Eggs (Red, Blue, Yellow, Blue)"
1443,99136,1,Misc.,"How many types of Yoshi Eggs to allow, minus one"
1444,99148,2,Sprite physics,"Initial leftward and rightward X speeds of diagonally moving sprites, i.e. stream of boo buddies and reflecting fireball (F0)."
1445,99159,1,Misc.,"Initial Y speed of diagonally moving sprites, i.e. stream of boo buddies and reflecting fireball (F0)."
1446,99178,1,ASM,Change to EA to make both wooden spikes move up or down depending on X&1 instead of sprite AC always moving down first.
1447,99217,1,Sound effect,SFX played by the Banzai Bill
1448,99232,4,Sprite number,"Sprites inside exploding turn block (Fish, Goomba, Shelless Green Koopa, Green Koopa)"
1449,99291,1,Timer,Length of time before sprite #19's message box appears (don't set lower than 04)
1450,99413,1,Misc.,"How many types of P-Switches to allow, minus one"
1451,99430,2,Palette,"Colours of P-Switches (Blue, Silver)"
1452,99493,1,Sprite number,Sprite spawned by killing Lakitu with cape or fireball (Lakitu Cloud)
1453,99526,4,ASM,Change to EA EA EA EA to make lakitu cloud never get spawned
1454,99556,1,Sprite Misc.,"[10] Timer to send Bullet Bills behind objects, set on spawn."
1455,99660,1,Misc.,"How many segments Pokey has when Mario is riding Yoshi. The amount of segments depends on these bits:

---x xxxx. If any of the x bits are set, a segment will be added. If none is set, the sprite won't appear. If any of the - bits is set, the sprite won't appear."
1456,99667,1,Misc.,"How many segments Pokey has when Mario isn't riding Yoshi. The amount of segments depends on these bits:

---x xxxx. If any of the x bits are set, a segment will be added. If none is set, the sprite won't appear. If any of the - bits is set, the sprite won't appear."
1457,99706,8,Sprite subroutine (JSR),"Face Mario subroutine, usually used by sprites to initially face Mario's direction."
1458,99788,402,Pointer,"Pointers to sprite main routines. These are called based on the sprite number ($9E,x). Valid values are 00-C8; sprites C9 and above are considered different types of sprites and handled by other routines."
1459,100195,38,Sprite subroutine (JSR),"Goal point sphere/boss killed code.


- $018778: if you change this to [20 23 CD] and change $01CD23 to [9E C8 14 CE C6 13 60], it will prevent the player from walking after touching a goal sphere in a horizontal level.

- $018784: it controls which music is played when it's collected."
1460,100496,3,Subroutine (JSR),"Initialization routine for sprite 52 (moving ledge hole in ghost house) that simply decrements the low byte of its Y position.

Lunar Magic v2.53+ renders this routine unused by changing the initialization routine to $0185B7 instead. This is done in order to fix the glitch where placing the hole at the top of a subscreen causes its position to wrap around to the bottom of the subscreen."
1461,100504,84,Sprite subroutine (JSR),"Subroutine that makes Yellow Koopas jump over shells.

$0188E5 is the Y speed they get when jumping ($C0)."
1462,100588,4,Sprite Misc.,"Standard X speeds for sprites 00-13. The first two bytes are used when the ""move faster"" bit at $0188F0 is clear for the sprite, while the second two are used when it's set."
1463,100592,20,Sprite Misc.,"Various properties for sprites 00-13. Format: ak--jfls.

a = animate twice as fast in air

k = use 32x16 tilemap (also draws wings on sprites 08+)

-- = unknown/unused

j = jump over thrown shells

f = follow Mario

l = stay on ledges

s = move faster (use $0188EE for X speeds instead of $0188EC)"
1464,100845,1,Sprite tilemap related,Tilemap of blue shell less koopa sliding out of shell
1465,101101,1,Sprite Misc.,"Change from D0 to 80 to make bob-ombs not stun themselves then explode on their own, like SMB3 and other games."
1466,101109,1,Timer,How quickly Bob-omb explodes
1467,101325,1,Misc.,What animation frame most regular sprites use when turning around
1468,101389,1,Sprite number,Sprite number to start adding wings to 2-tile high sprites
1469,101425,1,Sprite number,Sprite that Spiny Egg turns into after touching the ground
1470,101591,1,Misc.,Time it takes for a Red Vertical Parakoopa to turn around after reaching it's maximum/mimimum Y speed. (08)
1471,101794,1,Sprite physics,Winged Goomba jump height (between 80-FF).
1472,101831,16,Sprite tilemap related,"Goomba Wing alignment, X position. First 8 bytes are for the alignment when the goomba's hopping left, the other 8 when he's hopping into the right direction."
1473,101855,2,Sprite tilemap related,Palette/GFX page/Priority/Flip of Goomba Wing Tiles
1474,101857,4,Sprite tilemap related,Sprite tilemap: Goomba Wings
1475,101861,4,Sprite tilemap related,Size of Goomba Wing tiles
1476,101998,4,Misc.,"Speed of piranha plant (in pipe, going up, staying up, going down)."
1477,102035,1,Sprite Misc.,"YXPPCCCT properties of the stem of sprite 2A, the upside-down piranha plant. Change to $0A to make it use the first graphics page."
1478,102094,1,Misc.,Replace D0 with 80 to make the classic and upsidedown piranha plants keep coming out of the pipe even if Mario is near or on top of the sprite.
1479,102285,1,Sprite number,Object Hopping Flame leaves behind
1480,102343,8,Sprite tilemap related,"Bullet Bill properties, YXPPCCCT.

- First byte: Right flying bullet bill

- Second byte: Left flying bullet bill

- Third byte: Vertically upwards flying bullet bill

- Fourth byte: Vertically downwards flying bullet bill

- Fifth byte: Diagonally flying bullet bill, lower left

- Sixth byte: Diagonally flying bullet bill, upper left

- Seventh byte: Diagonally flying bullet bill, upper right

- Eighth byte: Diagonally flying bullet bill, lower right"
1481,102351,8,Sprite tilemap related,"Which GFX frame to use (00 = regular bill, 01 = vertical bill, 02 = diagonal bill) for the Bullet Bills. Same order as x91C7."
1482,102359,8,Sprite physics,X speed of Bullet Bills. Same order as $018FC7.
1483,102367,8,Sprite physics,Y speed of Bullet Bills. Same order as $018FC7.
1484,102578,8,Sprite subroutine (JSL),"SMW's third shared subroutine for drawing sprites. This one draws a single 16x16 tile.

It can be used by custom sprites, although you'll have to set the correct tile number in OAM afterwards (see the example code).Example"
1485,102586,122,Sprite physics,"Positions of each of the 4 object collision points for each sprite hitbox, relative to the sprite's XY position ($E4/$14E0 and $D8/$14D4). Consists of two 61-byte tables for each of the X and Y positions:

$0190BA-$0190F6: X positions
$0190F7-$019133: Y positions
Each byte indexed by %00ccccpp:

cccc: Which hitbox to use; retrieved from the low nybble of $1656.
pp: Which of the 4 collision points to use:

00 = Right
01 = Left
10 = Bottom
11 = Top"
1486,102712,8,Sprite subroutine (JSL),"JSL for sprites interacting with objects. Actually calls routine at $019140.


During processing GPS blocks:

$0A-$0D: Position (in pixels) of the collision point currently being processed for sprite interaction with blocks in the level:

$0A-$0B (2 bytes): X position
$0C-$0D (2 bytes): Y position


Note, just like $98-9B, coordinates are respective to the top-left of the layer currently being processed. Hence, if Layer 1 and Layer 2 are offset from each other, this value will differ between the two, even when the sprite is at the same position with respect to the level.

$0F (1 byte): Index of one of the 4 collision points currently in use. Also used to eject sprite out of block horizontally:

#$00 = SpriteV: Right (touches blocks from left)
#$01 = SpriteV: Left (touches blocks from right)
#$02 = SpriteH: Down (touches blocks from above)
#$03 = SpriteH: Up (touches blocks from below)


Be careful when using custom blocks, $0F remains used before and after custom block processing at $019533. If $0F is modified and not restored, sprite interaction glitches can occur."
1487,102929,115,Subroutine (JSR),"Sprite buoyancy routine. Called from the object interaction routine and handles collision points.


Change $01927F from $13 to $14 to fix an exploit that freezing (setting $9D or pausing the game) can be used to manipulate wall-embedded sprites (with an Xspeed of $00) to move in a desired direction (left and right), see here at 1:40 for an example."
1488,103109,2,Misc.,"[$01 $FF] Speed (right, left) given by conveyors (tiles 10C/10D) to sprites standing on them."
1489,103407,22,Sprite subroutine (JSR),The code that makes sprites move if placed on conveyor belts.
1490,103845,1,Sprite physics,Change this value to $00 to fix a small glitch with carryable sprites where throwing the sprite upwards at a hittable block will occasionally cause it to hit the block without actually activating it (due to registering both the bottom of the block and the side of another block at the same time).
1491,103932,32,Empty,Unused data.
1492,103964,8,Sprite number,Sprites spawned by stomping Koopa Troopas (shelless Koopas)
1493,103978,49,ASM,Code that handles the Bob-omb flashing and exploding. Change $019630 from 1D to 1C to disable the flashing entirely.
1494,103986,1,Sound effect,Bob-omb's explosion SFX
1495,103996,1,Timer,Length of Bob-omb's explosion
1496,104020,1,Sprite Misc.,"Bob-omb Flashing Cycle


00-Palette 06

02-Palettes 04,06

04-Palettes 02,06

06-Palettes 00,04,06

08-Palettes 06,0E

0A-Palettes 04,06,0C,0E

0C-Palettes 02,06,0A,0E

0E-All Palettes"
1497,104072,1,Misc.,Which shell colour makes a shelless Koopa become invincible (00=Green; 01=Red; 02=Blue; 03=Yellow)
1498,104134,1,ASM,Change from 1A to 04 to prevent shelless Koopas from hopping out of stunned shells (Use with $01AA15)
1499,104296,1,Sprite number,"[07] Which of the four Koopas generates a coin when stomped. Valid values are 04 (green), 05 (red), 06 (blue), and 07 (yellow). All others will make the coin never appear.

Alternatively, you can change the next two bytes ([D0 0A]) to [EA EA] to make all (shelled) Koopas spawn coins."
1500,104316,1,Sprite number,Sprite that's spawned when a Yellow Koopa is stomped (Coin)
1501,104455,1,Misc.,Default animation frame to use for the shell
1502,104462,1,Misc.,Animation frame to use for the shell when Mario is turning around while holding it
1503,104511,1,Timer,Timing that enemies in a stunned state begin to shake
1504,104529,1,Sprite tilemap related,Change to #$80 to prevent koopas eyes blinking while inside the shell.
1505,104577,1,Sprite tilemap related,Koopa eye tiles when in shell (open)
1506,104585,1,Sprite tilemap related,Koopa eye tiles when in shell (closed)
1507,104615,2,Sprite physics,"[$E0 $20] X speed (left, right) to give Disco Shells when bumping into a wall."
1508,104647,1,Sprite physics,($20) Maximum right speed of Disco Shells.
1509,104657,1,Sprite physics,($E0) Maximum left speed of Disco Shells.
1510,104723,8,ASM,Start of sprite being kicked routine.
1511,104818,1,Sprite physics,"Y speed of kicked Koopa shells and throw blocks when they hit the ground.

Change from 10 to 0C to make shells always glide over one-tile-wide holes, or 14 to make them always fall in."
1512,104863,1,Sound effect,Hitting block with shell sound
1513,104994,4,Misc.,Animation frame assignments for the shell
1514,104998,4,Misc.,Flip of each animation frame
1515,105012,1,Misc.,"How many animation frames the spinning shell has, -1"
1516,105107,1,Sprite physics,Change to 02 to fix a small glitch where sprites can slide through solid blocks while sinking in lava if they're moving to the left.
1517,105122,66,Sprite subroutine (JSR),Routine for sprites in state 02 (killed and falling offscreen). It's also shared by the routine for sprites killed in lava.
1518,105227,1,Sprite tilemap related,Tile used by squished Dino Torch
1519,105347,6,Sprite tilemap related,Standard Sprite Tile Table: Koopa tilemap
1520,105353,3,Sprite tilemap related,Standard Sprite Tile Table: Koopa shell tilemap
1521,105356,7,Sprite tilemap related,Standard Sprite Tile Table: Shelless koopa tilemap (Fourth byte unused?)
1522,105363,7,Sprite tilemap related,Standard Sprite Tile Table: Blue shelless koopa tilemap (Fourth byte unused?)
1523,105370,14,Sprite tilemap related,Standard Sprite Tile Table: Para-goomba tilemap
1524,105384,4,Sprite tilemap related,Standard Sprite Tile Table: Goomba tilemap
1525,105388,14,Sprite tilemap related,Standard Sprite Tile Table: Para-bomb tilemap
1526,105402,3,Sprite tilemap related,Standard Sprite Tile Table: Bob-omb tilemap
1527,105405,12,Sprite tilemap related,Standard Sprite Tile Table: Piranha plant tilemap
1528,105417,1,Sprite tilemap related,Standard Sprite Tile Table: Football tilemap
1529,105418,4,Sprite tilemap related,"Standard Sprite Tile Table: Bullet Bill tilemap (Horizontal, Vertical, Diagonal, Diagonal)"
1530,105422,3,Sprite tilemap related,Standard Sprite Tile Table: Spiny tilemap
1531,105425,8,Sprite tilemap related,Standard Sprite Tile Table: Spiny egg tilemap
1532,105437,3,Sprite tilemap related,Standard Sprite Tile Table: Buzzy Beetle
1533,105443,3,Sprite tilemap related,Standard Sprite Tile Table: Buzzy Beetle Shell.
1534,105446,6,Sprite tilemap related,Spike Top tilemap
1535,105452,2,Sprite tilemap related,Hopping Flame tilemap
1536,105454,6,Sprite tilemap related,"Lakitu tilemap (3 frames, 2 bytes each)"
1537,105462,12,Sprite tilemap related,Magikoopa Tilemap
1538,105474,1,Sprite tilemap related,Throw block sprite tilemap and turn block sprite with hidden enemies inside. (Both use the same byte)
1539,105475,10,Sprite tilemap related,Climbing Koopa Tilemap
1540,105485,4,Sprite tilemap related,"Fish (Cheep Cheep) Tilemap (2 frames swimming, 2 frames flopping)"
1541,105491,4,Sprite tilemap related,Thwimp Tilemap
1542,105495,1,Sprite tilemap related,"Yoshi Egg Tilemap (only manifests if the Yoshi egg is in the stunned status ($14C8 = #$09), i.e. found in a block or laid by Yoshi; otherwise, the tile loaded from this address is overwritten before drawing).


Change alongside $01F760 - $01F763 and $01F794 to completely remap the Yoshi egg tiles."
1543,105501,12,Sprite tilemap related,Portable Springboard Tilemap
1544,105517,4,Sprite tilemap related,Bony Beetle tilemap
1545,105525,16,Sprite tilemap related,Vertical Fireball (Podoboo) tilemap.
1546,105562,2,Sprite tilemap related,Eerie tilemap
1547,105564,9,Sprite tilemap related,Boo Ghost Tilemap
1548,105573,4,Sprite tilemap related,Rip Van Fish Tilemap
1549,105577,2,Sprite tilemap related,Vertical Dolphin Tilemap
1550,105579,2,Sprite tilemap related,Diggin' Chuck's Rock Tilemap
1551,105581,3,Sprite tilemap related,Monty Mole Tilemap
1552,105584,1,Sprite tilemap related,Ledge-dwelling Mole's Dirt Tilemap (data shared with Goal Point Sphere's Tilemap)
1553,105585,8,Sprite tilemap related,"Ground-dwelling Monty Mole's Dirt (2 Air tiles, 2 Dirt Tiles, 2 Air tiles, 2 Dirt Tiles)"
1554,105593,4,Sprite tilemap related,Sumo Bros' Lightning Tilemap
1555,105597,2,Sprite tilemap related,Ninji Tilemap
1556,105599,84,Sprite tilemap related,Table containing a sprite's location in the Standard Sprite Tile Table.
1557,105683,4,Sprite tilemap related,X displacement for tiles in the first shared GFX routine ($019CF3).
1558,105715,108,Sprite subroutine (JSR),The first of the shared graphics subroutines.  This one creates 4 8x8 tiles in a 16x16 block.
1559,105823,177,Sprite subroutine (JSL),"The second of the shared graphics subroutines.  This one creates 2 16x16 tiles in a 16x32 block, with the second one tile below the base position.  It can also be called with a JSR to $019D67."
1560,105910,1,Sprite tilemap related,Palette/GFX page of standard sprites (shared)
1561,106012,4,Sprite tilemap related,Sprite tilemap: Paratroopa Wings
1562,106016,4,Sprite tilemap related,Palette/GFX page/Priority/Flip of Paratroopa Wing tiles
1563,106020,4,Sprite tilemap related,Size of Paratroopa Wing tiles
1564,106133,116,Sprite subroutine (JSR),"Subroutine that draws wings for 16x16 sprites.

It uses $1570,x to decide if to draw open or closed wings (increasing it once per frame will result in the normal wings animation speed).

If used in a custom sprite, the data bank needs to be set to $01 (see example code).Example"
1565,106253,78,Sprite subroutine (JSR),The third of the shared graphics subroutines.  This one creates a single 16x16 tile.
1566,106300,1,Sprite tilemap related,Palette/GFX page of standard sprites (shared)
1567,106331,6,Coordinate,"x-pos table of sprite being carried: 

walking, turn from left to right, turn from right to left (two bytes each, indexed by Mario's direction)"
1568,106347,4,Sprite physics,"X-speed of the touched/kicked shell.

Value 1: left-speed, when touched (not kicking)

Value 2: right-speed, when touched

Value 3: left-speed, when kicked

Value 4: right-speed, when kicked.

This will also affect the shell of buzzy beetle! Setting the speed to 00 or FF will make the shells not spinning, giving unlimited score.

Original Values:

D2 2E CC 34"
1569,106395,46,Subroutine (JSR),"First half of the routine that handles sprites being carried, though it's actually only the part that handles the P-balloon.

Any other sprite will branch to $019FE0

$019FA7 change to EA EA EA EA EA to the P-Balloon last forever.

$019FB0 is the time at which the deflatting animation starts. (default 30)

$019FC2 change 90 to 80 to make Mario keep the balloon effect even after taking hits or power-ups. (causes weird behaviour when dying)"
1570,106407,5,ASM,Change to [EA EA EA EA EA] to give the P-Balloon an infinite timer
1571,106663,1,Sprite physics,Number of frames to disable player contact with any carryable sprite after kicking it.
1572,106668,1,Timer,"Time to show Mario's ""kicking"" pose when a Bob-omb is kicked"
1573,106777,1,Coordinate,carried sprite Y-pos while picking up
1574,106977,4,ASM,Changing [1A 1A 29 0F] to [EA EA EA EA] will disable the throw block sprites flashing.
1575,106992,1,Sprite tilemap related,Tile used by stunned Bob-omb
1576,107002,1,Sprite tilemap related,Key tilemap
1577,107041,1,Sprite tilemap related,POW (P-Switch) Tilemap
1578,107114,1,Sprite physics,[$F0] Baby Yoshi's idle hopping speed. Change to $00 to make him not hop when on the ground.
1579,107153,1,Sound effect,Sound baby Yoshi makes when eating
1580,107157,2,Sprite Misc.,"Change to [$80,$1E] to make Baby Yoshi instantly grow when eating something, regardless if it's a powerup or not.

Change to [$80,$5D] to make Baby Yoshi never grow instantly when eating something, even if it's a powerup. It will count as one sprite eaten instead.

If changing this, you also need to apply the hex edit at $03C03C for it to work properly."
1581,107196,1,Sprite number,Sprite that Baby Yoshi turns into
1582,107206,1,Sound effect,Yoshi's egg explodes sound
1583,107259,1,Misc.,Number of enemies Baby Yoshi must eat to grow
1584,107264,2,Sprite Misc.,"Change to $80,$02 to disable getting a coin when Baby Yoshi eats something."
1585,107487,44,Sprite subroutine (JSR),Routine called by the shared sprite GFX routines at $019D5F and $0190B2 to hide tiles that would be drawn offscreen vertically. It works for both 1 and 2 tile high sprites by using the first two bits in $186C to determine which tile(s) should be hidden.
1586,108062,7,Sound effect,Sound effects to use for consecutive bounces on enemies. Begins with [13] (1st bounce) and ends with [19] (7th bounce).
1587,108123,1,Sound effect,Koopa hit by shell sound
1588,108310,1,ASM,Set to 60 to stop Blue Koopas from kicking shells
1589,108329,1,Sound effect,Kicking shell sound
1590,108343,1,Sprite Misc.,[0F] Change to [0D] to fix a bug where shell-less Koopas can hop inside a Bob-omb if its stun timer is 0 (by being carried through a pipe).
1591,108429,1,ASM,Set to 80 to stop Blue Koopas from stopping shells
1592,108497,1,Sprite number,Enemy spawned from stomping horizontal green winged koopas
1593,108498,1,Sprite number,Enemy spawned from stomping bouncing green winged koopas
1594,108499,1,Sprite number,Enemy spawned from stomping vertical red winged koopas
1595,108500,1,Sprite number,Enemy spawned from stomping horizontal red winged koopas
1596,108501,1,Sprite number,Enemy spawned from stomping yellow winged koopas
1597,108505,1,Sprite number,Enemy spawned from stomping winged goombas
1598,108506,1,Sprite number,Sprite spawned from Para-Goomba
1599,108507,1,Sprite number,Sprite spawned from Para-Bomb
1600,108508,93,Subroutine (JSL),"Subroutine that checks for contact between Mario and the sprite slot currently in X. If carry is set, Mario is touching the sprite."
1601,108528,3,Sprite Misc.,Change from [1D A0 15] to [EA EA EA] to fix a glitch where sprites lose their interaction with the player while touching the edge of the screen. An example of this happens when a Banzai Bill's leftmost pixel goes past the left edge of the screen.
1602,108603,779,Sprite subroutine (JSR),"Default sprite interaction routine. The sprite interaction routine calls it if $167A,x is positive/ bit 7 is not set.

- $01A852 controls number where the star chain should stop. To be used with $01A856

- $01A856 controls, how many points/ one-ups are added if the max limit of a star chain is reached. To be used with $01A852


$01A8D0 handles the code when you jump on a spiky enemy.

Change $01A8D3 to $AD (LDA $xxxx) to disable spin jumping on spiky enemies. On contrary, change $01A8D3 to $80,$01 (BRA $01) to disable jumping with Yoshi on spiky enemies. To disable both, change $01A8D0 to $80,$04 (BRA $04).


$01A91C handles the code when you jump on a non-spiky enemy.

Change $01A91F to $AD (LDA $xxxx) to make spin jumps count as normal jumps. On contrary, change $01A91F to $80,$01 (BRA $01) to make jumps with Yoshi on enemies count as regular jumps. To make both count as regular jumps, change $01A91C to $80,$04 (BRA $04).


Change $01A930 to $00 to enable the boost gain with spin jump kill.

$01A940 is the sound effect to play when you kill an enemy with a spin jump/ jump with Yoshi.


$01AA42 is the routine for carryable sprites.

Change $01AA61 to $AD (LDA $xxxx) to enable carrying more than one sprite at time even though you already have one."
1603,108679,1,Sprite physics,Number of frames to disable player contact for most sprites after being touched by Mario. Used to prevent issues like Mario getting hurt by a sprite he just bounced off of.
1604,108755,1,Misc.,Change from 0D to AD to prevent Mario from being able to jump on spikey enemies with the spin jump
1605,108864,1,Sound effect,Sound effect used when spinjumping an enemy or when Yoshi stomps on it.
1606,108918,1,Sprite number,Sprite that Super Koopa (sprite 73) becomes when stomped
1607,108935,1,Sprite number,Enemy spawned from stomping Dino-Rhino
1608,109017,1,Timer,Timer for displaying smashed shelless Koopas
1609,109070,1,Misc.,"Change to 03 to prevent Bob-omb, Goomba, Mechakoopa's stun timers from being reset when kicked"
1610,109077,1,ASM,Change from 02 to FF to prevent Koopas from spawning shelless Koopas when jumped on. (Use with $0196C6)
1611,109097,1,Timer,"Stun timer for Goombas, Buzzy Beetles, Mechakoopas, Bob-ombs"
1612,109102,1,Misc.,State of Koopa when stomped
1613,109107,15,Subroutine (JSL),Boost player subroutine. Boosts the player up a bit or a lot depending on whether A/B are being pressed.
1614,109112,1,Sprite physics,How high Mario bounces when he jumps on an enemy (normal jump & spin jump)
1615,109118,1,Sprite physics,How high Mario bounces when he jumps on an enemy with button A pressed (normal jump & spin jump)
1616,109148,1,ASM,Change from BEQ [F0] to BRA [80] and Mario will not be able to carry items by holding X or Y.
1617,109216,1,Misc.,State of Koopa shell when kicked
1618,109221,1,Timer,Number of frames to disable player contact with any carryable sprite after touching it without holding dash (not to be confused with $01A0A7). Default is $10.
1619,109317,2,Music,Change to [80 00] to not have star music override P-Switch music. Instead which ever is pressed/collected recently will have priority.
1620,109320,1,Music,Music played when a POW is pressed
1621,109325,1,Timer,Time it takes for POW to disappear after jumping on it. Change to 00 to keep the POW after jumping on it.
1622,109339,1,Timer,"How long blue and silver P-Switches last (default is $B0), in units of every 4th frame. Therefore PSwitchTimerLength = Seconds * 15"
1623,109344,1,Timer,POW shaking screen timer.
1624,109352,4,Misc.,Change to EA EA EA EA to prevent on screen sprites from turning into silver coins when the silver POW is active (USE WITH $02A9A1)
1625,109361,21,Sprite physics,"Code that pushes the player out of solid carryable sprites, such as keys and springboards. Increments/decrements $94 (player x position)."
1626,109397,1,Sound effect,Change to [80] to give enemies (inc. goomba) the SMAS stomp sound.
1627,109411,1,Misc.,"Value that determines what to give the player for bouncing on 8 or more enemies consecutively. Change to [07] to give the player 8000 points instead of a 1up for the consecutive jumps. 

(See ROM Map address $02ACE5 for other values)"
1628,109423,42,Sprite subroutine (JSL),"Routine that displays the white star effect at a sprite's position and plays the ""kicked"" sfx (used, for example, when kicking a Shell or killing an enemy with a Shell).


JSL to $01AB72 to show the star but not play the sound effect."
1629,109465,51,Sprite subroutine (JSL),"Routine that displays the contact graphics at Mario's position, usually called by sprites when Mario jumps on them."
1630,109817,55,Subroutine (JSL),"Random number generation subroutine. Access using JSL $01ACF9.


output:

16bit result at $148D."
1631,110216,8,Sprite Misc.,"Sprites for the flying ? blocks to spawn, as indexes to the table starting at $0288A3. First four are used if Mario has a powerup, second four if he doesn't."
1632,110279,1,ASM,Change from $26 to $31 to prevent Thwomps from dropping while vertically off screen.
1633,110305,1,Misc.,"What face to use for Thwomp if Mario comes close (00 - Calm, 01 - Grumpy, 02 - Raging)"
1634,110319,1,Misc.,"What face to use for Thwomp Crashing down (00 - Calm, 01 - Grumpy, 02 - Raging)"
1635,110355,1,Timer,Thwomp shaking screen timer.
1636,110360,1,Sound effect,Thwomp Sound Effect.
1637,110365,1,Timer,Thwomp Stalling Timer.
1638,110393,1,Sprite physics,"Thwomp returning Y speed (between 80-90, C0, E0-FF) other values can give odd effects, so do not use any other bytes."
1639,110410,5,Sprite tilemap related,Thwomp Tilemap
1640,110415,5,Sprite tilemap related,"YXPPCCCT - Thwomp Properties


Byte 01 - Top left

Byte 02 - Bottom left

Byte 03 - Top right

Byte 04 - Bottom Right

Byte 05 - Angry Thwomp Face"
1641,110477,1,Sprite tilemap related,Angry Thwomp Face
1642,110570,1,Sprite physics,Thwimp jumping height (between 80-FF)
1643,110579,1,Sprite physics,Thwimp jumping Right speed.
1644,110583,1,Sprite physics,Thwimp jumping Left Speed.
1645,110589,1,Sound effect,Thwimp Sound Effect.
1646,110594,1,Timer,Thwimp stalling timer
1647,110753,1,Misc.,Value to add for flopping Cheep-Cheep animations
1648,110788,1,Sprite physics,"How far cheep-cheeps will move (the greater the value, the longer the distance.)"
1649,110863,1,Misc.,Change to 00 to switch the GFX pages used by the swimming and flopping Cheep-Cheeps
1650,110873,3,Sprite tilemap related,Replace 9D F6 15 with EA EA EA to make the fish (Cheep Cheep) tilemap use a single GFX page
1651,110890,36,Sprite subroutine (JSR),"This subroutine is what is used to kill stunned koopas and out of water fish. The following offsets may be of use:

$01B12B - How long to show the player kicked a sprite pose.

$01B130 - The sound effect to play (default #$03)

$01B132 - The sound effect channel (default $1DF9)

$01B13D - Y speed of the dying sprite (default #$E0)

$01B145 - Forces the player to face the killed sprite, change to NOP #2 (EA EA) to disable"
1652,110926,44,Sprite subroutine (JSR),Sprite based sparkle routine. Used by Magikoopa's magic and the goal sphere. The goal sphere calls $01:B152.
1653,111122,4,Sprite physics,"Table of X speeds for the floating spike ball (sprite A4).  In order: Slow right, slow left, fast right, fast left."
1654,111150,5,Sprite Misc.,The code that checks the sprite buoyancy to determine whether sprites 5C and 5E should float on water or be suspended in the air.  You can change this to 80 03 xx xx xx (xx can by any byte) to make them always stay in air or to 80 06 xx xx xx to make them always float.
1655,111299,14,Sprite tilemap related,"For sprites 55-58 and 5B-5E, partly determines which tilemap to use.  00 -> wooden or checkerboard platform, 01 -> flying rock or grassy platform.  The table offset is the sprite number minus 55, and the fifth and sixth bytes and the last four bytes are not used."
1656,111403,1,Sprite tilemap related,"Change to 80 to let sprite 63 use the wooden platform tilemap only.

However, the size will be still different, depending on the x-pos."
1657,111406,1,Sprite tilemap related,"Left Tile of Checkerboard Platform (sprites 55, 57, 5C and 63)"
1658,111411,1,Sprite tilemap related,"Center Tile of Checkerboard Platform (sprites 55, 57, 5C and 63)"
1659,111422,1,Sprite tilemap related,"Right Tile of Checkerboard Platform (sprites 55, 57, 5C and 63)"
1660,111429,1,Sprite tilemap related,Tilemap:  Left edge of line guided wooden platform (Sprite 62)
1661,111434,1,Sprite tilemap related,Tilemap: Center of line guided wooden platform (Sprite 62)
1662,111445,1,Sprite tilemap related,Tilemap: Right edge of line guided wooden platform (Sprite 62)
1663,111474,1,Sprite tilemap related,Tilemap: Right edge of line guided wooden platform (Sprite 62)
1664,111491,9,Sprite tilemap related,Grassy Orange Platform Tilemap (sprites 5D and 5E)
1665,111500,9,Sprite tilemap related,Flying Rock Platform Tilemap (Sprites 56 and 58)
1666,111663,1,Sprite tilemap related,Edge of Flying Rock Platform (mirrored)
1667,111668,1,Sprite tilemap related,Bottom edge of Rock Platform (mirrored)
1668,111675,1,Sprite tilemap related,Edge of Grassy Orange Platform (mirrored)
1669,111680,1,Sprite tilemap related,Bottom edge of Grassy Orange Platform (mirrored)
1670,111695,231,Sprite subroutine (JSL),"Invisible solid block subroutine. JSL to it in a sprite to make it solid.

$01B4C0 - Change to A0 00 to make Super/Fire/Cape Mario have a 16x16 interaction field (like Small Mario) or change to A0 01 to have a 16x32 intereaction field (like Big Mario) (in conjunction with addresses $00EB79 and $03B67C)

$01B4F3 - SFX that comes up when Mario hits the Message Block/Flying ?-Block sprite.


After the routine is done, it outputs the carry flag:

C = set when the player is in contact with the solid sprite, otherwise clear."
1671,111957,1,Sprite physics,Speed of the horizontal platform that goes on forever (sprite 5E).
1672,112218,4,Sprite tilemap related,"X displacement for each tile of the floating spike ball (sprite A4).  In order: Top left, top right, bottom left, bottom right."
1673,112222,4,Sprite tilemap related,"Y displacement for each tile of the floating spike ball (sprite A4).  In order: Top left, top right, bottom left, bottom right."
1674,112226,4,Sprite tilemap related,"Tile properties for each tile of the floating spike ball (sprite A4).  In order: Top left, top right, bottom left, bottom right."
1675,112230,57,Sprite subroutine (JSR),"The GFX routine for the floating spike ball (sprite A4). $01B686 controls the first tile number used, and the second is always one 16x16 tile to the right of that."
1676,112287,2,Misc.,Length of Turn Block Bridge (sprites 59 and 5A)
1677,112289,2,Sprite physics,X speed of Turn Block Bridge (sprites 59 and 5A)
1678,112291,2,Misc.,Time of Turn Block Bridge (sprites 59 and 5A)
1679,112510,1,Sprite tilemap related,Tile used by Turn Block Bridge (sprites 59 and 5A)
1680,112528,14,Sprite tilemap related,"Change to [09 xx 99 07 03 99 0B 03 99 0F 03 99 13 03] to change the palette used by the turn block bridge. (""xx"" is the new palette value; 00 is the original.) This also prevents the last tile from being X-flipped."
1681,112563,8,Sprite subroutine (JSL),"Finish OAM write caller subroutine (JSRs to the main one and ends in RTL).


Value in A: Amount of OAM slots to write minus 1 (i.e. to write 4 tiles, A must be #$03)

Value in Y: Size of the OAM tiles. #$00 = 8x8, #$02 = 16x16, any negative value (e.g. #$FF) = is manually set with $0460.


Note: This routine is only used if you finished to write with a regular sprite. Do not use it outside of regular sprites!"
1682,112571,136,Sprite subroutine (JSR),Finish OAM write routine. JSL to $01B7B3 to access it from all banks other then bank $01.
1683,112956,2,Sprite physics,"Green horizontal net Koopa's speed (right, left). Red horizontal net Koopas move twice this speed."
1684,112973,1,Sprite physics,Green vertical net Koopa's initial speed. Red vertical net Koopas move twice this speed.
1685,113184,1,Sprite physics,Lowest Map16 tile that a vertical net Koopa can climb on. Change from 07 to 06 to allow vertical net Koopas to climb on vine tiles.
1686,113188,1,Sprite physics,"Highest Map16 tile that a vertical net Koopa can climb on, plus one."
1687,113195,1,Sprite physics,Lowest Map16 tile that a horizontal net Koopa can climb on. Change from 07 to 06 to allow horizontal net Koopas to climb on vine tiles.
1688,113199,1,Sprite physics,"Highest Map16 tile that a horizontal net Koopa can climb on, plus one."
1689,113335,21,Sprite tilemap related,Gate Sprite Tilemap
1690,113619,1,Sprite tilemap related,Gate Sprite palette
1691,113716,4,Sprite tilemap related,The OAM Properties of the Magikoopa's magic.
1692,113767,8,Misc.,Change to EA EA EA EA EA EA EA EA and every Map16 block will change into sprites when touched by Magikoopa's Magic. (Not just turn blocks)
1693,113789,1,Sprite number,What Magikoopa's magic transforms turn block into (1up)
1694,113795,1,Sprite number,What Magikoopa's magic transforms turn block into (Coin)
1695,113801,1,Sprite number,What Magikoopa's magic transforms turn block into (Thwimp)
1696,113807,1,Sprite number,What Magikoopa's magic transforms turn block into (Yellow Koopa)
1697,113888,16,Sprite Misc.,Magikoopa's Magic Sine Rotation Table.
1698,114051,1,Sprite tilemap related,Magikoopa's Magic Tilemap (Circle)
1699,114056,1,Sprite tilemap related,Magikoopa's Magic Tilemap (Square)
1700,114061,1,Sprite tilemap related,Magikoopa's Magic Tilemap (Triangle)
1701,114437,1,Sprite tilemap related,Tile used by Magikoopa's Wand
1702,114473,1,Sound effect,SFX played by Magikoopa
1703,114483,1,Sprite number,The sprite that Magikoopa throws
1704,114538,121,Sprite subroutine (JSR),The aiming routine used by Magikoopas to aim their magic at (the upper tile of) the player. Input is the total speed (X + Y); output is Y speed in $00 and X speed in $01.
1705,114877,1,Misc.,[95] Change to A5 to stop the goal point bar from moving.
1706,114928,1,Music,Goal tape end level music
1707,114954,1,Sound effect,Goal tape breaking sound effect.
1708,114971,1,Timer,How long the bonus star number stays on screen
1709,115032,1,Sprite tilemap related,Goal Bar Tilemap
1710,115044,1,Sprite tilemap related,Palette/priority/flip of Goal tape tiles
1711,115066,4,Misc.,Change 22 CA F1 07 to EA EA EA EA to disable the digits made up of star tiles at the goal tape (which resemble the amount of bonus stars gathered)
1712,115102,1,Sprite tilemap related,Tile for Growing Vine's Piranha head(1)
1713,115106,1,Sprite tilemap related,Tile for Growing Vine's Piranha head(2)
1714,115118,1,Misc.,Y speed of Growing Vine's growth
1715,115174,1,Misc.,Tiles created from growing vine sprite
1716,115353,1,Sprite Misc.,[05] Number of coins awarded when the player collects a Flying Red Coin (Sprite #$7E).
1717,115475,4,Sprite number,"Sprites used by the changing item (Mushroom, Flower, Feather, Star)"
1718,115517,1,Sprite number,Sprite that the Changing Item is made from
1719,115525,4,Sprite tilemap related,"Eaten berry palettes (unused, red, pink, green)"
1720,115532,1,Misc.,Change to 00 and the Fire Flower won't flip back and forth
1721,115551,1,Sprite tilemap related,Eaten berry tile
1722,115585,1,Sprite physics,"[$10] Y speed at which the powerups dropped from the item box fall. Does not include the feather, who's speed is handled at $01C730."
1723,115756,3,ASM,Set to EA EA EA to disable moving coin and star movement
1724,115835,1,Sprite physics,Star bounce height (between 80-FF)
1725,115984,20,Misc.,"Table of items to put in the item box when a powerup is touched. Indexed by Mario's status ($19), plus 4 times the type of powerup touched. Powerups are ordered as follows:

$01C510 to $01C513 - Mushroom

$01C514 to $01C517 - Flower

$01C518 to $01C51B - Star

$01C51C to $01C51F - Cape

$01C520 to $01C523 - 1-up


For a list of possible values, see $0DC2.

Note: A value of 0x00 (empty) means that the item in the item box doesn't change."
1726,116004,20,Misc.,"Action to take when Mario touches a powerup. Indexed by Mario's status ($19), plus 4 times the type of powerup touched. Powerups are ordered as follows:

$01C524 to $01C527 - Mushroom

$01C528 to $01C52B - Flower

$01C52C to $01C52F - Star

$01C530 to $01C533 - Cape

$01C534 to $01C537 - 1up


Possible values are:

00: Give a mushroom

01: Do nothing

02: Give a star

03: Give a cape

04: Give a flower

05: Give a 1up"
1727,116024,28,ASM,"Handles what happens when the player touches a powerup. This routine will manage the item box as well. $01:C549 [0B] is the sound effect to play when touching a powerup.


Set $01:C545 to EA EA EA to disable the item box."
1728,116052,12,Pointer,powerup routines (indexed by values from $01C524 - $01C537)
1729,116070,1,Timer,Length of Mario's growing animation. Setting it higher than 2F may cause it to use different Mario tiles.
1730,116072,1,Mario tilemap,Changing this to 99 will make Mario face the camera if he grows from a mushroom.
1731,116080,1,Misc.,"How many points you get by getting a powerup.

00 = 200

01 = 400

02 = 800

03 = 1000

04 = 2000

05 = 4000

06 = 8000

07 and above = 1-up

FB = nothing"
1732,116091,1,Sound effect,Mario picking up a Mushroom or Flower Sound Effect.
1733,116096,18,Subroutine (JSL),"Star Subroutine. JSL to it to give Mario star power. $01C581 controls how long stars last, $01C586 controls the music that is played during star power."
1734,116121,1,Misc.,What powerup feathers give you
1735,116125,1,Sound effect,Sound Effect will make if you grabbed the feather. Change to 0C to make the sound effect like in SMB3.
1736,116216,1,Misc.,What powerup flowers give you
1737,116233,5,Sprite tilemap related,"Tilemap: Power-ups (Mushroom, Flower, Star, Feather, 1Up)"
1738,116242,1,Sprite tilemap related,Tile used by the P-Balloon
1739,116243,1,Sprite tilemap related,Tile used by Flying Red Coin
1740,116244,1,Sprite tilemap related,Tile used by Flying Yellow 1Up Mushroom
1741,116245,1,Sprite tilemap related,Tile used by Flying Key?
1742,116246,4,Palette,"The palettes the star sprite flashes through. 00 is palette 8, 02 is palette 9, 04 palette A, etc. YXPPCCCT format."
1743,116289,96,Sprite subroutine (JSL),"The GFX routine of the moving coin (sprite 21) and various other coin sprites, such as the directional coins.


- $01C641: 4 bytes, JSRs to the main routine and ends in RTL.

- $01C645: Start of the main GFX routine.

- $01C653: Tile used by the first frame.  This is the 16x16 one.

- $01C667: Changing this to [80 07] will cause all 4 frames to use 2 tiles, and changing it to [D0 00] or [EA EA] will cause all 4 frames to use only 1 tile.

- $01C66A: Changing this to 00 will cause all 4 frames to be 8x8.

- $01C66D: Tiles used by the second, third, and fourth frames.  These are all 8x8.

- $01C699: Changing this to 02 will cause all 4 frames to be 16x16."
1744,116385,69,Sprite subroutine (JSR),"Graphics routine for the powerups (mushroom, fire flower, cape feather, and star).


- $01C6A3: Changing this to [80] will disable the star flashing.

- $01C6C2: Changing this to [30] will fix the powerups being covered by the background in levels with transparent layer 3.

- $01C6C3: Changing this to [80] will disable the x-flipping of the feather and fire flower."
1745,116714,1,Sprite tilemap related,Tilemap:  Swinging Platform's Chain 1 (Sprite 5F)
1746,116719,1,Palette,Palette of chain link connected to platform
1747,116849,1,Sprite tilemap related,Tilemap:  Swinging Platform's Chain 2 (Sprite 5F)
1748,116935,1,Sprite tilemap related,Tilemap:  Swinging Platform's Chain 3 (Sprite 5F). Also used by Chains 4 and 5.
1749,116940,1,Palette,Palette of other chain links
1750,116987,1,Palette,Palette of wooden platform
1751,117179,4,Sprite tilemap related,Tilemap:  Brown Swinging Platform (Sprite 5F)
1752,117451,85,ASM,"Sprite rotation preparation routine. First JSR to this, then to $01CB20 and finally to $01CB53."
1753,117536,51,ASM,"Routine for preparing the game's global rotation routine. First you can JSR to either $01CACB

for sprite rotation or to $01CCC7 for Mode 7 rotation (this step seems to be optional). Next you JSR to this to prepare the rotation and finally you JSR to $01CB53."
1754,117587,330,ASM,"The game's global rotation routine. First you can JSR to either $01CACB

for sprite rotation or to $01CCC7 for Mode 7 rotation (this step seems to be optional). Next you JSR to $01CB20 to prepare the rotation and finally you JSR to this."
1755,117959,35,ASM,"Mode 7 rotation preparation routine. First JSR to this, then to $01CB20 and finally to $01CB53."
1756,118046,12,Empty,Unused ROM.
1757,118095,1,Coordinate,Y lo starting position of Morton/Ludwig/Roy at the boss battle.
1758,118142,1,Coordinate,X low position of Ludwig at the start of the boss battle.
1759,118146,1,Coordinate,X high position of Ludwig at the start of the boss battle.
1760,118334,2,ASM,Change [64 7B] to [EA EA] in order to prevent Mario from slowing down when Ludwig appears.
1761,118446,2,Sprite physics,Ludwig's shell speed
1762,118452,2,Sprite physics,Ludwig's horizontal jump distance
1763,118478,1,Timer,Counts how long to delay before Ludwig jumps out of his shell.
1764,118488,1,Sprite physics,Vertical height of Ludwig's jump (lower is shorter).
1765,118615,1,Misc.,Ludwig jump right type modifier
1766,118616,1,Misc.,Ludwig jump left type modifier
1767,118733,1,Misc.,"Ludwig, Morton, and Roy's HP"
1768,118737,1,Sound effect,Morton/Ludwig/Roy spiralling out sound effect.
1769,118863,1,Music,Music played after Morton/Ludwig/Roy is defeated
1770,118874,1,Sound effect,What sound is played by Ludwig's fireball.
1771,118895,1,Sprite number,Sprite spawned by Ludwig von Koopa
1772,118912,1,Misc.,Height of fireball spawned by Ludwig.
1773,118968,1,Misc.,How long fireballs stay in Ludwig's mouth for.
1774,118974,1,Sprite physics,X Speed of Ludwig's Fireball (Right)
1775,118975,1,Sprite physics,Left speed of ludwig's fireballs (reversed)
1776,119074,1,Sprite physics,"Morton and Roy's speed for first hit, left."
1777,119076,1,Sprite physics,"Morton and Roy's speed for first hit, right."
1778,119078,1,Sprite physics,"Morton and Roy's speed for second hit, left."
1779,119080,1,Sprite physics,"Morton and Roy's speed for second hit, right."
1780,119082,1,Sprite physics,"Morton and Roy's speed for third hit, left."
1781,119084,1,Sprite physics,"Morton and Roy's speed for third hit, right."
1782,119087,1,Sprite physics,"Morton and Roy's vertical speed for first hit, up."
1783,119089,1,Sprite physics,"Morton and Roy's vertical speed for first hit, down."
1784,119091,1,Sprite physics,"Morton and Roy's vertical speed for second hit, up."
1785,119093,1,Sprite physics,"Morton and Roy's vertical speed for second hit, down."
1786,119095,1,Sprite physics,"Morton and Roy's vertical speed for third hit, up."
1787,119097,1,Sprite physics,"Morton and Roy's vertical speed for third hit, down."
1788,119353,2,Sprite physics,"How fast Morton and Roy rotate when they're crawling on a wall or ceiling. By default FC and 04. The closer to 00, the slower it gets. Do not exceed above a difference of 80 (that is, don't make the first value 01-7F, and don't make the second value 81-FF). Using 00 isn't recommended either."
1789,119406,1,Sprite physics,Falling speed of Morton and Roy
1790,119436,1,Timer,How much the ground shakes after Morton/Roy hit the floor.
1791,119445,1,Timer,How long Mario is stunned for after Morton/Roy hits ground.
1792,119450,1,Sound effect,Morton/Roy landing sound effect.
1793,119455,1,Timer,How long Morton/Roy stays put after landing on floor.
1794,119504,1,Misc.,"Timer determining how many frames to wait before being able to interact with Morton/Ludwig/Roy, after having interacted with it. (By default: 08)"
1795,119546,1,Misc.,Y speed of Mario when he bounces off Morton/Roy (normal state) and Ludwig (always).
1796,119550,1,Sound effect,"Which sound to generate when stomping Ludwig when he's inside his shell, and Morton/Roy/Ludwig when they're vulnerable (a second sound effect is generated too here, see $01D3AC).

By default #$02."
1797,119583,1,Sound effect,"SFX Played when Mario hits Morton/Roy while on the ceiling, while falling, and after they have just landed."
1798,119600,1,Mario physics,Mario's Y-Speed after jumping on Morton/Roy when they have just landed. Closer to 80 - highest.
1799,119605,1,Sound effect,Sound effect played when Mario hits Morton/Roy when going up the wall.
1800,119619,1,Misc.,X speed of Mario when he bounces off Morton/Roy when they're crawling on the left side of the screen.
1801,119625,1,Misc.,X speed of Mario when he bounces off Morton/Roy when they're crawling on the right half of the screen.
1802,119629,1,Misc.,"Y speed of Mario when he bounces off Morton/Roy in their unusual state (as in, crawling on walls, falling from ceiling)."
1803,119674,1,Misc.,"Horizontal scaling of Morton/Roy/Ludwig (Mode 7) just after they're hit. The higher the value, the thinner they are. Extreme values, such as 00 (biggest) or FF (smallest), are not recommended as they may or may not partially affect the gameplay. Keep the value near the original, if you change it.

By default: #$18."
1804,119683,1,Misc.,"Vertical scaling of Morton/Roy/Ludwig (Mode 7) just after they had been hit. The bigger the value, the shorter the Koopa Kids become.

Do not change the value to #$00 - #$1F or #$80 - #$FF as it will mess up. If changing value, keep it near the original since it might affect the Koopa Kid's height afterwards, if the value was too extreme.

By default: #$28."
1805,119714,1,Timer,How long Morton/Roy/Ludwig recovers after Mario has hit him.
1806,119724,1,Sound effect,"Which sound to generate when stomping Morton/Roy/Ludwig when they're vulnerable (a second sound effect is generated too, see $01D2FE).

By default #$28."
1807,119796,1,Sound effect,"Sound effect played when Morton, Ludwig and Roy takes damage from a fireball. Stored into $1DF9."
1808,119800,6,Misc.,"Counts fireball hits to Morton/Roy/Ludwig. Change to [80 06] to make Morton/Roy/Ludwig immune to fireballs.


Alternately, change to [FE 10 15 BD 10 15] to decouple their fireball HP from their stomp HP, so that they don't die after 2+ fireballs and a single jump."
1809,119807,1,Misc.,"How many fireballs it takes before Morton/Ludwig/Roy are killed.

Counts up to the stomping HP counter as well. By default: 0C."
1810,119878,4,Sprite tilemap related,Sprite tilemap: Ludwig Fireball
1811,120530,6,Sprite Misc.,"The code that determines whether sprite 63 should be brown or checkered.  Change to ""A9 xx EA EA EA EA"" to make the platform always brown or always checkered (if brown, xx = 00, if checkered, xx = 01).


- $01D6D5: change to 00 to make sprite 63 use the small wooden platform no matter which x-position. (to use with $01D6D7)

- $01D6D7: change to 00 to make sprite 63 use the small wooden platform no matter which x-position. (to use with $01D6D5)"
1812,120557,3,ASM,"Change to EA EA EA to make all line-guided sprites move at the same speed instead of the chainsaws, Grinder, and Fuzzy going twice as fast."
1813,120560,23,Sprite Misc.,"Change to B5 E4 29 10 4A 4A 4A 4A 9D 7C 15 80 14 EA EA EA EA EA EA EA EA EA EA to fix certain line-guided sprites: instead of moving left on odd starting X positions and not showing up at all on even ones (actually, they are just shifted offscreen), they will instead move right on even starting X positions.

x$01D6FA - X position (low byte) of sprites 65, 66, 67 and 68. Change it to 0F to fix its x position when it goes to the right. (USE WITH $01D701)

$01D701 - X position (high byte) of sprites 65, 66, 67 and 68. Change it to 00 to fix its x position when it goes to the right. (USE WITH $01D6FA)"
1814,120701,1,ASM,"Change from F0 to D0 to switch the speeds of the line-guided sprites.  (Normally, the chainsaws, Grinder, and Fuzzy move fast, while the platforms and rope move slow.) Use with $01D7A1."
1815,120737,1,ASM,"Change from F0 to D0 to switch the speeds of the line-guided sprites.  (Normally, the chainsaws, Grinder, and Fuzzy move fast, while the platforms and rope move slow.) Use with $01D77D."
1816,121336,1,Mario physics,"Change from 10 to 0A to fix a glitch that if the player is climbing a rope mechanism and gets pushed off by solid objects, allows the player to climb in midair."
1817,121750,4,Sprite tilemap related,X displacement for the Grinder tiles (the one that doesn't follow line guides).
1818,121754,4,Sprite tilemap related,[00 00 10 10] Y offset for the Grinder tiles (the one that doesn't follow line guides).
1819,121758,4,Sprite tilemap related,[03 43 83 C3] OAM properties for the Grinder tiles (the one that doesn't follow line guides).
1820,121791,1,Sprite tilemap related,Tile used by Grinder (the one that doesn't follow line guides). Note that the sixth bit (#$02) should be cleared or it won't animate; the sixth bit of the frame counter is ORA'd to it.
1821,121845,1,Sprite tilemap related,Line-guided Fuzzball tilemap (Sprite 68)
1822,121896,1,Sprite tilemap related,Line-guided Grinder Tilemap
1823,121927,4,Sprite tilemap related,Line-guided Rope's Motor Tilemap
1824,121932,8,Sprite tilemap related,Line-guided Rope's rope tilemap
1825,122028,1,Sprite tilemap related,Line-Guided Rope Palette
1826,122301,1,Sprite number,Sprite that the Bonus game is made from
1827,122595,36,Sprite tilemap related,Sprite tilemap: Bonus Roulette
1828,122631,9,Sprite tilemap related,"Palette info for the items in the bonus game sprite (0x82). The first three bytes are the palette for the Star. The next three are for the Mushroom, and the last three are for the Fire Flower. They're all expressed as even numbers where 00 = Lunar Magic palette 8, 02 = LM palette 9, and so on."
1829,123026,1,Sprite physics,Max Y-speed of the fireballs that fall from the sky during the Bowser battle. Default is $20.
1830,123101,2,Sprite Misc.,"Change to [A9 XX 9D 40 15 80 04 EA EA EA EA] to make the Podoboo's timer consistent, with XX being the amount of time for it to reappear."
1831,123153,4,Sprite tilemap related,Change to EA EA EA EA to prevent Podoboo from having lava trail.
1832,123211,1,Timer,Amount of time Bowser's sky fireballs remain on the ground before vanishing. Should not be set below #$02. Default is $80.
1833,123280,4,Sprite tilemap related,Sprite tilemap: Bowser Flame
1834,123345,1,Sprite number,Sprite that can unlock keyholes in its stunned status (Default is 80: Key)
1835,123349,1,Sprite number,"[$80] Sprite number that triggers the Keyhole exit when carried into a Keyhole.

If changing this, make sure to also edit $01F161."
1836,123385,1,ASM,"[40] Change to [DE] to fix the problem where if there is more than one key on the screen, some of them won't activate the keyhole. Use with $01E20A and $01E20F. Mod note: Applying this hex edit makes the game crash if you eat a key with Yoshi."
1837,123402,1,ASM,"[2F] Change to [CD] to fix the problem where if there is more than one key on the screen, some of them won't activate the keyhole. Use with $01E1F8 and $01E20F. Mod note: Applying this hex edit makes the game crash if you eat a key with Yoshi."
1838,123407,1,ASM,"[2A] Change to [C8] to fix the problem where if there is more than one key on the screen, some of them won't activate the keyhole. Use with $01E1F8 and $01E20A. Mod note: Applying this hex edit makes the game crash if you eat a key with Yoshi."
1839,123409,1,Timer,Keyhole shrinking timer.
1840,123414,1,Music,Keyhole music
1841,123473,1,Sprite tilemap related,Top tile of keyhole
1842,123478,1,Sprite tilemap related,Bottom tile of keyhole
1843,123483,1,Sprite tilemap related,Keyhole palette/GFX page
1844,123538,1,Coordinate,"Y low position of 1UP from bonus game, to start out with."
1845,123543,1,Coordinate,"Y high position of 1UP sprite from bonus game, to start out with."
1846,123548,1,Coordinate,"X low position of 1UP sprite from bonus game, to start out with."
1847,123553,1,Coordinate,"X high position of 1UP sprite from bonus game, to start out with."
1848,123558,1,Sprite physics,Initial X speed of 1UP sprite from the bonus game.
1849,123563,1,Sprite physics,Initial Y speed of 1UP sprite from the bonus game.
1850,123568,24,Empty,Unused data.
1851,123643,1,Timer,[68] How long time Monty Mole waits in the ground until jumping out (for the YI submap)
1852,123645,1,Misc.,"[01] At which submap Monty Mole has more delay until jumping out.

00 is the main OW

01 is Yoshi's Island

02 is Vanilla Dome

03 is Forest of Illusion

04 is Valley of Bowser

05 is Special World

06 is Star World"
1853,123649,1,Timer,[20] How long time Monty Mole waits in the ground until jumping out (for other areas than YI)
1854,123708,1,Misc.,Tile spawned by ledge-dwelling Monty Mole. Uses the values for $7E009C.
1855,123754,1,Sprite tilemap related,Attributes of Ledge-Dwelling Monty Mole
1856,123791,4,Sprite physics,"[$10 $F0 $18 $E8] Monty mole X speed.

The first two bytes control the speed for the hopping mole while next two control the maximum speed for the chasing one."
1857,123988,1,Sprite tilemap related,"Dry Bones and Bony Beetle crumble animation, frame 1"
1858,123998,1,Sprite tilemap related,"Dry Bones and Bony Beetle crumble animation, frame 2"
1859,124194,11,ASM,"Part of the code that makes sprite 32, the Dry Bones that stays on ledges, throw bones when the overworld level is 10D.


You can change $01E522 to [80 1E] to make sprite 32 never throw bones, change $01E526 to [80 05] to make it throw bones in all overworld levels, or change $01E52A to a different number to make it check a different overworld level.  The default value is 31, and it follows the format of RAM address $13BF.  If you change this behavior, you must also change the code at $01E59C."
1860,124316,11,ASM,"Part of the code that makes sprite 32, the Dry Bones that stays on ledges, set its timer for throwing bones when the overworld level is 10D.


You can change $01E59C to [80 18] to make sprite 32 never throw bones, change $01E5A0 to [80 05] to make it throw bones in all overworld levels, or change $01E5A4 to a different number to make it check a different overworld level.  The default value is 31, and it follows the format of RAM address $13BF.  If you change this behavior, you must also change the code at $01E522."
1861,124403,1,Sound effect,Dry Bones Crumble Sound Effect.
1862,124415,1,Timer,Time it takes for Dry-Bones to come back to life.
1863,124561,1,Sprite physics,[10] Change to 80 to disable spin jumping from springboards
1864,124575,1,Mario tilemap,"Mario's pose after jumping high from the portable Springboard. (0A looks the best, 0B by default.)"
1865,124579,1,Sprite physics,"How high Mario jumps when jumping from the P. Springboard. (80 highest, 00-FF lowest."
1866,124586,1,Sound effect,Sound effect made by the portable springboard.
1867,124707,1,Sprite tilemap related,Tile used by flattened POW Switch
1868,124713,1,Sprite tilemap related,Tile used by flattened Shelless Koopa
1869,124723,1,Sprite tilemap related,Tile to use for stomped goomba
1870,125218,1,Sprite tilemap related,Tile used for Lakitu's cloud
1871,125278,1,Sprite tilemap related,Change to 60 (RTS) to remove the face on Lakitu's cloud
1872,125302,1,Sprite tilemap related,Tile used by the face on Lakitu's Cloud
1873,125307,1,Sprite tilemap related,Properties (YXPPCCCT) of the face on Lakitu's cloud
1874,125317,4,Sprite tilemap related,Cloud Tilemap
1875,125404,1,Sprite physics,Change to 74 to disable Lakitu vertical movement
1876,125465,8,Sprite subroutine (JSL),Wrapper for the subroutine at $01EA21 (changes the data bank and JSRs to it).
1877,125473,79,Sprite subroutine (JSR),"A subroutine for spawning a Spiny egg.  This is used by both the normal and pipe-dwelling Lakitus, and it can be called via the wrapper at $01EA19.

$01EA32 is the sprite Lakitu throws.

$01EA36 is the sprite Lakitu throws when a silver P-switch is active.

$01EA69 is the palette of the sprite Lakitu throws when a silver P-Switch is active."
1878,125608,1,Misc.,Yoshi's standing animation
1879,125671,1,Misc.,Yoshi falling animation frame
1880,125677,1,Misc.,Yoshi jumping animation frame
1881,125686,1,Misc.,Yoshi turning animation frame
1882,125697,1,Misc.,Yoshi eating animation frame
1883,125705,1,Misc.,Yoshi eating animation (while holding up)
1884,125718,4,ASM,Change this to [EA EA A5 73] to fix an issue with Yoshi if you disable ducking.
1885,125725,1,Misc.,Yoshi crouching animation frame
1886,125741,1,Misc.,Yoshi waiting animation frame
1887,125817,1,Misc.,Change to 00 to make Mario walk even when riding Yoshi
1888,125886,2,Sprite physics,"Speed Yoshi has when mario get's hit while riding him. (Format = Left, Right)


Left Value must be a value over 80, Right Value must be a value under 7F"
1889,125890,8,Misc.,Growing animation sequence
1890,125956,72,Sprite subroutine (JSR),"The routine that makes Yoshi hatch.

$01EC2C - Change to ""A9 00 EA EA"" (LDA #$00 : NOP : NOP) to make Yoshi's ""Thank you for saving me"" appear on any map.

$01EC2F - Change ""3A"" (DEC A) to ""EA"" (NOP) to make Yoshi's ""Thank you for saving me"" message appear on the main map, as opposed to the Yoshi's Island submap.

$01EC36 - Change from ""D0"" (BNE) to ""80"" (BRA) to disable the Yoshi rescue message.

$01EC3C is Yoshi's thank you message. See ram $1426 for possible values."
1891,126206,1,Sprite physics,[F0] Yoshi's idle hopping speed. Change to $00 to make him not hop.
1892,126285,2,Mario physics,Change from [64 7B] to [EA EA] (NOP #2) to preserve Mario's horizontal speed when mounting Yoshi.
1893,126287,2,Mario physics,Change from [64 7D] to [EA EA] (NOP #2) to preserve Mario's vertical speed when mounting Yoshi.
1894,126304,1,Sound effect,Mario jumping on Yoshi sound
1895,126317,3,ASM,Change to [80 01 EA] to fix the glitch where you can hop off Yoshi to increase consecutive enemies stomped.
1896,126364,1,Misc.,[10] Change to [80] to disable jumping of Yoshi.
1897,126366,45,Subroutine (JSR),The routine that makes player leave Yoshi (by pressing A while on him).
1898,126436,10,Coordinate,Y-position of Mario on Yoshi (1 byte for each frame; 10 bytes)
1899,126446,3,Misc.,Riding Yoshi walking animation frames
1900,126449,2,Coordinate,Base X-position of Yoshi (1st byte facing right; 2nd facing left)
1901,126456,1,Misc.,Yoshi animation speed while running
1902,126457,13,Sprite tilemap related,Yoshi's head tiles (points to table at 9E47-9E57)
1903,126470,13,Sprite tilemap related,Yoshi's body tiles (points to table at 9E47-9E57)
1904,126483,13,Coordinate,X-position of Yoshi's head (facing right)
1905,126496,13,Coordinate,X-position of Yoshi's head (facing left)
1906,126535,13,Coordinate,Base Y-position of Yoshi
1907,126548,13,Coordinate,Y-position of Yoshi's head
1908,126724,4,Sprite Misc.,"[A4 7D 30 02] Controls the rate at which Blue/Winged Yoshi's wings flutter and the rate at which the flying SFX plays, depending on Mario's Y speed direction. 


Change $01EF04 to [80 02] (BRA $02) to make the flutter animation/SFX always slow. 


Change $01EF06 to [80] (BRA) to make the flutter animation/SFX always fast.


Change $01EF06 to [10] (BPL) to invert the Y speed direction condition (Slow if rising, fast if falling)."
1909,126735,1,Sound effect,SFX played by Blue/Winged Yoshi while flying (bank $1DFC).
1910,127115,1,Sprite tilemap related,Tile used in Yoshi's throat as he swallows
1911,127127,1,Sprite tilemap related,Sprite tilemap properties of Yoshi's swallowing tile (YXPPCCCT) [01]. Change to [00] to make that tile use SP1 or SP2.
1912,127162,3,ASM,Change from [AD AE 18] to [EA A5 9D] to fix the glitch where Yoshi will stick his tongue out twice if the screen is frozen (such as during a power up animation) while $7E14A3 is #$10.
1913,127187,91,Sprite subroutine (JSR),"Subroutine that is called while swallowing a sprite or a berry with Yoshi to give the player a coin and handle berry effects.


- $01F0D4: ($06) SFX to play when swallowing something.

- $01F0D6: ($1DF9) Swallow SFX port.

- $01F0D8: change to $80,$02 to disable the coin given by swallowing sprites.

- $01F0EF: ($0A) Number of red berries Yoshi needs to lay an egg.

- $01F0F6: ($74) Sprite number to spawn when eating enough red berries.

- $01F0FE: ($29) SFX to play when swallowing a green berry.

- $01F100: ($1DFC) Green berry SFX port.

- $01F107: ($02) Amount of tens to add to the timer when eating a green berry; can glitch the timer if set too high

- $01F11D: ($02) Number of pink berries Yoshi needs to eat to lay an egg.

- $01F124: ($6A) Sprite number to spawn when eating enough pink berries."
1914,127188,1,Sound effect,Yoshi swallowing sound
1915,127215,1,Misc.,How many berries Yoshi needs to eat before he lays an egg containing a mushroom. (Default: 0A)
1916,127222,1,Sprite number,Which sprite is generated when 10 red berries are eaten (by default : 74 - mushroom)
1917,127239,1,Timer,"How many ""10 seconds"" the green berry adds to the timer when eaten by Yoshi. 00 wouldn't add anything, 01 adds 10, 02 adds 20 seconds and so on. Can glitch up the timer if set to anything higher than 0A."
1918,127261,1,Misc.,How many pink berries should be eaten before a coin game cloud appears. (By default: 02)
1919,127268,1,Sprite number,Which sprite is generated when two pink berries are eaten (By default: 6A)
1920,127287,16,Misc.,"Which powers the different Yoshi color+shell color combinations gives. It's a 4x4 table, where the order is green, red, yellow, blue, the Koopa colors are on the horizontal axis and the Yoshi colors are on the vertical axis. Setting a #$01 bit enables ground pounding, #$02 enables flight, #$03 enables both. The other bits aren't used."
1921,127303,4,Sprite Misc.,"Indices (divided by 4) to the Yoshi-shell ability table at $01F137 for each color of Yoshi (ordered yellow, blue, red, green)."
1922,127303,6,Misc.,"What ability each shell colour Yoshi (This table points to the table at xF337)

(In the order of: brown[unused], grey[unused], yellow, blue, red, green)"
1923,127329,1,Sprite number,"[$80] Sprite number that sets the ""Yoshi has a Key in his mouth"" flag (at $7E191C) when being in Yoshi's mouth.

If changing this, make sure to also edit $01E1D5."
1924,127397,1,Sprite Misc.,"Controls how fast Yoshi's swallow timer is decreased. By default it's $03, meaning that every 4th frame the timer is decreased. If changing this, it's preferred to use one of these values: $00, $01, $03, $07, $0F, $1F, $3F, $7F, $FF (higher = slower decrease)."
1925,127403,1,Sprite Misc.,"Change from F0 to 80 to make Yoshi never swallow sprites held in his mouth (shells, keys, P-switches, etc)."
1926,127594,9,ASM,"Code that makes Yoshi spit out flames when he has the red shell in his mouth

$01F270 - Which shell colour can give Yoshi fire breath."
1927,127603,9,ASM,"Code that makes Red Yoshi spit out flames no matter what shell colour is in his mouth

$01F279 - Which coloured Yoshi always gets fire breath"
1928,127612,25,Sprite Misc.,"Code that makes Yoshi spawn Yoshi Fireballs, by calling the subroutine at $01F295 three times.


Change $01F28B to $80,$01 to make Yoshi breathe just the top and bottom fireball.


Change $01F282 to $00 and $01F288 to $80,$04 to make Yoshi breathe just the middle fireball."
1929,127632,1,Sound effect,Yoshi spit fire SFX
1930,127637,74,Sprite subroutine (JSR),"Subroutine to spawn a Yoshi Fireball, which uses the value in $7E:0000 to determine what speed values to use. After it returns, the value in $7E:0000 will be decremented by 1.


- $01F299 (1 byte): extended sprite number to spawn. By default it's $11 (Yoshi Fireball).

- $01F2D9 (3 bytes): X speed to give the fireball. By default it's $28,$24,$24 (middle, up, down fireball respectively).

- $01F2DC (3 bytes): Y speed to give the fireball. By default it's $00,$F8,$08 (middle, up, down fireball respectively)."
1931,127745,4,Sprite physics,"X speeds to give sprites when spit out by Yoshi, depending on Yoshi's direction and if Yoshi is ducking or not. The values are, in order:

 - ($30) Speed when spitting to the right while not ducking.

 - ($D0) Speed when spitting to the left while not ducking.

 - ($10) Speed when spitting to the right while ducking.

 - ($F0) Speed when spitting to the left while ducking."
1932,127754,1,Misc.,Change to 00 to keep Yoshi from sticking out his tongue
1933,127759,1,Sound effect,Yoshi tongue sound.  Uses $1DFC for sound effect.
1934,127769,1,Sprite physics,Speed at which Yoshi's tongue comes out.
1935,127774,1,Misc.,Length of Yoshi's tongue (about 2.5 blocks)
1936,127785,1,Timer,Amount of time Yoshi's tongue stays at its maximum length
1937,127804,1,Sprite physics,Speed at which Yoshi's tongue retreats after being at maximum point.
1938,127836,1,Sprite Misc.,"Yoshi swallow timer. By default it's $FF, but note that it decreases every 4th frame (see $01F1A5)."
1939,127840,3,ASM,The routine triggered when Yoshi eats a sprite. Starts by loading the sprite number and comparing it to a Koopa.
1940,128072,1,Misc.,X-shift of Yoshi's tongue segments
1941,128101,1,Misc.,How many tiles comprise Yoshi's tongue (doesn't change collision)
1942,128105,1,Sprite Misc.,"OAM index of Yoshi's tongue. This is in the $0200 block, and it uses the next 4 slots after this as well."
1943,128136,1,Sprite tilemap related,Tile used by the middle of Yoshi's Tongue
1944,128140,1,Sprite tilemap related,Tile used by the end of Yoshi's Tongue
1945,128148,1,Sprite tilemap related,Palette/Flip/Gfx page of Yoshi's Tongue
1946,128152,1,Sprite tilemap related,Value to add to Pal/flip/etc. of Yoshi's tongue when facing right
1947,128232,1,Coordinate,Y position of sprite grabbed by Yoshi's tongue
1948,128292,106,Sprite subroutine (JSR),"Subroutine that checks for contact between Yoshi's tongue and any other sprite or berry.


- $01F55F: ($08) Clipping width of the tip of Yoshi's tongue.

- $01F563: ($04) Clipping height of the tip of Yoshi's tongue.


Change $01F524 from $5A to $60 to prevent Yoshi from eating anything (although he will still be able to eat berries by walking on them)."
1949,128418,1,Sound effect,SFX played when Yoshi tries to eat an inedible sprite with his tongue
1950,128461,1,Sprite number,Sprite that Pokey is made from when swallowed
1951,128517,1,Timer,Amount of time Yoshi's tongue stays out before he swallows an enemy
1952,128787,57,Sprite subroutine (JSR),"Subroutine that will damage Yoshi (register X should contain Yoshi's sprite slot number), knocking Mario off Yoshi, making Yoshi run, and triggering invincibility frames for Mario. In case you want it to check for star power first, call from $01F70E instead."
1953,128798,1,Sound effect,Sound Effect when mario get's hit while riding yoshi.
1954,128800,2,Sound effect,What bank $01:F71E loads its SFX from. (Default is $1DFC)
1955,128810,1,Mario physics,Y Speed Mario has when he gets hit while riding yoshi.
1956,128836,1,Timer,"How long invincibility lasts after yoshi runs away. 80 - longest, 00/FF - Shortest."
1957,128855,1,Sound effect,Yoshi egg coming out of block sound
1958,128860,4,Sprite tilemap related,GFX page of the tiles used in the Yoshi egg hatching animation ($01F760).
1959,128864,4,Sprite tilemap related,"Tile numbers for each frame in the Yoshi egg hatching animation. Read from right to left as (intact, breaking, breaking, puff of smoke).


Change alongside $019C17 and $01F794 to completely remap the Yoshi egg tiles."
1960,128898,1,Sprite number,Sprite that hatches out of colored yoshi egg when Mario does not already have a yoshi.
1961,128905,1,Sprite number,Sprite that hatches from sprite 2C (red/blue/yellow Yoshi egg) when Mario already has a Yoshi. (Default: 78 (1up))
1962,128916,1,Sprite tilemap related,"Yoshi Egg Tilemap (only manifests if the Yoshi egg is in the normal status ($14C8 = #$08), i.e. free-standing Yoshi egg).


Change alongside $019C17 and $01F760 - $01F763 to completely remap the Yoshi egg tiles."
1963,129164,2,Sprite physics,Horizontal speed of Eeries
1964,129166,2,Misc.,Vertical speed of Eerie (sprite 39)
1965,129231,2,Sprite physics,"Maximum speed that Boo, Boo Block and Big Boo can accelerate to (first byte is right & down, second left & up)."
1966,129296,1,Misc.,Change from D0 to 80 to disable Boo from stopping when Mario looks at it.
1967,129321,1,Timer,Time taken for Boo to turn around.
1968,129445,10,Misc.,[38 ED B6 18 85 D3 A5 D4 48 E9] Change to [18 69 10 EA 85 D3 A5 D4 48 69] to make the Boo/Boo Block track Mario accurately.
1969,129583,3,Palette,"Change to 09 xx EA to make all three frames of the Boo Block use the same palette, xx being the palette bits.


Note that changing this to 02 won't make any *noticeable* difference if you use the default palettes...the correct setting for palette F, used for the non-block frame, makes it use the EXACT same colors that are used in palette 9, for some reason."
1970,129591,3,Sprite tilemap related,Boo Block Tilemap
1971,129594,3,Palette,Boo Block Palettes
1972,129614,4,Sprite tilemap related,Iggy/Larry ball tilemap
1973,129838,1,Music,Music played after Iggy/Larry is defeated
1974,129889,1,Sound effect,SFX that plays when you hit Iggy/Larry into the lava.
1975,129941,1,Timer,FD95 - How long it takes for Iggy/Larry to turn around.
1976,129986,1,Misc.,Iggy/Larry's speed for walking towards center
1977,129990,1,Misc.,Iggy/Larry's speed for walking towards center
1978,130002,1,Misc.,Iggy/Larry's speed for walking towards center
1979,130006,1,Misc.,Iggy/Larry's speed for walking towards center
1980,130160,1,ASM,"The left bound of Iggy/Larry's movement. If Iggy/Larry crosses this left bound, he falls in the lava."
1981,130164,1,ASM,"The right bound of Iggy/Larry's movement. If Iggy/Larry crosses this right bound, he falls in the lava."
1982,130246,1,ASM,How long Iggy/Larry is invincible after getting hit. Increase this value (preferably to 30) if you want to prevent the player from scoring combos.
1983,130304,1,Misc.,Iggy/Larry's speed when stomped
1984,130374,1,Timer,Amount of time until Iggy/Larry stops gliding after being hit by a fireball.
1985,130493,1,Sprite number,Sprite that Iggy/Larry throws
1986,130691,51,Sprite tilemap related,Sprite tilemap: Larry/Iggy
1987,130746,1,Sprite tilemap related,Iggy Koopa's Palette/GFX page/Priority/Flip
1988,130747,1,Sprite tilemap related,Larry Koopa's Palette/GFX page/Priority/Flip
1989,130899,4,Sprite tilemap related,Sprite tilemap: Larry/Iggy shell
1990,131007,65,Empty,Unused data.
1991,163848,106,Subroutine (JSL),"""Drop Item From Box"" Subroutine. JSL to it to make the current item fall from the box.

Change $028008 from DA to 6B to disable the item box drop routine.

$028013 is Item dropping from itembox sound effect, written to $7E1DFC. Default value is [0C].

$028042 is Sprite State to drop items from the item box as.

$028052 is the fixed X position of dropped item from item box.

$028060 is the fixed Y position of dropped item from item box."
1992,163954,10,Misc.,Bob-omb explosion x spacing
1993,163964,10,Misc.,Bob-omb explosion y spacing
1994,163974,242,Sprite subroutine (JSL),"Explode Bomb Subroutine. JSL to it each frame to make your sprite explode, but remember to load $1540,x with the explosion timer and setting the data bank to 02 (or 82) first.

$02808E is Bob-omb explosion area

$028114 is Bob-omb's explosion GFX tile

If you change $02811E from 38 to 18 (i.e. change SEC to CLC), the Bob-omb explosion will use the first graphics page."
1995,164390,57,Sprite tilemap related,Ludwig BG Tiles
1996,164447,30,Sprite tilemap related,Morton/Roy BG Tiles
1997,164859,5,Sprite physics,"Change all 4A bytes (LSR) to EA (NOP), to increase the speed of the walls in Morton/Roy's room when they're crashing down. The more EA bytes, the faster (twice as fast per EA) the walls will come down."
1998,165052,84,Sprite subroutine (JSL),Water Splash Subroutine
1999,165160,103,ASM,"Lava Splash Subroutine

$028540 is the objects to use for lava splash."
2000,165263,80,Subroutine (JSL),"Star Sparkle GFX Subroutine (Doesn't make Mario invincible, but shows sparkles.)

$0285BA is where the Sprite/Block Star Sparkle GFX Subroutine starts (which is also used for Mario)."
2001,165423,52,Sprite subroutine (JSL),"Throw block creation subroutine.

$028648 - Change from B5 to A5 to change a bug with the throwblock where it may spawn a water splash upon spawn in a buoyancy-enabled level.

$02864E - Sprite number: Sprite that the Throw Block is made from.

$028656 - Throw Block timer. Change it to 00 and it stays forever."
2002,165475,92,Subroutine (JSL),"Block shatter subroutine.  This creates 4 block pieces and plays the shatter sound effect, but it does not actually destroy the block (use $00BEB0 for that).  If A is 00 when calling this, the block pieces will be brown, while if A is a nonzero number, they will flash palettes.  It uses $98-$9B to set the XY position. Note that this should be called with the data bank set to 02."
2003,165504,1,Sound effect,Breaking Turn Blocks Sound Effect.
2004,165510,3,Misc.,Change to EA EA EA to disable the Turn Block shattering animation (turn blocks disappear when spin jumped). Also affects sprite 4C.
2005,165567,46,Sprite subroutine (JSL),Yellow Yoshi earthquake subroutine.
2006,165591,1,Sprite Misc.,Change from 0xDD to 0xD5 to fix a glitch with Yoshi's ground pound hitbox where it can warp to the wrong side of the screen if the low byte of Mario's X position is #$F8-#$FF.
2007,165690,4,Sprite physics,"Bounce sprite Y speed table, based on direction (or the value in $06 during the routine at $028752)."
2008,165694,4,Sprite physics,"Bounce sprite X speed table, based on direction (or the value in $06 during the routine at $028752)."
2009,165714,299,Subroutine (JSL),"A subroutine for spawning bounce sprites from blocks.  It continues into the routine at $02887D.

Input:

$04 - bounce sprite number - 1

$05 - value to use in $02887D

$06 - speed index (see $02873A and $02873E)

$07 - value of $9C that the block will turn into


At 0x10989/$028789:

Block bounce sprite YXPPCCCT table, in the following order:

- Turn Block with item / ! Block

- Note Block

- ?-Block

- Unused Side Bounce Turn Block

- Glass Block

- ON/OFF Block

- Turn Block"
2010,165733,1,Misc.,"[05] Number of points awarded for breaking a turn block, divided by 10."
2011,166013,36,Subroutine (JSL),"Seems to be a subroutine for spawning stuff from blocks. What is spawned depends on the value of $05:


00 - nothing

01 - mushroom

02 - flower

03 - star

04 - cape

05 - 1-Up

06 - coin

07 - coin (sets multiple-coin-block timer)

08 - growing vine

09 - nothing?

0A - P-switch (blue/gray depending on block X position)

0B - key/wings/balloon/shell (depending on block X position)

0C - green Yoshi egg

0D - green Koopa shell (with stun timer set)

0E - changing item

0F - directional coins

10 - key (but a random blue shell-less Koopa also pops out)

11-FF - completely glitchy; best not to use


This subroutine can be used properly in a block, but the data bank must be 02 and the lower nybbles of $98 and $9A must be cleared. All values except 06 and 07 JSR to the main ""spawn sprite from block"" routine at $0288DC; values 06 and 07 JSR to the coin-spawning routine at $028A66.

Note: When used in a custom block under sprite interaction, make sure you preserve $1695 and then restore it after this routine to prevent a random splash sprite from spawning."
2012,166049,1,Sprite number,Sprite that comes out of egg in block 126 (Yoshi)
2013,166050,1,Sprite number,Sprite that comes out of egg in block 126 if Yoshi is already present (1up)
2014,166052,1,Sprite number,"Sprite that, when Yoshi is not present, comes out of blocks 117, 118, 11F, and 120 when small, and 16B regardless of status. (Mushroom)"
2015,166053,1,Sprite number,Sprite that comes out of blocks 117 and 11F when big (Flower)
2016,166054,1,Sprite number,Sprite that comes out of blocks 119 and 121; also comes out of block 11A (certain X-positions only) and 122 (all X-positions) when invincible (Star)
2017,166055,1,Sprite number,"Sprite that comes out of blocks 118 and 120 when big, and 16A regardless of status (Feather)"
2018,166056,1,Sprite number,Sprite that comes out of block 11A (1up)
2019,166056,1,Sprite number,"Sprite that comes out of block 11A, and block 12D if at least 30 coins have been collected. (1up)"
2020,166059,1,Sprite number,Sprite that comes out of block 11A(?) (Vine)
2021,166061,1,Sprite number,Sprite that comes out of block 11D (POW)
2022,166062,1,Sprite number,"Sprite that comes out of block 125 (Balloon - if changed, it will produce the same sprite regardless of X position)"
2023,166063,1,Sprite number,Sprite that comes out of block 126 (Yoshi egg)
2024,166064,1,Sprite number,Sprite that comes out of blocks 127 and 128 (Green shell)
2025,166065,1,Sprite number,Sprite that comes out of block 12C (Changing Item)
2026,166066,1,Sprite number,Sprite that comes out of block 114 (Directional coins)
2027,166069,1,Sprite number,"Sprite that, when Yoshi is present, comes out of blocks 117, 118, 11F, and 120 when small, and 16B regardless of status. (Mushroom)"
2028,166070,1,Sprite number,"Sprite that comes out of block 117 when big (Flower), when Yoshi is present."
2029,166071,1,Sprite number,"Sprite that comes out of block 119 (Star), when Yoshi is present."
2030,166072,1,Sprite number,"Sprite that comes out of block 118 when big (Feather), when Yoshi is present."
2031,166073,1,Sprite number,"Sprite that comes out of block 11A, and block 12D if at least 30 coins have been collected, when Yoshi is present. (1up)"
2032,166073,1,Sprite number,"Sprite that comes out of block 11A (1up), when Yoshi is present."
2033,166076,1,Sprite number,"Sprite that comes out of block 11A(?) (Vine), when Yoshi is present."
2034,166078,1,Sprite number,"Sprite that comes out of block 11D (POW), when Yoshi is present."
2035,166079,1,Sprite number,"Sprite that comes out of block 125 (Balloon - if changed, it will produce the same sprite regardless of X position), if Yoshi is present."
2036,166080,1,Sprite number,"Sprite that comes out of block 126 (Yoshi egg), if Yoshi is present."
2037,166081,1,Sprite number,Sprite that comes out of blocks 127 and 128 if Yoshi is present (Green shell)
2038,166082,1,Sprite number,"Sprite that comes out of block 12C (Changing Item), if Yoshi is present."
2039,166083,1,Sprite number,"Sprite that comes out of block 114 (Directional coins), if Yoshi is present."
2040,166086,11,Misc.,Sprite in block status ($7E14C8 - $7E14D3) table.
2041,166102,3,Sprite number,"Sprites spawned by key/wings/balloon/shell block, indexed by its X position. Note that this table is only 3 bytes long, not 4 bytes; the shell actually comes from the key's sprite status."
2042,166105,3,Sprite Misc.,"Sprite status of sprite spawned by the key/wings/balloon/shell block, indexed by its X position. Note that this table is only 3 bytes long, not 4 bytes; the shell is given an invalid sprite status."
2043,166149,98,Subroutine (JSL),"The subroutine that generates a sprite from a block (tile 120 or 125, for example).

$02895F - Change from F0 to 80 to allow Directional Coins to reappear if you activate the block, then leave the area and come back."
2044,166248,1,Music,Directional coins music.
2045,166403,4,ASM,"If you change [F6 C2 F6 C2] to [EA EA EA EA], then tile 125 will spawn a flying red coin instead of Yoshi wings on X-coordinate (X&3 = $01)."
2046,166408,2,ASM,"[A9 FF] Change to [80 03] or [A9 00] to prevent the stun timer of the shell spawned from blocks 127 and 128 from ever being set.  It will just spawn as a plain shell rather than a shell that will ""wake up"".  (Or you can change the second byte to a different value to make the stun timer shorter.)"
2047,166466,2,Sprite tilemap related,"Colours of P-Switches (Blue, Silver) when spawned by tile 11D"
2048,166468,34,Subroutine (JSL),"Subroutine for generating smoke when hitting a block.


You can use this in a custom block, but be sure to set up $98 and $9A accordingly."
2049,166502,67,Subroutine (JSR),"Subroutine for spawning the coin that comes out of a ? block (for example tile 124).


It can be used in a custom block, but the low nybbles of $98 and $9A must be cleared first. This subroutine ends with RTS, but it may be accessed with a JSL to $02889D."
2050,166577,182,Subroutine (JSL),"1up handler routine.


$02:8AC9 is the number of frames to wait before awarding each extra life after the first, when a 2up or higher is obtained. (Note that reducing this may  skip some of the 1up sound effects.)

$02:8ACE is the sound effect."
2051,166776,12,Sprite Misc.,OAM indexes for minor extended sprites.
2052,166788,8,Sprite tilemap related,"Sprite mappings for Broken Bricks, Broken Turn blocks, and Broken Throw Blocks"
2053,166796,8,Sprite tilemap related,"Broken Brick tile properties, YXPPCCCT format."
2054,166808,24,Pointer,"Minor extended sprite pointer table, 2 bytes per sprite."
2055,166832,95,Sprite subroutine (JSL),"Subroutine called by Yoshi that was originally supposed to show some smoke particles when the player mounts him, but it was eventually disabled.

Change $028BB4 from $B8 to $B9 to re-enable this effect."
2056,166836,1,Misc.,"Set to B9 to enable unused ""Getting on Yoshi"" dust animation"
2057,167018,4,Sprite tilemap related,"Table of 4x4 tiles used for the unused ""getting on Yoshi"" smoke minor extended sprite."
2058,167082,1,Sprite tilemap related,"Properties of the unused ""getting on Yoshi"" smoke minor extended sprite."
2059,167096,12,Sprite tilemap related,Reflecting Stream of Boo Buddies tilemap (Boos that follow the leader)
2060,167108,126,Sprite Misc.,"The code for the minor extended sprites that make up the Boo stream.

$028D34 is palette and GFX page of the following Boos in the Boo stream. (If you use the default palettes, changing this to 03 won't have any effect, since the proper palette setting for the sprite (palette F) uses the same colors as palette 9.)"
2061,167234,13,Sprite tilemap related,Water Splash Tilemap
2062,167383,4,Sprite tilemap related,Tiles used by Rip Van Fish's Z's
2063,167492,1,Sprite tilemap related,Properties of Rip Van Fish's Z's. Set to 02 to make it use the first graphics page.
2064,167602,1,Sprite tilemap related,Tile of broken Yoshi egg piece
2065,167612,1,Sprite tilemap related,Palette/GFX page of broken Yoshi egg piece
2066,167628,6,Sprite tilemap related,Star Mario's Sparkle Tiles
2067,167691,1,Misc.,Change to 00 to give Invincible Mario coin sparkles
2068,167706,1,Sprite tilemap related,Palette of star sparkles
2069,167723,4,Sprite tilemap related,Lava splash tiles (1)
2070,167798,1,Sprite tilemap related,Lava splash palette/GFX page (1)
2071,168128,3,ASM,Decrements the timers used by spinning turn blocks to determine how long they should spin. Change to [EA EA EA] to make the last four turn blocks Mario has hit spin forever.
2072,168301,1,Mario physics,[A0] Y speed that note blocks give the player when bouncing on them.
2073,168318,1,Sound effect,Sound Effect from bouncing on a Note Block
2074,168373,1,Misc.,Value for $9C to change what Map16 tile is created when a multiple-coin-block is hit after its timer has run out.
2075,168377,1,Misc.,Tile spawned behind bouncing block sprite
2076,168429,4,Sprite Misc.,OAM indexes for block bounce sprites (in the $0200 block).
2077,168433,7,Sprite tilemap related,"Block bounce sprite tiles.


$40 - Turn Block (not turning).

$6B - Note Block.

$2A - ?-Block.

$42 - Unused Side Bounce Turn Block (change to $40 to fix the wrong tile that appears when hitting these blocks).

$EA - Glass Block.

$8A - ON/OFF Block.

$40 - Turn Block (turning). Note that changing this will only affect the tile that appears before the block starts spinning."
2078,168549,301,Subroutine (JSR),"Subroutine run on bounce sprite INIT (for all bounce sprites except turnblocks), which is responsible for the bug where a coin on top of hittable block and hitting said block will cause the coin to turn into an invisible solid block.


Change $0290ED from [20] to [AD] to prevent the coin from being collected."
2079,168775,3,ASM,"Change to [20 1E D5], and change $02D51E from FF FF FF FF FF to A9 02 4C BA 91, to fix the glitch where placing a coin above a ? block or turn block will cause the coin to leave behind an invisible solid block if the block below is hit."
2080,168790,60,Subroutine (JSR),"Code that creates a spinning coin sprite from a bounce sprite spawned by tile 2B.  However, this never happens (tile 2B doesn't spawn a bounce sprite), so this subroutine seems to be unused.  It is called at $02934A."
2081,169028,1,Misc.,"If you change this from FF to 00 then you won't see the eyes blinking or the shell shake. However, do keep in mind that it will affect the Bob-ombs too. If you hit them with a cape or a block from underneath it won't explode."
2082,169046,1,Misc.,"Score added for hitting an enemy from below or smacking an enemy with the cape


00 = Nothing at all

01 - 07 = Scores 200-8000.

08 = 1UP.

09 = 2UP.

0A = 3UP.

0B = 5UP (glitched).

0C-FB = Best not to use.

FC-FF = Scores 10-80"
2083,169153,52,Subroutine (JSL),Cape Mario smashes ground subroutine.
2084,169205,22,Subroutine (JSR),"Routine that processes capespin interaction with sprites, extended sprites, and blocks."
2085,169571,51,Sprite subroutine (JSR),"Routine that gets sprite clipping value for quake sprites (i.e. bounce sprites and Yoshi's stomp). Takes the place of ""sprite clipping B"" from the standard routines."
2086,169656,4,Sprite Misc.,OAM indexes for the smoke images (in the $0200 block).
2087,169675,12,Pointer,Pointer to the smoke images. ($7E:17F0 - $7E:17FB)
2088,169907,1,Sprite Misc.,"[$F0] OAM index (in $0200) used by the sprite contact graphics (when not in Reznor/Morton/Roy's room). Since this sprite draws 4 tiles, it overlaps with Mario's fireballs (which use slots $F8 and $FC), causing it to be partially cutoff whenever there's some fireballs (it's easy to see if you spinjump on a spiky enemy while being fireflower Mario). To fix it, change this to $E8."
2089,170274,5,Sprite tilemap related,Mario/Luigi's trail of smoke tilemap. It uses palette 8.
2090,170473,4,Sprite Misc.,"OAM indexes for the spinning coins that come out of ? blocks.  The next index after each of these is also used (the GFX routine will store to $0200,y and sometimes to $0204,y as well)."
2091,170481,183,Sprite subroutine (JSR),"Main handling routine for the spinning coins that come out of ? blocks.

$029A4F is a fourth of the rolling coin tilemap. This tile is 16x16.

$029A54 is the properties of the rolling coin flying from question blocks.

$029A6B controls the frames, changing to [D0 00] or [EA EA] will cause all 4 frames to only use 1 16x16 tile. Have to combine with $029A4F and $029A6E (same tile) for the complete effect.

$029A6E is three fourths of the tilemap of the rolling coin. These tiles are 8x8, but they're duplicated and placed above each other, making it 8x16."
2092,170493,1,Sprite physics,Downwards Y acceleration for the coin sprites spawned from coin blocks. Decrease this value to make them fly higher.
2093,170669,1,Misc.,How many points you receive for getting a coin out of a block.
2094,170726,1,Misc.,Smoke sprite to spawn from coins spawned by coin blocks.
2095,170795,38,Pointer,"Extended sprite routines (hammer, fireball, etc.)"
2096,170885,1,Sprite tilemap related,palette/GFX page of volcano lotus' fireball
2097,170900,1,Sprite tilemap related,first tile of volcano lotus' fireball
2098,170904,1,Sprite tilemap related,second tile of volcano lotus' fireball
2099,171151,1,Sprite tilemap related,Spin jump star palette
2100,171156,1,Sprite tilemap related,Spin jump star tile
2101,171312,1,Sprite tilemap related,Tile used by Wiggler's Flower once it falls off his head
2102,171317,1,Sprite tilemap related,The YXPPCCCT properties for the tile used by Wiggler's Flower once it falls off his head.
2103,171339,1,Sprite tilemap related,The sprite graphics tile used for the Smiley Coin that is dropped by the Coin Cloud Game.
2104,171344,1,Sprite tilemap related,The YXPPCCCT properties for the tile used for the Smiley Coin in the Coin Cloud Game.
2105,171349,1,Sprite tilemap related,Size of smiley face coin tiles (00=8x8; 02=16x16)
2106,171622,1,Sprite tilemap related,Tile used by the arm that lowers Torpedo Ted (hand closed)
2107,171626,1,Sprite tilemap related,Tile used by the arm that lowers Torpedo Ted (hand open)
2108,171650,4,Sprite tilemap related,Lava splash tiles (2)
2109,171733,1,Sprite tilemap related,Lava splash palette/GFX page (2)
2110,171868,1,Sprite tilemap related,Tile number for the small bubble that Mario spawns when he is underwater.
2111,171898,1,Sprite tilemap related,Yoshi's Fireball Frame 1 Tilemap
2112,171902,1,Sprite tilemap related,Yoshi's Fireball Frame 2 Tilemap
2113,171915,1,Sprite tilemap related,Yoshi fireball palette/GFX page
2114,171929,8,Sprite physics,Table for Mario fireball bounce speed. Change to all zeros to make straight fireballs not fly off of slopes at an angle. Use in conjunction with the fireball hit timer at $029FE4.
2115,171947,2,Sprite Misc.,OAM indexes for the player's fireballs.
2116,171988,1,Sprite physics,Initial Fireball Y Speed #2
2117,171995,1,ASM,Change to 80 to make the player's fireballs go through objects.
2118,172004,1,Timer,Fireball hit timer. This increases each time a fireball hits an object or a sprite. Changing it to #$01 will fix the bug with straight fireballs where the second fireball will go through objects if the first one is hitting an object. Use in conjunction with the bounce speed table at $029F99.
2119,172102,1,Sound effect,"Sound effect played when the players fireball touches an object. It is #$01 by default, and the sound effect is in bank $1DF9."
2120,172217,1,Sprite Misc.,Change from #$09 to #$0B (or #$15 in a SA-1 ROM) to fix a glitch with both the player's and Yoshi's fireballs where they don't interact with sprite slots above 9.
2121,172283,1,Misc.,Change to 0A to make other enemies die like Chargin' Chuck when hit by fireballs
2122,172284,1,Misc.,Set to BD for unlimited Chargin Chuck fire hp
2123,172291,1,Misc.,Chargin Chuck fire hp
2124,172295,1,Sound effect,Sound effect to play when Chuck is killed by fireballs
2125,172317,1,Misc.,"Determines the number of points received for defeating a Chuck with fireballs (this also applies to any tweaked or custom sprites that have the ""Takes 5 fireballs to kill"" flag set). See $02ACE5 for a list of possible values."
2126,172324,31,ASM,"Code that turns a sprite into a coin after getting hit by a fireball.


- $02A125: the sound effect to play when other enemies are killed by fireballs.

- $02A12A: the sprite fireballed enemies spawn."
2127,172371,8,Sprite Misc.,OAM indexes for extended sprites.
2128,172379,4,Sprite tilemap related,Fireball tile table
2129,172383,4,Mario tilemap,"Mario's fireball tiles' flip/priority/palette/GFX page, YXPPCCCT format (May also affect the small flame left by Hopping Flame)."
2130,172387,4,Sprite tilemap related,Reznor Fireball Tilemap
2131,172391,4,Sprite tilemap related,Reznor fireball tiles' flip/priority/palette/GFX page (YXPPCCCT format).
2132,172411,2,Sprite tilemap related,"Change to [EA EA] (org $02A17B : NOP #2) to make Reznor's and Jumpin' Piranha Plant's fireballs always large, or to [80 27] (org $02A17B : BRA $27) to make them always small."
2133,172452,115,Sprite subroutine (JSR),8x8 fireball GFX subroutine.  Is it also used as a base for various other extended sprites' graphics (they JSR to it and then change the tile numbers and properties).
2134,172567,2,Sprite tilemap related,Small flame left by Hopping Flame Tilemap
2135,172620,1,Misc.,Small flame's palette. It is added to the fireball's palette.
2136,172708,1,Sprite tilemap related,Tile used by Pitchin' Chuck's baseball once thrown
2137,172721,1,Sprite tilemap related,Palette/GFX Page of Baseball once thrown
2138,172748,1,Sprite tilemap related,Dry Bones: frame 1 of thrown bone
2139,172752,1,Sprite tilemap related,Dry Bones: frame 2 of thrown bone
2140,172762,1,Sprite tilemap related,Dry Bones: palette/gfx page of thrown bone
2141,172767,8,Sprite tilemap related,"Hammer Tilemap (Also, the flip of Dry Bones' bone)"
2142,172775,8,Sprite tilemap related,Palette/GFX Page of Hammer
2143,172871,4,Sprite tilemap related,Dust Cloud Tilemap
2144,173046,242,Sprite subroutine (JSR),"Extended sprite/player contact check and interaction subroutine.


$02A412 is the extended sprite interaction for the bonus game cloud.


$02A469 is the default extended sprite interaction to hurt Mario.


$02A4B3 is the speed Yoshi runs away when Mario gets hurt by an extended sprite and while he is riding yoshi (index: right, left).

Change $02A4B3 from [10 F0] to [18 E8] to fix an inconsistency where Yoshi runs slower when hurt from an extended sprite than hurt from a regular sprite."
2145,173289,12,Coordinate,X-offsets for extended sprites $02-$0D's clipping. 12 bytes and they're in that order.
2146,173301,12,Coordinate,Y-offsets for extended sprites $02-$0D's clipping. 12 bytes and they're in that order.
2147,173313,12,Coordinate,Width for extended sprites $02-$0D's clipping. 12 bytes and they're in that order. Value may not exceed $7F. The clipping 'stretches' from the sprite's origin to the right.
2148,173325,12,Coordinate,Height for extended sprites $02-$0D's clipping. 12 bytes and they're in that order. Value may not exceed $7F. The clipping 'stretches' from the sprite's origin to below.
2149,173337,46,Sprite subroutine (JSR),"""Get extended sprite clipping routine"", for extended sprites $02-$0D (for Mario and Yoshi's fireballs, see $02A547). It stores the clipping X displacement low byte in $04, X displacement high byte in $0A, Y displacement low byte in $05, Y displacement high byte in $0B, width in $06, height in $07 (so it's equivalent to the ""Get sprite clipping A"" routine).


Inputs:

- X: extended sprite slot

- Data Bank: $02


Y is modified by the routine, so it should be preserved before calling it if needed.Example code"
2150,173383,39,Sprite subroutine (JSR),"""Get Fireball clipping"" subroutine. Valid for Yoshi's and Mario's fireballs, Stores the clipping X displacement low byte to $00, the clipping X displacement high byte to $08, the clipping width (#0C) to $02, the clipping Y displacement low byte to $01, the clipping Y displacement high byte to $09, and the clipping height (#$13) to $03."
2151,173422,483,Sprite subroutine (JSR),Object contact subroutine for the player's fireballs.
2152,174034,37,Misc.,"Two sprites that are treated as ""special"" within the sprite header. The first list of sprites come first before the second."
2153,174076,482,Subroutine (JSR),The routine that loads sprites from the level data. Called every frame; $02A802 is also called a few times during level load.
2154,174472,1,ASM,Change from 10 to 80 to disable the green and red koopa shells from becoming yellow and blue after the special world is passed
2155,174475,1,Sprite number,1st sprite to change after beating Special Zone (Green Koopa)
2156,174479,1,Sprite number,What sprite Green Koopa becomes after beating Special World (Yellow Koopa)
2157,174481,1,Sprite number,2nd sprite to change after beating Special Zone (Red Koopa)
2158,174485,1,Sprite number,What Red Koopa becomes after beating Special World (Blue Koopa)
2159,174497,1,Misc.,Change to 80 to prevent off screen sprites from turning into silver coins when the silver POW is active (USE WITH $01AB28)
2160,174513,1,Sprite number,Sprite that all sprites change into when a silver POW is active. (Only works on offscreen sprites)  Take note that the sprite will use the same palette as the silver coin that is normally spawned
2161,174531,1,Palette,Palette to use for sprites changed by Silver P-Switch (offscreen sprites only)
2162,174564,39,Subroutine (JSL),"Routine to search for free spite slot within the standard sprite slot region (as defined by the sprite memory setting).

Jumping to $02A9E6 will alternatively start searching from the highest available slot minus whatever value is in $0E (e.g. if the standard range is 1-9 and $0E = 0x03, then it will search only slots 1-6). For a value of 0x02, jump to $02A9DE instead."
2163,174603,20,Coordinate,"Position of all Boos in the reappearing ghosts generator, frame 1. Format: $xy."
2164,174623,20,Coordinate,"Position of all Boos in the reappearing ghosts generator, frame 2. Format: $xy."
2165,174883,1,Sprite Misc.,[09] How many Boos are in the Boo ring (Minus 1).
2166,174894,1,Sprite number,[04] What sprite makes up the Boo Ring.
2167,175091,1,Misc.,Change from 3F to 7F to fix a bug where the sprite load (or permanently killed) status index 64 to 127 gets carried over to the next level.
2168,175128,1,Misc.,Change to 80 to fix the glitch where going through a pipe with a silver P-switch makes it act like a blue one.
2169,175333,10,Subroutine (JSL),"The ""give points"" routine.  It ends in RTL, but it JSLs to the main one.  To use this properly, A should contain one of the following values:


00 = 100

01 = 200

02 = 400

03 = 800

04 = 1000

05 = 2000

06 = 4000

07 = 8000

08 = 1up

09 = 2up

0A = 3up

0B = 5up (may glitch)"
2170,175343,69,Subroutine (JSL),"The main score sprite subroutine.  Load a value into A and JSL to it to give the player points.


00 = ?

01 = 10

02 = 20

03 = 40

04 = 80

05 = 100

06 = 200

07 = 400

08 = 800

09 = 1000

0A = 2000

0B = 4000

0C = 8000

0D = 1up

0E = 2up

0F = 3up

10 = 5up (may glitch)"
2171,175437,21,Sprite tilemap related,"Tiles used by Floating Point Notations, 1UPs, 2UPs, etc. 1st half."
2172,175459,21,Sprite tilemap related,"Tiles used by Floating Point Notations, 1UPs, 2UPs, etc. 2nd half"
2173,175480,17,Misc.,"Score added from score sprites, divided by 10 (low byte)"
2174,175497,17,Misc.,"Score added from score sprites, divided by 10 (high byte)"
2175,175514,1,Misc.,point rise speed
2176,175518,6,Sprite Misc.,OAM indexes for score sprites.
2177,175524,389,Sprite Misc.,"The main routine for all score sprites.  This handles graphics, giving lives/points/1-ups/coins, position updating, etc.

$02ADD9 is how many lives 1up Mushrooms give you.

$02ADDA is how many lives 2up gives you.

$02ADDB is how many lives 3up Moons give you.

$02ADDC is how many lives 5up gives you.

$02ADDD is how many coins you get from the (unused) x5, x10, x15, x20, and x25 coin sprites.

$02ADE2 is the attributes of 2up & 3up score sprites. The unused 5up sprites and coin sprites read past this table.

You can change $02AE03 to A9 xx EA to make 1up Mushrooms and 3up Moons give you xx lives."
2178,175833,1,Sprite Misc.,Score sprite and 1-UP text sprite YXPPCCCT. It is recommend you to change only priority and palette.
2179,175917,6,Sprite Misc.,"Initial angles of the 3 platforms in the 3 Grey Rotating Platforms sprite.


Format:

- $02AF2D (Low Bytes)

  - Platform 1 (Default: $00)

  - Platform 2 (Default: $AA)

  - Platform 3 (Default: $54)

- $02AF30 (High Bytes)

  - Platform 1 (Default: $00)

  - Platform 2 (Default: $00)

  - Platform 3 (Default: $01)"
2180,175938,1,Sprite number,How many platforms (minus 1) are in the 3 Grey Rotating Platforms sprite.
2181,175954,1,Sprite number,The sprite that the 3 platforms is made from
2182,176060,1,Sprite number,Sprite that the 'group of 5 eerie' is made of
2183,176196,1,Sound effect,SFX played by bowser fireball generator. Change to 00 to disable.
2184,176206,1,Sprite number,Sprite spawned by bowser fireball generator
2185,176255,1,Misc.,How often the Bullet Bill generator fires (sprite D5)
2186,176265,1,Sound effect,SFX played by bullet bill generator. Change to 00 to disable.
2187,176276,1,Sprite number,Sprite spawned by bullet bill generator
2188,176331,1,Sprite Misc.,"Number of bullets to spawn from the surrounded Bullet Bill generator, minus one. (Don't set this higher than 04, or the tables at $02B0FA-$02B114 will underflow.)"
2189,176332,1,Sprite Misc.,"Number of bullets to spawn from the diagonal Bullet Bill generator, minus one. (Setting this to 04-08 will make the diagonal generator also spawn the surrounded generator's bullets. Don't set this higher than 08.)"
2190,176345,1,Timer,Determines how often the surrounded/diagonal Bullet Bill generators fire. Multiply this by 2 to get the delay in frames.
2191,176352,1,Sound effect,SFX played by surrounded/diagonal Bullet Bill generators. Change to 00 to disable.
2192,176352,1,Sound effect,SFX played by Diagonal Bullet Bill generator. Change to 00 to disable.
2193,176378,5,Sprite Misc.,"Initial X position, within screen, of bullets spawned by surrounded Bullet Bill generator."
2194,176383,4,Sprite Misc.,"Initial X position, within screen, of bullets spawned by diagonal Bullet Bill generator."
2195,176387,5,Sprite Misc.,"Initial Y position, within screen, of bullets spawned by surrounded Bullet Bill generator."
2196,176392,4,Sprite Misc.,"Initial Y position, within screen, of bullets spawned by diagonal Bullet Bill generator."
2197,176396,5,Sprite Misc.,"Direction of bullets spawned by surrounded Bullet Bill generator.


00 = right

01 = left

02 = up

03 = down

04 = up-right

05 = down-right

06 = down-left

07 = up-left"
2198,176401,4,Sprite Misc.,"Direction of bullets spawned by diagonal Bullet Bill generator.


00 = right

01 = left

02 = up

03 = down

04 = up-right

05 = down-right

06 = down-left

07 = up-left"
2199,176412,1,Sprite number,Sprite spawned by the surrounded/diagonal Bullet Bill generators.
2200,176478,1,Misc.,"Frequency of fish jumping up with the flying fish generator (set more bits to decrease the frequency, e.g. $5F, $FF)"
2201,176494,1,Sprite number,Sprite spawned by Jumping Fish generator
2202,176591,1,Sprite number,Sprite spawned by Super koopa generator
2203,176666,1,Sprite number,Sprite spawned by bubble generator
2204,176782,1,Sprite number,Sprite spawned by Dolphin generator
2205,176873,1,Sprite number,Sprite spawned by eerie generator
2206,177137,1,Sprite number,Sprite spawned by Torpedo Ted generator
2207,177198,1,Sprite number,Object that appears before Torpedo Ted is spawned
2208,177260,1,Timer,How often Bullet Bill shooters fire
2209,177301,2,ASM,Replace with 80 0A to make the Bullet Bill Shooter keep shooting even if Mario is standing next to the generator.
2210,177320,1,Sound effect,SFX played by Bullet Bill Shooter
2211,177330,1,Sprite number,Sprite Spawned by bullet bill shooter
2212,177434,12,Sprite subroutine (JSR),Updates a bounce sprite's Y position without gravity (actually just changes the sprite index and JSRs to $02B526).
2213,177446,46,Sprite subroutine (JSR),Updates a bounce sprite's X position without gravity.
2214,177492,12,Sprite subroutine (JSR),The subroutine that updates an extended sprite's X position (without gravity).
2215,177504,46,Sprite subroutine (JSR),The subroutine that updates an extended sprite's Y position (without gravity).
2216,177550,46,Sprite subroutine (JSR),The subroutine that updates the Y position of the spinning coin coming from a ? block.
2217,177596,12,Sprite subroutine (JSR),"The X speed subroutine for minor extended sprites.  Actually just adds 12 to the sprite index and JSRs to the Y speed subroutine, just like the equivalent subroutine for normal sprites."
2218,177608,36,Sprite subroutine (JSR),The Y speed subroutine for minor extended sprites.
2219,177644,68,Empty,Unused data.
2220,177759,4,Misc.,X coordinates of Pokey animation
2221,177763,2,Misc.,"Pokey's X speed (right, left)"
2222,177805,1,Sprite tilemap related,Pokey's head after being eaten
2223,177809,1,Sprite tilemap related,Pokey's Body after being eaten
2224,178060,1,Sprite tilemap related,Pokey's Body Tilemap
2225,178061,1,ASM,"Change to 90 and Pokey's head will be his body, and the other way round"
2226,178064,1,Sprite tilemap related,Pokey's Head Tilemap
2227,178069,1,Sprite tilemap related,pokey's palette/gfx page
2228,178360,2,Sprite Misc.,"Max Speed Torpedo Ted can go. (Format = Right, Left)


The Left value must be over $7F while the Right value must be below $80."
2229,178362,2,Sprite Misc.,"How fast Torpedo Ted gains speed/accelerates until he reaches max speed. (Format = Right, Left)


The Left value must be over $7F while the Right value must be below $80."
2230,178367,1,Sprite Misc.,"How many frames torpedo ted waits until he gains more speed.


(This value is AND'd with the frame counter)"
2231,178477,1,Sprite tilemap related,Tilemap: Torpedo Ted's face
2232,178487,1,Sprite tilemap related,Tilemap:  Torpedo Ted's Propeller Frame 1
2233,178495,1,Sprite tilemap related,Tilemap:  Torpedo Ted's Propeller Frame 2
2234,178499,1,Sprite tilemap related,Tilemap:  Torpedo Ted's Propeller Frame 3
2235,178596,25,Sprite subroutine (JSL),"This generates a Map16 tile at the position of the sprite currently being processed.  It can be accessed with a JSL, and A should be set to the value of $9C you wish to use."
2236,178621,28,Subroutine (JSL),A subroutine that turns all sprites on screen into silver coins. Called when pressing a silver P switch.
2237,178650,1,Sprite number,Sprite to use for those changed by Silver P-Switch  (the ones that change while on the screen)
2238,178671,1,Palette,Palette to use for sprites changed by Silver P-Switch (on screen sprites only)
2239,178856,1,Misc.,Lowest tile # that acts as a berry with sticking out the tongue
2240,178860,1,Misc.,Highest tile # that acts as a berry plus one with sticking out the tongue
2241,178886,1,Sprite number,Sprite that the berries are made from when swallowed
2242,178947,1,Misc.,Tile spawned from eating a berry (using tongue). Corresponds to a value in $7E:009C.
2243,178967,4,Sprite tilemap related,Sprite tilemap: Yoshi Wings
2244,178971,4,Sprite tilemap related,Palette/Gfx page/Priority/Flip of Yoshi Wing tiles
2245,178975,4,Sprite tilemap related,Size of Yoshi Wing tiles
2246,178979,101,Sprite subroutine (JSL),Subroutine for drawing and animating Yoshi's wings.
2247,179214,6,Sprite tilemap related,Horizontal Dolphin Tilemap
2248,179623,12,Sprite Misc.,"Code that handles erasing Spike Tops that go offscreen vertically. Set to [80 0A] (BRA $0A) to disable this behavior, however keep in mind that this means the sprites will be able to walk around the underside of your level."
2249,179806,4,Sprite tilemap related,"Change from ""C9 02 D0 17"" to ""C9 01 F0 17"" to make Fuzzies/Sparkies to only use the latter's tilemap in the castle (01) sprite tileset, as opposed to using the sparky's tilemap in every sprite tileset apart from the mushroom (02)."
2250,179819,1,Sprite tilemap related,Ground-guided Fuzzball Tilemap
2251,179834,1,Sprite tilemap related,Sparky Tilemap
2252,179861,8,Sprite tilemap related,Hothead Tilemap
2253,179979,1,Sprite tilemap related,Hothead's eyes frame 1
2254,179986,1,Sprite tilemap related,Hothead's eyes frame 2
2255,180051,5,Sprite tilemap related,"Urchin YXPPCCCT properties, eyes and body. Order: Eyes, upper left body part, upper right, lower left, lower right."
2256,180056,4,Sprite tilemap related,Urchin's Body Tilemap
2257,180131,1,Sprite tilemap related,Urchin's eyes frame 1
2258,180137,1,Sprite tilemap related,Urchin's eyes frame 2
2259,180431,87,Subroutine (JSL),(Unused) Z tile generation (Rip Van Fish Z tiles).
2260,180441,77,Sprite subroutine (JSL),Rip Van Fish Z tiles generation routine
2261,180646,1,Sprite number,Sprite Diggin' Chuck unearths
2262,180895,1,Misc.,"1st type of block Chargin' Chuck can smash through, -0x100 (Throw Block)"
2263,180899,1,Misc.,"2nd type of block Chuck can smash through, -0x100 (Turn Block)"
2264,180926,1,Misc.,What top row of blocks become when Chuck smashes through them
2265,180955,1,Misc.,What bottom row of blocks become when Chuck smashes through them
2266,181122,1,Sound effect,Whistling Chuck Sound Effect.
2267,181171,4,Sprite Misc.,"Timers for Pitchin' Chuck's throwing.  This table is indexed by the initial sprite X position.  The timers themselves are formatted thus: t = $3F + $20n, where t is the timer value and n is the number of baseballs thrown in a row.  So the sprite will throw 2, 4, 6, or 5 baseballs depending on its X position.  However, this applies only when it is on the ground; if it is in the air, then the timing is different."
2268,181175,4,Sprite Misc.,Pitchin' Chuck's animation frames when throwing baseballs while on the ground.
2269,181179,16,Sprite Misc.,Pitchin' Chuck's animation frames when throwing baseballs while jumping.
2270,181344,2,Misc.,"Starting X-coordinate of baseball when thrown by Chuck (facing right, facing left)"
2271,181348,2,Misc.,"X speed of baseball when thrown by Chuck (right, left)"
2272,181370,1,Sprite number,Object that Pitchin' Chuck pitches
2273,181497,1,Sound effect,SFX played by Clappin' Chuck's clap.
2274,181537,1,Sprite physics,[F0] Speed of Clappin' Chuck's idle bounce. Negative values closer to $80 result in a higher bounce. Change to a positive value ($00-$7F) to disable Clappin' Chuck's idle bouncing.
2275,181552,1,Sprite physics,[C0] Speed of Clappin' Chuck's clapping jump. Negative values closer to $80 result in a higher jump. Change to a positive value ($00-$7F) to disable Clappin' Chuck's clapping jump.
2276,181559,1,Sound effect,SFX played by Bouncin' and Clappin' Chuck's jump.
2277,181679,1,Sound effect,SFX played by Splitin' Chuck
2278,181704,1,Sprite number,Sprite spawned by Splittin' Chuck
2279,182024,1,Sound effect,Running Chuck sound
2280,182206,1,Misc.,"Determines the number of points received for defeating a Chuck by stomping or with a star. See $02ACE5 for a list of possible values.


[Note: That list at $02ACE5 needs to have FB = Nothing, FC = 10, FD = 20, FE = 40, and FF = 80 added to it.]"
2281,182242,6,ASM,change from [B5 C2 C9 03 F0 27] to [EA EA EA EA EA EA] to remove the stomp immunity chucks get briefly when taking a stomp.
2282,182248,1,Misc.,Set to BD for unlimited Chargin Chuck stomping hp
2283,182255,1,Misc.,Chargin Chuck stomping hp
2284,182263,1,Sound effect,Hitting Chuck sound
2285,182398,7,Sprite tilemap related,Sprite tilemap: Chuck Head(All)
2286,182667,51,Sprite tilemap related,Sprite tilemap: Chuck Body(All)
2287,182935,2,Sprite tilemap related,"Clappin' Chuck's hand tiles (raised, clapping)"
2288,183034,2,Palette,[47 07] Change to 40 00 to be able to change the palette of Chargin' Chucks arm with Tweaker/etc. (USE WITH $02CB2E)
2289,183063,1,Sprite tilemap related,Tile used by Chargin' Chuck's arm
2290,183086,1,Palette,"[64] Change to 08 to be able to change the palette of Chargin' Chucks arm with Tweaker/etc.

(USE WITH $02CAFA)"
2291,183164,1,Sprite tilemap related,Tile to use for the baseball when it's in Pitchin' Chuck's hand
2292,183169,1,Palette,Palette/GFX page for baseball when it's in Pitchin' Chuck's hand
2293,183185,1,Sprite tilemap related,Change from [04] to [0C] to fix a tilemap error in part of the Diggin' Chuck's dig animation that gives him a dislocated shoulder while facing left.
2294,183195,3,Sprite tilemap related,Diggin' Chuck's Shoulder and Shovel Tiles
2295,183473,4,Misc.,Unused cage wings: X offsets
2296,183477,4,Misc.,Unused cage wings: Y offsets
2297,183548,1,Sprite tilemap related,"Unused cage wings: Extended wing, top tile"
2298,183552,1,Sprite tilemap related,"Unused cage wings: Closed wing, top tile"
2299,183557,1,Sprite tilemap related,"Unused cage wings: Extended wing, bottom tile"
2300,183561,1,Sprite tilemap related,"Unused cage wings: Closed wing, bottom tile"
2301,183566,1,Sprite tilemap related,"Unused cage wings: Attribute byte #1 (X flip, Y flip, priority, palette, MSB of tile num.)"
2302,183578,1,Sprite tilemap related,"Unused cage wings: Attribute byte #2 (size, MSB of X pos.)"
2303,183637,4,Palette,"YXPPCCCT data for the (flattened) switch palaces (level), indexed by type. Order is green, yellow, blue, red."
2304,183649,1,Misc.,Tile spawned from stepping on big ! switch
2305,184036,1,Misc.,How many pieces make up the pea bouncer
2306,184108,1,Sprite tilemap related,Tile of pea bouncer
2307,184115,1,Sprite tilemap related,Attributes of pea bouncer tile
2308,184318,5,Sprite physics,Bounciness of each part of pea bouncer
2309,184771,1,Misc.,Lowest tile # that acts as a berry without sticking out the tongue
2310,184775,1,Misc.,Highest tile # that acts as a berry plus one without sticking out the tongue
2311,184840,1,Misc.,Tile spawned from eating a berry (w/o using tongue). Corresponds to a value in $7E:009C.
2312,184850,1,Sprite physics,"[10] {+16} Horizontal speed limit when pressing Right from the Control Pad, when Mario uses the P-balloon or rides the Lakitu cloud.


The speed is a signed integer. Positive speeds (00..7F) go right. High speeds might cause glitches, like allowing Mario to fly inside solid blocks."
2313,184851,1,Sprite physics,"[F0] {-16} Horizontal speed limit when pressing Left from the Control Pad, when Mario uses the P-balloon or rides the Lakitu cloud.


The speed is a signed integer. Negative values (80..FF) go left."
2314,184904,1,Sprite physics,"[00] {0} Vertical speed when releasing Up and Down from the Control Pad, while Mario rides the Lakitu cloud.


This is a signed integer. Positive speeds (01..7F) go down. Negative speeds (80..FF) go up.


After using $02:D248, $02:D256 or $02:D25C, the game adds a slight, varying downward speed to the Lakitu cloud. So if you leave [00] in $02:D248, then the cloud will sink slightly while Mario rides the cloud."
2315,184918,1,Sprite physics,"[10] {+16} Vertical speed limit when pressing Down from the Control Pad, while Mario rides the Lakitu cloud."
2316,184924,1,Sprite physics,"[F0] {-16} Vertical speed limit when pressing Up from the Control Pad, while Mario rides the Lakitu cloud."
2317,184928,1,Sprite physics,"[F8] {-8} Vertical speed when releasing Up and Down from the Control Pad, while Mario uses the P-balloon. Change to [00] {0}, to prevent that Mario floats up gradually, so that Mario can float in place."
2318,184936,1,Sprite physics,"[F0] {-16} Vertical speed limit when pressing Up from the Control Pad, while Mario uses the P-balloon."
2319,184942,1,Sprite physics,"[08] {+8} Vertical speed limit when pressing Down from the Control Pad, while Mario uses the P-balloon."
2320,185377,1,ASM,Change from 60 to 6B to fix the glitch where trying to disable the layer 3 smasher with generator D2 will cause the game to crash.
2321,185630,97,Empty,Unused data.
2322,185753,1,Misc.,Horizontal speed of Banzai Bill
2323,185764,16,Sprite tilemap related,X offsets of Banzai Bill's tiles.
2324,185780,16,Sprite tilemap related,Y offsets of Banzai Bill's tiles.
2325,185796,16,Sprite tilemap related,TTTTTTTT of Banzai Bill's tiles.
2326,185812,16,Sprite tilemap related,YXPPCCCT of Banzai Bill's tiles.
2327,186276,1,Sprite tilemap related,Tilemap:  Ball 'n' Chain's chainlink
2328,186282,1,Sprite tilemap related,Tilemap:  Chain used by platform (Sprites A3 and E0)
2329,186303,1,Sprite tilemap related,Palette of chain (Ball 'n' Chain & rotating grey platform)
2330,186368,4,Sprite tilemap related,"Tilemap:  Ball 'n' Chain's Spiked Ball (Changing this will freeze the game!)

It's actually a routine which is used to waste time (6 NOPs + RTS) for the math registers, but Nintendo uses it for the tilemap, too. A typical example of executable tables."
2331,186375,4,Sprite tilemap related,"X Offsets of Ball n' Chain's Ball tiles.


Format:

- Top Left ($F8)

- Top Right ($08)

- Bottom Left ($F8)

- Bottom Right ($08)"
2332,186379,4,Sprite tilemap related,"Y Offsets of Ball n' Chain's Ball tiles.


Format:

- Top Left ($F8)

- Top Right ($F8)

- Bottom Left ($08)

- Bottom Right ($08)"
2333,186383,4,Sprite tilemap related,"Ball n' Chain's Ball YXPPCCCT Properties.


Format:

- Top Left ($33)

- Top Right ($73)

- Bottom Left ($B3)

- Bottom Right ($F3)"
2334,186412,2,Pointer,Change from 00 D8 to E7 FF in order to move the location of Ball 'n' Chain's tilemap to address $02FFE7.
2335,186436,4,Sprite tilemap related,Wooden Platform on Chain Tilemap (Sprites A3 and E0)
2336,186467,1,Sprite tilemap related,Palette of rotating grey platform
2337,186529,8,Sprite tilemap related,"Bubble Sprites Tile Table (2 animation frames with 2 bytes in them. Order: Goomba, Bob-Omb, Cheep-Cheep, Mushroom)"
2338,186537,16,Sprite tilemap related,"Palette/GFX Page Table of Sprites in bubbles (Order: Goomba, Bob-Omb, Cheep-Cheep, Mushroom)"
2339,186649,1,Sound effect,Bubble pop sound
2340,186785,4,Sprite number,"Sprites spawned from Bubbles (Goomba, Bob-omb, Cheep-Cheep, Mushroom)"
2341,186789,15,Sprite tilemap related,"X Placement of Bubble Tiles, 3 animation frames, each 5 bytes"
2342,186804,15,Sprite tilemap related,"Y Placement of Bubble Tiles, 3 animation frames, each 5 bytes"
2343,186819,5,Sprite tilemap related,Bubble Tile Table
2344,186824,5,Sprite tilemap related,Palette/GFX Page of Bubble Tiles
2345,186829,5,Sprite tilemap related,Bubble Tile Size Table
2346,186976,4,Sprite Misc.,[C9 02 D0 0A] (CMP #$02 BNE $0A) Change to [C9 08 B0 0A] (CMP #$08 BCS $0A) to fix the bug where hammer brothers will throw hammers if tossed into lava.
2347,186983,7,Misc.,How often Amazing Flyin' Hammer Brother throws hammers on each submap.
2348,187022,1,Sprite Misc.,Submap in which the Hammer Bro. throws hammers half as fast. By default: 00 (main map).
2349,187028,3,ASM,Set to EA EA EA to make Amazing Flyin' Hammer Brothers stop turning around.
2350,187076,1,Sprite number,Extended Sprite thrown by Amazing Flyin' Hammer Brother
2351,187121,8,Sprite tilemap related,Sprite tilemap: Amazing Flyin' Hammer Brother
2352,187167,1,Palette,"Amazing Flyin' Hammer Brothers palette (37 by default, change the sprite's palette by changing the second digit - ""7"" - to a number 0-F)"
2353,187351,3,ASM,Set to EA EA EA to disable Amazing Flyin' Hammer Brothers platform vertical movement
2354,187354,3,ASM,Set to EA EA EA to disable Amazing Flyin' Hammer Brothers platform horizontal movement
2355,187423,8,Sprite tilemap related,Sprite tilemap: Amazing Flyin' Hammer Brother Platform
2356,187431,8,Sprite tilemap related,Palette/GFX Page of Amazing Flyin' Hammer Brother Platform
2357,187749,1,Sound effect,SFX played by Sumo Brother
2358,187798,1,Sprite number,Sprite spawned by Sumo Brother
2359,187918,8,Sprite tilemap related,"Sumo Bros Tilemap (Head, Body Arms Up, Head, Body Arms Down)"
2360,187930,4,Sprite tilemap related,"Sumo Bros Tilemap (Head, Head, Body Stomp)"
2361,187934,8,Sprite tilemap related,"Sumo Bros Tilemap (Head, Head, Body Lift Leg, Head Head, Body Lift Leg)"
2362,188037,1,Sprite tilemap related,Sumo Bros' palette/GFX page
2363,188086,1,Misc.,Y speed of Sumo Bros' lightning bolt
2364,188424,3,Sprite tilemap related,Volcano Lotus:  Top Tiles
2365,188434,1,Sprite tilemap related,Volcano Lotus:  Bottom
2366,188502,1,Sprite tilemap related,Palette/gfx page of Frame 3 of Volcano Lotus's top
2367,188506,1,Sprite tilemap related,Palette/gfx page of Frames 1 and 2 of Volcano Lotus's top
2368,188561,1,Sprite number,Extended Sprite used by Volcano Lotus
2369,188686,1,Palette,Palette of Jumping Piranha Plant leaves
2370,188878,1,Sprite number,The 2 objects that the fire-shooting Piranha Plant spits
2371,189142,1,Misc.,Tile spawned by Directional Coin sprite
2372,189298,16,Sprite tilemap related,Large Green Bubble Tilemap
2373,189728,4,Misc.,"Tiles left behind by mushroom scale platforms (in order of left platform sinking; rising, right platform rising; sinking)"
2374,189849,1,Sprite tilemap related,Mushroom Scale Platform Tile (mirrored for right side)
2375,189895,1,Sprite physics,Rightward speed of the moving Ghost House hole.
2376,189904,1,Sprite physics,Leftward speed of the moving Ghost House hole.
2377,190058,4,Sprite tilemap related,Ghost House Moving Hole Tilemap
2378,190120,1,Sprite tilemap related,Fishin' Lakitu's rod
2379,190125,1,Sprite tilemap related,Tile used by Fishin' Lakitu's 1up bait
2380,190130,1,Sprite tilemap related,Fishing Pole's palette
2381,190135,1,Sprite tilemap related,1up Bait Palette
2382,190215,1,Sprite tilemap related,Tile used by line on Fishin' Lakitu's rod
2383,190220,1,Sprite tilemap related,Fishing Line Palette
2384,190525,8,Misc.,"Tiles left behind by the left (first 4 bytes) and the right (next 4 bytes) side of the Growing/Shrinking Pipe, in the format of $7E009C. The order of the bytes corresponds to the pipe waiting at the bottom, growing, waiting at the top, and shrinking."
2385,190746,1,Sprite tilemap related,Left tile from the Growing/shrinking pipe end
2386,190751,1,Sprite tilemap related,Right tile from the Growing/shrinking pipe end
2387,190875,1,Sprite physics,Rising speed of Pipe Lakitu
2388,190947,1,Sprite physics,Sinking speed of Pipe Lakitu
2389,190950,6,Sprite tilemap related,Pipe-Dwelling Lakitu Tilemap
2390,191003,1,Sprite tilemap related,YXPPCCCT properties (Palette/GFX page/Properties) of Pipe Lakitu.
2391,191218,4,ASM,Change to EA EA EA EA to stop Super Koopas from spawning feathers. (In conjunction with $02EB19)
2392,191230,1,Sprite number,Sprite spawned by Super Koopa when stomped (feather)
2393,191257,4,ASM,Change to EA EA EA EA to prevent Super Koopas from spawning feathers (In conjuction with $02EAF2)
2394,191602,28,Sprite tilemap related,Sprite tilemap: Super koopa
2395,191638,36,Sprite tilemap related,"Partial data for the YXPPCCCT of Super Koopa. Bit 1 is used to determine whether the tile is part of the Koopa (0) or cape (1). If it is a cape tile, then the CCC bits should not be used; edit $02ED39 and $02ED40 instead.


Edit both $02ECA9 and $02ECAD from 00 to 01 to fix garbage tiles when a stomped left-flying Super Koopa is falling down."
2396,191801,2,Palette,"Partial data for the YXPPCCCT of the flashing Super Koopa's cape. Specifically, these are the CCC bits (palette)."
2397,191808,1,Palette,"Partial data of the YXPPCCCT for the red/yellow Super Koopa's cape. Specificially, these are the CCC bits (palette) of the yellow cape; the red cape comes from this times 2."
2398,191903,1,Sprite number,Sprite that the 'group of floating skulls' is made from
2399,192004,1,Sprite tilemap related,Floating Skull tile (frame 1)
2400,192008,1,Sprite tilemap related,Floating Skull tile (frame 2)
2401,192098,1,Sprite physics,[0C] Speed of the floating skulls.
2402,192278,1,Sprite physics,X-speed of the coin game cloud (When Yoshi eats two pink berries)
2403,192302,1,Sprite tilemap related,What tile the coin game cloud uses
2404,192329,1,Sprite tilemap related,X-position of the face on the coin game cloud
2405,192337,1,Sprite tilemap related,Y-position of the coin game cloud face
2406,192342,1,Sprite tilemap related,Tile to use for the face of the cloud game.
2407,192347,1,Sprite tilemap related,Cloud's face palette
2408,192385,1,Sprite number,Sprite that is generated when all of the Coin Game Cloud coins are collected
2409,192445,1,Sprite number,Object that the Coin Game Cloud drops
2410,192561,4,Sprite physics,Wiggler speed. First 2 bytes: normal speed. Next 2: mad speed
2411,192589,1,Palette,The palette used by Wiggler when he is angry.  (Default: 08.) YXPPCCCT.
2412,192593,1,Misc.,"Wiggler's Palette cycling sequence

00=Palette 00

02=Palettes 00,02

04=Palettes 00,04

06=Palettes 00,02,04,06

08=Palettes 00,08

0A=Palettes 00,02,08,0A

0C=Palettes 00,04,08,0C

0E=All palettes"
2413,192600,1,Misc.,Result of Wiggler's Palette change?
2414,192780,4,Sprite tilemap related,Wiggler's Body Tilemap
2415,192878,1,Sprite tilemap related,Wiggler's Head
2416,192922,1,Misc.,How many segments Wiggler has
2417,192945,2,Pointer,Pointer to use for X placement of Wiggler's angry eyes tile
2418,192958,1,Sprite tilemap related,Wiggler's angry eyes tile
2419,192991,1,Misc.,X-coord of Wiggler's flower
2420,192996,1,Sprite tilemap related,Tile used by Wiggler's Flower (when on its head)
2421,193006,1,Palette,Palette of Wiggler's flower
2422,193015,1,Misc.,Size of Wiggler's flower/angry eyes tile
2423,193132,1,Sound effect,SFX that comes up when Mario stomps a Wiggler
2424,193235,2,Misc.,"X placement of flower tile on Wiggler's head (1 byte facing right, 1 byte facing left)"
2425,193237,2,Misc.,"X placement of Wiggler's angry eyes tile (1 byte facing right, 1 byte facing left)"
2426,193251,1,Sprite number,Object that falls off of Wiggler when stomped
2427,193364,1,Sprite physics,"Y position that Yoshi's House birds (sprite 8A) fall to after hopping. This should be set to 8 pixels above the height of the platform the birds ""stand"" on."
2428,193499,5,Sprite tilemap related,Yoshi's House Birds Tilemap
2429,193504,2,Sprite tilemap related,"Flip of birds' tiles (right, left)"
2430,193506,4,Palette,Palettes of hopping birds
2431,193575,1,Sprite tilemap related,"[$00] The sprite size of the birds on Yoshi's House.


Format:

- $00 = 8x8

- $02 = 16x16"
2432,193711,1,Sprite tilemap related,Tile used by Smoke from Yoshi's House fireplace
2433,193767,4,Sprite tilemap related,Tilemap of flame in Yoshi's House fireplace
2434,193779,1,Misc.,X-coords of flame tiles
2435,193787,1,Misc.,Y-coord of flame top
2436,193792,1,Misc.,Y-coord of flame bottom
2437,193833,1,Sprite tilemap related,Fireplace flame palette
2438,193876,1,Sprite number,Sprite spawned from the fireplace that the Side Exit Enable sprite uses
2439,193980,10,Sprite tilemap related,Ghost House Exit Door tilemap
2440,194089,8,Sprite tilemap related,No Yoshi Signpost Tilemap
2441,194337,32,Sprite tilemap related,Ghost House Doors Tilemap
2442,194597,18,Pointer,16-bit pointer to cluster sprites.
2443,194820,8,Sprite tilemap related,Sumo Bros' Flame Tilemap
2444,194959,1,Sprite tilemap related,Sumo Bros' Flame palette/gfx page
2445,195086,4,Sprite tilemap related,Sprite tilemap: Castle BG Flame
2446,195090,4,Sprite tilemap related,YXPPCCCT properties for the Castle BG Flame
2447,195204,20,Coordinate,"Ten 16bit values, telling where on the circle the Boo Ring ghosts are. #$0200 is 360°."
2448,195224,291,Sprite Misc.,"The code for cluster sprite 04, the Boo from a Boo ring.

$02FB39 is radius of Boo rings along the X-axis.

$02FB5C is radius of Boo rings along the Y-axis."
2449,195519,8,Sprite tilemap related,"Boo Ring Tilemap (used by Sprites E2, E3, and generators E1 and E5)"
2450,196024,4,Sprite tilemap related,Swooper Death Bat tilemap (change 4th byte to E8 to correct graphics)
2451,196190,1,Sprite tilemap related,Tile to use for bonus game 1-ups.
2452,196195,1,Sprite tilemap related,Tile properties of bonus game 1-ups.
2453,196209,84,Sprite subroutine (JSR),Cluster sprite/player interaction routine.  This routine assumes that the cluster sprite is approximately 16x16.
2454,196432,20,Sprite tilemap related,"OAM indexes of cluster sprites.  Apparently can overwrite the coin sprites from blocks, sparkles, item box, and fireballs."
2455,196452,8,Sprite tilemap related,OAM indexes of the 1-Ups from the bonus game.
2456,196504,11,Sprite subroutine (JSR),"""Update cluster sprite X position without gravity"" subroutine."
2457,196515,46,Sprite subroutine (JSR),"""Update cluster sprite Y position without gravity"" subroutine."
2458,196578,30,Empty,Empty on default. Can be used for various purposes.
2459,229528,1,Timer,How long the fadeout is on the screen before it disappears. (Big Boo Boss)
2460,229533,1,Music,Music played after Big Boo Boss is defeated.
2461,229582,1,Timer,How long it takes for Big Boo Boss to appear. (Stalling)
2462,229595,1,Timer,How long it takes for Big Boo Boss to appear. (appearing stage)
2463,229610,1,Sound effect,Big Boo Boss appear sound effect.
2464,229794,1,Misc.,Big Boo Boss HP
2465,229855,1,Sound effect,Big Boo boss falling sound effect. (Big Boo beaten)
2466,229877,68,Subroutine (JSR),"Big Boo's ""Hit with sprite"" subroutine. JSR every frame to it to have your boss have functionality with thrown items.

$038234 is the sound made by Big Boo Boss when it is hit."
2467,230016,1,Sprite tilemap related,X position of big boo's eyes in the normal frame
2468,230017,1,Sprite tilemap related,X position of big boo's mouth in the normal frame
2469,230018,2,Sprite tilemap related,X position of big boo's arms in normal frame
2470,230020,16,Sprite tilemap related,X Position of the 16 tiles of big boo's body in the normal frame
2471,230036,1,Sprite tilemap related,X position of big boo's eyes in turning frame 1
2472,230037,1,Sprite tilemap related,X position of big boo's mouth in turning frame 1
2473,230038,2,Sprite tilemap related,X position of big boo's arms in turning frame 1
2474,230040,16,Sprite tilemap related,X Position of the 16 tiles of big boo's body in turning frame 1
2475,230056,1,Sprite tilemap related,X position of big boo's eyes in turning frame 2
2476,230057,1,Sprite tilemap related,X position of big boo's mouth in turning frame 2
2477,230058,2,Sprite tilemap related,X position of big boo's arms in turning frame 2
2478,230060,16,Sprite tilemap related,X Position of the 16 tiles of big boo's body in turning frame 2
2479,230076,2,Sprite tilemap related,X position of big boo's arms in the hiding frame
2480,230078,1,Sprite tilemap related,X position of Big boo's eyes in the hiding frame
2481,230079,1,Sprite tilemap related,X position of Big boo's mouth in the hiding frame
2482,230080,16,Sprite tilemap related,X position of the 16 body tiles of Big boo in the hiding frame
2483,230096,1,Sprite tilemap related,"Y position of Big boo's eyes in normal, turning 1 and turning 2 frames"
2484,230097,1,Sprite tilemap related,"Y position of Big boo's mouth in normal, turning 1 and turning 2 frames"
2485,230098,2,Sprite tilemap related,"Y position of Big boo's arms in normal, turning 1 and turning 2 frames"
2486,230100,16,Sprite tilemap related,"Y position of the 16 tiles of Big boo's body in normal, turning 1 and turning 2 frames"
2487,230116,2,Sprite tilemap related,Y position of big boo's arms in hiding frame
2488,230118,1,Sprite tilemap related,Y position of big boo's eyes in hiding frame
2489,230119,1,Sprite tilemap related,Y position of Big boo's mouth in hiding frame
2490,230120,16,Sprite tilemap related,Y position of the 16 tiles of big boo's body in hiding frame
2491,230136,80,Sprite tilemap related,Sprite Tilemap: Big Boo
2492,230216,80,Sprite tilemap related,"The flip of each tile in the tilemap of Big Boo (00 is no flip, 40 is horizontal flip, 80 is vertical flip, C0 is horizontal + vertical flip)"
2493,230506,1,Sprite physics,Max falling Y speed for the grey falling platform.
2494,230511,1,Sprite physics,How much the grey falling platform accelerates each frame.
2495,230542,4,Sprite tilemap related,Sprite tilemap: Falling Grey Platform
2496,230573,1,Sprite tilemap related,Falling Grey Platform's Palette
2497,230621,1,Sprite tilemap related,Tilemap: Blurp Frame 1
2498,230625,1,Sprite tilemap related,Tilemap:  Blurp Frame 2
2499,230701,2,Sprite physics,Horizontal speed of the Porcu-Puffer fish
2500,230784,1,ASM,Change 94 to 60 to make the Porcu-Puffer fish go in a straight line and also float on air.
2501,230803,8,Sprite tilemap related,Sprite tilemap: Porcu-Puffer
2502,230900,2,Sprite physics,"[08 F8] Y speeds of the Flying grey turnblocks (Sprite C1). First entry is downwards speed, second entry is upwards speed. Setting the upwards speed faster than $D8 ($28 as absolute value) is prone to causing Mario to clip through the turnblocks when jumping.


Keep in mind that if the turnblocks are set to go up first, these speeds are inverted."
2503,231023,1,ASM,Change C8 to 60 to fix a bug where sprite C1 (Flying Grey Turnblocks) corrupts $1602 if sprite slot 0 is occupied and only one sprite C1 is present.
2504,231050,10,Sprite tilemap related,Sprite tilemap: Forest Secret Area Platform
2505,231220,3,Sprite tilemap related,Sprite tilemap: Sinking Lava Platform
2506,231278,1,Sprite physics,Mega Mole X speed (right)
2507,231279,1,Sprite physics,Mega Mole X speed (left)
2508,231395,1,Sprite physics,"[$D8] Y offset between Mario and a Mega Mole at which the sprite will hurt Mario rather than making him stand on it. Change to higher values to make it less likely for Mario to clip through the sprite and take damage when he's riding a mole and it has an upwards speed. Using $DC seems to fix this for Y speeds up $B0, using $DE seems to fix it for Y speeds up to $90 and using $DF seems to fix it for any upwards speed.

Note that this will also make the sprite's hitbox a bit more forgiving (less likely to hurt Mario).

Also be aware that it's still possible to clip into a Mega Mole if Mario has upwards speed, due to the code at $0387E6 (it's required to allow Mario to jump off of the Mega Mole)."
2509,231462,4,Misc.,[22 B7 F5 00] Change to [EA EA EA EA] to make Mega Mole not hurt Mario.
2510,231479,8,Sprite tilemap related,Sprite tilemap: Mega Mole
2511,231497,3,Sprite tilemap related,"Animation speed of Mega Mole. Change a 4A to EA to speed it up, and a EA to 4A to slow it down."
2512,231554,1,Sprite tilemap related,Palette to use for Mega Mole
2513,231584,3,Sprite tilemap related,Swooper Bat Tilemap
2514,231676,1,Sprite physics,Initial vertical speed of Swooper bat. This affects how far down it goes from its starting position.
2515,231680,1,Sound effect,Swooper Sound Effect.
2516,231730,3,ASM,Change to EA EA EA to disable Mega Mole animation
2517,231799,1,Sprite number,Sprite that the sliding koopa turns into after touching the ground
2518,231812,1,Sprite tilemap related,Tilemap of blue shellless koopa sliding down a hill
2519,231816,1,Sprite tilemap related,Tilemap of blue shellless koopa after sliding
2520,232155,1,Sound effect,SFX played by Bowser Statue
2521,232165,1,Sprite number,Sprite spawned by Bowser statue
2522,232238,6,Sprite tilemap related,Sprite tilemap: Bowser Statue(Both)
2523,232247,6,Palette,"Bowser Statue Properties. This will get or'd with the sprite's palette, which means it has the most effect on the jumping Bowser statue."
2524,232716,6,Sprite tilemap related,"Relative X position of the diagonal platform tiles (Carrot Top Lift). First half is used for sprite B7, second half is used for sprite B8."
2525,232722,6,Sprite tilemap related,"Relative Y position of the diagonal platform tiles (Carrot Top Lift). First half is used for sprite B7, second half is used for sprite B8."
2526,232728,6,Sprite tilemap related,"Sprite tilemap: Diagonal Platform (Carrot Top Lift). First half is used for sprite B7, second half is used for sprite B8."
2527,232734,6,Sprite tilemap related,"YXPPCCCT properties for the diagonal platform (Carrot Top Lift). First half is used for sprite B7, second half is used for sprite B8."
2528,232830,1,Sound effect,SFX that comes up when the Message comes out of the Message Block
2529,232880,1,Sprite tilemap related,Message Box Tilemap
2530,232923,1,Misc.,Change to 00 and the timed lift will never fall after it has hit 0.
2531,232938,1,Sprite physics,Horizontal speed of the Timed Lift
2532,232965,2,Sprite tilemap related,Sprite tilemap: Timed Platform
2533,232968,3,Sprite tilemap related,"[0B 4B 0B] Properties (Palette, gfx page, etc..) of the Timed Lift."
2534,232974,4,Sprite tilemap related,"Tiles used by numbers in Timed Platform (1,2,3,4)"
2535,233073,4,Sprite physics,Horizontal speed of the Grey Moving Castle Block.
2536,233077,4,Timer,Time in position of the Grey Moving Castle Block.
2537,233136,4,Sprite tilemap related,Sprite tilemap: Moving Grey Castle Brick
2538,233171,1,Sprite tilemap related,YXPPCCCT properties for the moving gray castle block.
2539,233194,2,Sprite physics,"X speeds for the Bowser Statue fireball. Ordered right, left."
2540,233227,8,Sprite tilemap related,Sprite tilemap: Bowser Statue Fireball
2541,233235,8,Sprite tilemap related,The YXPPCCCT properties of the Bowser Statue Fireball.
2542,233325,8,Sprite tilemap related,Reflecting Stream of Boo Buddies tilemap (leader only)
2543,233467,1,Sprite Misc.,"Controls the two palettes that the diagonal Podoboo flashes with. Take the first palette you pick, subtract 8, and multiply by 2 to get a valid value for this. The second palette will then be that value times 2.


For instance, the original value here is 4 (palette A), which times two is 8, and converting that back into a palette (divide by 2, add 8) gives you palette C. So the Podoboo flashes between palette A and C."
2544,233489,1,Sprite tilemap related,Reflecting Fireball Tilemap
2545,233824,10,Sprite tilemap related,"Fishin' Boo Tilemap (cloud, face, rod, cloud, line)"
2546,233844,4,Sprite tilemap related,Fishin' Boo's Flame Tilemap
2547,234012,1,Sprite tilemap related,Falling Spike Tilemap
2548,234077,1,Timer,Number of frames before a Falling Spike drops.
2549,234095,5,Misc.,X speed of the Creating/Eating block
2550,234100,5,Misc.,Y speed of the Creating/Eating block
2551,234131,1,Sprite tilemap related,Tile used by the Creating/Eating block
2552,234169,1,Sound effect,SFX played by the Creating/Eating block
2553,234272,1,Objects,"Which tile gets created by the brown creating block sprite. Does not affect the tile that the eating block sprite eats, or the tile that activates these two sprites when you stand on it. See this for a list of possible values."
2554,234285,1,Objects,"Which tile is created by the brown eating block sprite. Defaults to air; see this for a list of possible values.


Note that there is no RAM address that affects which tile this block will eat - it will go after ANY solid block that is next to it."
2555,234379,25,Sprite subroutine (JSR),"This generates a Map16 tile at the position of the sprite currently being processed.  It is identical to the routine at $02B9A4, except that this one ends with RTS."
2556,234404,75,Misc.,"Path for creating brown blocks (sprite B1) in overworld submaps.

Format: One byte per command, XY, where X=number of times to go in direction Y.  Y = 0,1,2,3 (Right, left, down, up).  FF terminates the sprite."
2557,234479,52,Misc.,Path for creating brown blocks (sprite B1) on the main overworld. Same format as $03:93A4.
2558,234683,10,Sprite tilemap related,Sprite tilemap: Wooden Castle Spike
2559,234693,10,Sprite tilemap related,"Properties (palette, gfx page etc.) of the wooden spike.

The first 5 bytes for sprite AC the next 5 bytes for sprite AD. YXPPCCCT format."
2560,234771,2,Sprite physics,Normal rex walking speed
2561,234773,2,Sprite physics,Smushed rex walking speed
2562,234818,1,Misc.,Change to 00 to make all Rexes start small.
2563,234936,1,Misc.,Rex's HP
2564,235067,1,Sound effect,SFX that comes up when Mario hits a Rex
2565,235084,12,Sprite tilemap related,Rex tile horizontal displacement table left (0C entries)
2566,235096,12,Sprite tilemap related,Rex tile horizontal displacement table right (0C entries)
2567,235108,12,Sprite tilemap related,Rex tile vertical displacement table (0C entries)
2568,235120,10,Sprite tilemap related,Sprite tilemap: Rex
2569,235132,1,Sprite tilemap related,Rex tile settings left
2570,235133,1,Sprite tilemap related,Rex tile settings right
2571,235396,4,Sprite tilemap related,"Fishbone tail properties, YXPPCCCT. First two bytes are for the tail when the fishbone is heading into the right direction, the other two when heading into the left direction."
2572,235400,4,Sprite tilemap related,Tiles used by Fishbone's Tail
2573,235417,1,Sprite tilemap related,"Fishbone Tilemap, frame 1"
2574,235421,1,Sprite tilemap related,"Fishbone Tilemap, frame 2"
2575,235654,4,Coordinate,reznor starting position low byte (4 byte table)
2576,235658,4,Coordinate,reznor starting position high byte (4 byte table)
2577,235679,4,ASM,[22 0C D7 03] Change to [EA EA EA EA] to stop the bridge in the Reznor battle from breaking.
2578,235684,1,Coordinate,"X position of the Reznor's circle written to $2A and loaded at $0399B3. (Y position is left at whatever $2C is, and it is loaded at $0399D8)"
2579,235719,2,ASM,Change to [38 E9] to change rotation direction of the Reznor platform.
2580,235721,2,Sprite physics,Speed of Reznor rotation
2581,235724,2,Timer,Frames until Reznors spin cycle loops.
2582,235751,1,Music,Music played after the Reznors are defeated
2583,235770,1,Sprite Misc.,"How many Reznors to hit to trigger level completion.

Note: it must be 4 or less."
2584,235876,1,Sprite Misc.,X-radius of Reznor's circle
2585,235911,1,Sprite Misc.,Y-radius of Reznor's circle
2586,236014,1,ASM,Change from 22 to AF to make the Reznor platforms non-standable (fall-through) after Mario hits a Reznor from below.
2587,236036,7,Sprite Misc.,"Change to [D0 0A A9 xx 9D] to alter the rate at which Reznor shoots fireballs. (xx is the speed: $00 is the original value, and $DF seems to be the fastest value that will work correctly.)"
2588,236242,1,Sprite number,Sprite that Reznor will turn into after being hit
2589,236292,1,Sound effect,Sound effect made when Reznor spits a fireball.
2590,236297,1,Sprite number,Object that Reznor spits
2591,236381,12,Sprite tilemap related,"Reznor tilemap (4 bytes regular reznor, 4 bytes shooting fireball, 4 bytes turning)"
2592,236393,12,Sprite tilemap related,"Reznor palette map (4 bytes regular reznor, 4 bytes shooting fireball, 4 bytes turning)"
2593,236570,1,Sprite tilemap related,tile for reznor platforms
2594,236578,1,Sprite tilemap related,palette of reznor platforms
2595,236708,2,Sprite physics,Dino Rhino X-Speed.
2596,236710,2,Sprite physics,Dino Torch X-Speed.
2597,236886,1,Sound effect,Dino Torch Fire Sound Effect.
2598,236897,1,ASM,Change to 80 to make Dino-Torches only breathe fire horizontally
2599,236951,1,ASM,Change to 80 and Dino-Torch's flame will have no effect on Mario.
2600,236958,24,Sprite Misc.,"Dino Torch's Flame Clipping tables.

- $039D9E: Clipping X offset (low byte).

- $039DA2: Clipping X offset (high byte).

- $039DA6: Clipping Width.

- $039DAA: Clipping Y offset (low byte).

- $039DAE: Clipping Y offset (high byte).

- $039DB2: Clipping Height.


Each table has 4 bytes, and it uses the following format:

- 1st byte: Horizontal Flame Facing Left

- 2nd byte: Vertical Flame Facing Left

- 3rd byte: Horizontal Flame Facing Right

- 4th byte: Vertical Flame Facing Right"
2601,237054,5,Sprite tilemap related,Dino-Torch flame tile horiz. displacement table (horizontal flame)
2602,237059,5,Sprite tilemap related,Dino-Torch flame tile horiz. displacement table (vertical flame)
2603,237064,5,Sprite tilemap related,Dino-Torch flame tile vert. displacement table (horizontal flame)
2604,237069,5,Sprite tilemap related,Dino-Torch flame tile vert. displacement table (vertical flame)
2605,237074,10,Sprite tilemap related,"Dino-Torch flame tile table (2 animation frames, each 4 bytes w/an unused byte)"
2606,237084,5,Sprite tilemap related,Dino-Torch YXPPCCCT bytes.
2607,237089,4,Sprite tilemap related,"Dino-Torch tile table (4 animation frames, each 1 byte)"
2608,237093,8,Sprite tilemap related,Dino-Rhino tile horizontal displacement table
2609,237101,4,Sprite tilemap related,Dino-Rhino tiles' palette/gfx page/priority/flip left
2610,237105,4,Sprite tilemap related,Dino-Rhino tiles' palette/gfx page/priority/flip right
2611,237109,4,Sprite tilemap related,Dino-Rhino tile vertical displacement table
2612,237113,16,Sprite tilemap related,"Dino-Rhino tile table (4 animation frames, each 4 bytes)"
2613,237299,1,Misc.,Which segment of Dino-Torch's flame is its body
2614,237326,1,Misc.,Which segment of Dino Torch's flame doesn't flip
2615,237563,1,Sound effect,Blargg Growl Sound Effect.
2616,237620,1,Timer,Time it takes for Blargg to resurface. (eyes)
2617,237685,1,Sprite tilemap related,Tile used by Blargg's Eyes Peeking out of Lava
2618,237713,10,Sprite tilemap related,Blargg Tilemap
2619,237723,1,Sprite tilemap related,"Blargg palette/gfx page, right"
2620,237724,1,Sprite tilemap related,"Blargg palette/gfx page, left"
2621,237817,1,Coordinate,Bowser's initial Y Pos
2622,237821,1,Coordinate,Bowser's initial Y Pos high byte
2623,237826,1,Coordinate,Bowser's initial X Pos
2624,237830,1,Coordinate,Bowser's initial X Pos high byte
2625,237835,1,Misc.,Bowser hit count for first phase
2626,238553,9,Sprite tilemap related,Tilemap: Clouds from Bowser's Clown Car
2627,238673,1,Sprite physics,Speed of Bowser's descent before battle.
2628,238731,1,Timer,Delay before Bowser first throws Mechakoopas at the start of the battle. Default is $78.
2629,238738,2,Sprite physics,X speed of Bowser's swoop in first part.
2630,238742,2,Sprite physics,Y speed of Bowser's swoop in first part.
2631,238854,1,Sprite Misc.,"Phase where Bowser drops steel balls. 07 = phase 1, 08 = phase 2, 09 = phase 3. Default is $08.


Change to [07 90 11] (org $03A505 : CMP #$07 : BCC $11) to make Bowser drop steel balls in all 3 phases."
2632,238864,1,Sprite Misc.,"Number of steel balls Bowser drops, plus one. Use with $03A614. Default is $03."
2633,239032,1,Timer,Amount of time between Bowser dropping Mechakoopas
2634,239104,1,Timer,Timing of steel ball dropping
2635,239108,1,Sound effect,Bowser dropping Ball sound
2636,239119,1,Timer,Amount of time before Bowser drops Mechakoopas (after dropping the 2nd steel ball)
2637,239124,1,Sprite Misc.,Number of steel balls Bowser drops. Use with $03A510. Default is $02.
2638,239128,1,Timer,Amount of time before Bowser drops 2nd steel ball
2639,239139,1,Sprite number,Sprite Bowser Throws (Bowling Ball)
2640,239218,1,Timer,"Delay after Bowser's hit with a Mechakoopa, before his next attack. Default is $50."
2641,239235,1,Misc.,Bowser hit count for final 2 phases
2642,239362,1,Music,Music played when Bowser flies away
2643,239391,2,Sprite physics,"Bowser's X acceleration as he swoops out before the fireball phase. First is while shrinking, second is while growing. Default is $01,$FF."
2644,239397,2,Sprite physics,"Bowser's Y acceleration as he swoops out before the fireball phase. First is while shrinking, second is while growing. Default is $FF,$01."
2645,239401,2,Sprite Misc.,"Bowser's shrink/grow speed (change in $38 and $39) as he swoops out before the fireball phase. First is while shrinking, second is while growing. Default is $01,$FF."
2646,239514,1,Timer,Duration of Bowser's fireball phase. Default is $80.
2647,239528,1,Music,Music played during Bowser's fireball phase
2648,239545,1,Coordinate,X Position Bowser returns to after fire attack.
2649,239554,1,Music,Bowser scene 3 music
2650,239564,1,Coordinate,Y Position Bowser returns to after fire attack.
2651,239584,1,Timer,Timing to start Bowser fireball attack
2652,239584,1,Timer,"Time when Bowser's fireballs start spawning, counting down from the value at $03A79A. Default is $60."
2653,239607,1,Sound effect,Bowser Battle primary flame sound
2654,239612,1,Sprite Misc.,Status of sprite spawned by Bowser's fireball attack
2655,239617,1,Sprite number,Sprite spawned by Bowser's fireball attack (fireballs falling from the sky). Default: 0x33.
2656,239630,1,Sprite Misc.,Horizontal distance between Bowser's consecutive fireballs. Default is $20.
2657,239653,2,Sprite Misc.,"[F6 C2] By default, sets the sprite state for Bowser's Podoboo Rain to 01. Change to EA EA to change the sprite state back to 00 - useful if you want Bowser to spawn different falling sprites in between his regular attack rounds."
2658,239681,8,Sound effect,Bowser Battle other flame sounds
2659,239689,2,Music,Music for the other Bowser Battle attack phases
2660,239717,1,Timer,Timing of Bowser stopping clown car in foreground
2661,239727,1,Timer,Timing of Peach throwing the mushroom
2662,239740,1,Timer,How soon Bowser starts moving again
2663,239744,1,Timer,Timing of Bowser coming out of clown car
2664,239748,1,Timer,Timing of music for next attack phase
2665,239791,1,Timer,Timing of Peach crying for help sound
2666,239795,1,Sound effect,Peach crying for help sound
2667,239844,1,Sound effect,Peach Throwing Sound
2668,239849,1,Sprite Misc.,Status of sprite spawned by Peach
2669,239854,1,Sprite number,Sprite Princess Throws
2670,240078,80,Sprite tilemap related,Sprite tilemap: Princess Toadstool(Bowser Battle)
2671,240405,2,Sprite physics,Bowser's X acceleration (right/left) during phase 2.
2672,240407,2,Sprite physics,Bowser's maximum X speed (right/left) during phase 2.
2673,240409,2,Sprite physics,Bowser's Y acceleration (down/up) during phase 2.
2674,240411,2,Sprite physics,Bowser's maximum Y speed (down/up) during phase 2.
2675,240464,1,Coordinate,Y Position Bowser hovers near in second part.
2676,240482,2,Sprite physics,X speed of bounce in Bowser's third part.
2677,240502,1,Sprite physics,Bowser's Y acceleration when bouncing during phase 3.
2678,240521,1,Sprite physics,"Bowser's Y speed after bouncing off the ground, during phase 3."
2679,240525,1,Sound effect,Bowser's Clown Car bouncing sound
2680,240628,1,Sound effect,Bowser Defeated Sound
2681,240691,1,Sprite physics,Rotation speed of Bowser as he flies away after Peach has been released.
2682,240723,1,Sound effect,Peach appearing after battle sound
2683,240739,48,Sprite subroutine (JSR),"Routine that spawns Princess Peach from Bowser's clown car.

$03AC69 is the sprite ID Bowser spawns. Note that it will always use the 8th sprite slot.

$03AC7F is the starting Y-coordinate of this sprite."
2684,240787,2,Coordinate,"Y-coords of blushing Mario face tiles (Super, small)"
2685,240789,2,Mario tilemap,"Blushing Mario Faces (Super, Small)"
2686,240903,1,Mario tilemap,"Palette of Mario's blushing tiles at the end of the game. YXPPCCCT format. Default: $31 (palette 8, second tile page, top priority)"
2687,241713,1,Sprite number,Sprite Bowser Throws (Mecha Koopa)
2688,241849,1,Sound effect,Mario bumped by Clown Car sound
2689,241962,1,Sound effect,Bowser hurt sound
2690,242017,2,Sprite physics,"Bowling ball's X speed. (Default: Right: $10, Left: $F0)"
2691,242049,1,Sprite physics,Bowling Ball Y acceleration. [Default: $03]
2692,242055,1,Sprite physics,Bowling Ball maximum falling Y speed. [Default: $40]
2693,242070,1,Coordinate,"Y position at which Bowser's bowling ball will stop falling.  If you change this, you must change $03B19A to the same value."
2694,242074,1,Coordinate,"Y position to set Bowser's bowling ball to once it hits the ""ground"".  If you change this, you must change $03B196 to the same value."
2695,242084,1,Sound effect,Bowser's Steel Ball hitting ground sound
2696,242084,1,Sound effect,Bowling Ball hard-bounce sound effect. [Default: $25]
2697,242098,1,Sound effect,Steel Ball bouncing sound
2698,242098,1,Sound effect,Bowling Ball soft-bounce sound effect. [Default: $01]
2699,242157,12,Sprite tilemap related,Sprite tilemap: Bowser's Steel Ball
2700,242447,4,Sprite tilemap related,Mechakoopa tile horizontal displacement table left
2701,242451,4,Sprite tilemap related,Mechakoopa tile horizontal displacement table right
2702,242455,24,Sprite tilemap related,"Mechakoopa tile vertical displacement table (6 animation frames, each 4 bytes)"
2703,242479,24,Sprite tilemap related,"Mechakoopa tile table (6 animation frames, each 4 bytes)"
2704,242503,4,Sprite tilemap related,Mechakoopa tiles' priority/flip left
2705,242507,4,Sprite tilemap related,Mechakoopa tiles' priority/flip right
2706,242511,4,Sprite tilemap related,"Mechakoopa tile sizes (00= 8x8, 02= 16x16)"
2707,242515,1,Sprite tilemap related,"Mechakoopa Palette/gfx page used when coming to, #1"
2708,242516,1,Sprite tilemap related,"Mechakoopa Palette/gfx page used when coming to, #2"
2709,242518,1,Sprite tilemap related,Mechakoopa Regular palette/gfx page
2710,242528,1,Sprite tilemap related,Mechakoopa Animation frame used when stunned
2711,242538,1,Sprite tilemap related,Mechakoopa Animation frame used when kicked
2712,242671,1,Sprite tilemap related,Mechakoopa Wind-up key horizontal displacement right
2713,242672,1,Sprite tilemap related,Mechakoopa Wind-up key horizontal displacement left
2714,242673,1,Sprite tilemap related,Mechakoopa Wind-up key palette/gfx page right
2715,242674,1,Sprite tilemap related,Mechakoopa Wind-up key palette/gfx page left
2716,242675,4,Sprite tilemap related,"Mechakoopa Wind-up key tile table (4 animation frames, each 1 byte)"
2717,242755,4,Coordinate,"Bowser Battle Item Box Frame:  X position of each corner of the frame (in the order upper-left, upper-right, lower-left, lower-right)"
2718,242759,4,Coordinate,Bowser Battle Item Box Frame: Y position of each corner of the frame (same order as above)
2719,242763,4,Sprite tilemap related,Bowser Battle Item Box Frame:  Attributes for each corner of the frame (same order as above)
2720,242798,1,Sprite tilemap related,Bowser Battle Item Box Frame:  Tile to use for the frame (each corner uses the same 16x16 tile)
2721,242828,16,Misc.,X-coordinates of 1st and 3rd rows of Bowser's castle roof
2722,242844,16,Misc.,Y-coordinates of 1st and 3rd rows of castle roof
2723,242873,1,Misc.,"How many tiles to load for 2nd row group, -1"
2724,242880,1,Misc.,Y-coordinate of 2nd row of castle roof
2725,242897,1,Misc.,Difference in X-coordinate for tiles in 2nd row
2726,242901,1,Sprite tilemap related,Tile of 2nd row of Bowser's castle roof
2727,242906,1,Sprite tilemap related,Palette of 2nd row of Bowser's castle roof
2728,242931,1,Misc.,"How many tiles to load for 1st & 3rd row group, -1"
2729,242957,1,Sprite tilemap related,Tile of 3rd row of Bowser's castle roof
2730,242959,1,Misc.,How many tiles will use the address below
2731,242963,1,Sprite tilemap related,Tile of 1st row of castle roof
2732,242968,1,Sprite tilemap related,Palette of 1st and 3rd rows of Bowser's castle roof
2733,243015,1,Sprite tilemap related,Tile of 3rd row of castle roof (copy.  It is called for when Peach comes from Bowser's clown car )
2734,243017,1,Misc.,How many tiles will use the address below
2735,243021,1,Sprite tilemap related,Tile of 1st row of castle roof (copy)
2736,243026,1,Sprite tilemap related,Palette of 1st and 3rd rows of castle roof (copy)
2737,243052,60,Sprite physics,X displacement of sprite clippings.
2738,243112,60,Sprite physics,Width of sprite clippings.
2739,243172,60,Sprite physics,Y displacement of sprite clippings.
2740,243232,60,Sprite physics,Height of sprite clippings.
2741,243300,59,Subroutine (JSL),"""Get player clipping"" subroutine.  Stores the clipping X displacement low byte to $00, the clipping X displacement high byte to $08, the clipping width to $02, the clipping Y displacement low byte to $01, the clipping Y displacement high byte to $09, and the clipping height to $03.

$03B673 - The width of Mario hitbox with sprites in pixels.

$03B67C - Change to A9 00 to make Super/Fire/Cape Mario have a 16x16 interaction field (like Small Mario)or change to A9 01 to have a 16x32 interaction field (like Big Mario)(in conjunction with addresses $00EB79 and $01B4C0)"
2742,243359,70,Sprite subroutine (JSL),"""Get sprite clipping A"" subroutine.  Stores the clipping X displacement low byte to $04, the clipping X displacement high byte to $0A, the clipping width to $06, the clipping Y displacement low byte to $05, the clipping Y displacement high byte to $0B, and the clipping height to $07."
2743,243429,70,Sprite subroutine (JSL),"""Get sprite clipping B"" subroutine.  Stores the clipping X displacement low byte to $00, the clipping X displacement high byte to $08, the clipping width to $02, the clipping Y displacement low byte to $01, the clipping Y displacement high byte to $09, and the clipping height to $03."
2744,243499,49,Sprite subroutine (JSL),"""Check for contact"" collision subroutine. Uses the values in scratch RAM set by $03B69F and either $03B6E5 or $03B664 (or occasionally custom values) to determine whether two sprites, or a sprite and the player, are in contact. If the carry flag is set after calling this, they are in contact.


It functions using the axis-aligned bounding box (AABB), it first checks if they are #$80 pixels apart, if they are, then the subroutine ends with carry clear, otherwise it then checks the total distance of their widths or height against their difference of their XY position, and if within range, carry is set.Input values and destroyed values"
2745,243970,128,Palette,"Magikoopa palettes (8 palettes; 8 colours each, including transparent colour)"
2746,244098,128,Palette,Big Boo Boss palettes (in same layout as Magikoopa palettes)
2747,244226,1534,Empty,"Filled with $FF.


Modified by Lunar Magic:

- $03BB90: Start of Lunar Magic's modified Message Box routine.

- $03BC0B: Pointer to message locations. Note that this changes every time you use LM to edit the messages.

- $03BC7F: Table of the first 2 bytes of the stripe header for message boxes.

- $03BE80: Table of offsets to find the correct message. Indexed by ($13BF * 2 + ($1426 - 1)) * 2

- $03BCDC: (LM 3.00+) Routine (ends in RTL) that computes the current screen number Mario is in and puts it in X (required to use for the new horizontal level modes)."
2748,245760,35,Sprite subroutine (JSL),"This generates a Map16 tile at the position of the sprite currently being processed plus 8 pixels left and 8 pixels down.  It can be accessed with a JSL, and A should be set to the value of $9C you wish to use."
2749,245820,2,Sprite Misc.,"Change to [$80,$1E] to make Baby Yoshi instantly grow when eating something, regardless if it's a powerup or not.

Change to [$80,$5D] to make Baby Yoshi never grow instantly when eating something, even if it's a powerup. It will count as one sprite eaten instead.

If changing this, you also need to apply the hex edit at $01A295 for it to work properly."
2750,245938,4,Sprite tilemap related,"The tile numbers to use for the animated lava sprite tiles in Iggy/Larry's room. Default values are $68, $6A, $6C and $6E."
2751,245942,16,Sprite tilemap related,"The animation offsets for the animated lava sprite tiles in Iggy/Larry's room (e.g. if you set all of them to the same value, they would all display the same tile at once).

Strangely, some of them are #$04, despite nothing using that bit."
2752,245965,69,Subroutine (JSL),"The subroutine that displays the animated lava sprite tiles in Iggy/Larry's room (as well as calling his platform tilting routine, not included).


It makes use of 4 bytes at $03C0B2 and 16 bytes at $03C0B6, respectively for determining the tile numbers to use and their animation offset.


If you want to disable it for some reason, you can just put an RTL there."
2753,246034,4,Misc.,Speed of rotation of Iggy/Larry's platform
2754,246042,4,Misc.,How far to Iggy/Larry's rotate platforms
2755,246046,88,Subroutine (JSR),"The subroutine that takes care of tilting Iggy/Larry's Mode 7 platform.


It makes use of 4 bytes at $03C112, 4 bytes at $03C11A and 1 byte at $03C164, respectively for determining the tilting speeds, maximum angles and time to elapse between each tilt.

It also uses RAM adresses $1905, $1906 and $1907, respectively for the total number of tilts made, the timer between each tilt and the phase counter (See these for more details).


If you want to disable it for some reason, you can just put an RTS there."
2756,246116,1,Misc.,Time to stall Iggy/Larry's platform in between rotations
2757,246363,4,Sprite tilemap related,Chainsaw's Motor Tilemap
2758,246459,1,Sprite tilemap related,Middle of Chainsaw
2759,246464,1,Sprite tilemap related,Top of Chainsaw
2760,246508,1,Sprite number,Sprite spawned by the checkpoint block (1up)
2761,246553,1,Sprite number,Sprite that the invisible mushroom is made from
2762,246591,1,Sprite physics,Y speed of mushroom after spawning from an invisible mushroom.
2763,246595,1,Sound effect,"Sound effect played when Mario discovers an invisible mushroom. The bank is stores to is located at $03:C345, default bank is $1DFC."
2764,246600,4,Sprite physics,Ninji's vertical speed when jumping
2765,246634,1,Misc.,Change from 04 to 0C to fix a bug where Ninjis can clip through ceilings.
2766,246645,1,Misc.,Time it takes Ninji to jump
2767,246707,12,Sprite tilemap related,"Dry Bones x-displacement table (Bone, Head, Body)"
2768,246719,3,Sprite tilemap related,"Dry Bones palette/gfx page (Facing right) (Bone, Head, Body)"
2769,246722,3,Sprite tilemap related,"Dry Bones palette/gfx page (Facing left) (Bone, Head, Body)"
2770,246725,9,Sprite tilemap related,"Dry Bones y-displacement table (Bone, Head, Body)"
2771,246734,9,Sprite tilemap related,Dry Bones tile table
2772,246862,65,Sprite subroutine (JSL),"Dry Bones's bone-throwing subroutine. It can be JSL'd to.


$03C462 - [06] Extended sprite number to throw.

$03C46A - [10] Y offset of the bone relative to the Dry Bones's position.

$03C486 - [18] X speed of the bone when the Dry Bones is facing right.

$03C48A - [E8] X speed of the bone when the Dry Bones is facing left."
2773,246931,9,Sprite tilemap related,Sprite tilemap: Disco Ball
2774,246940,9,Sprite tilemap related,"Spotlight / Disco Ball properties, YXPPCCCT."
2775,247157,1,Sprite Misc.,"Spotlight sprite windowing update frequency. Default value is 03, which means the windowing is updated every 4 frames. Change to 00 to make it update every frame, giving it a smoother movement."
2776,248249,40,Sprite tilemap related,Fireworks Tilemap
2777,248749,2,Coordinate,X-position of sprite spawned by Puntin' Chuck (facing right/left)
2778,248751,2,Sprite physics,"X-speed of sprite spawned by Puntin' Chuck, high byte (facing right/left)"
2779,248753,2,Sprite physics,"X-speed of sprite spawned by Puntin' Chuck, low byte (facing right/left)"
2780,248762,1,Sprite number,Sprite Puntin' Chuck kicks
2781,248774,1,Sprite Misc.,Status of sprite spawned by Puntin' Chuck
2782,248830,1,Sprite physics,Y-speed of sprite spawned by Puntin' Chuck
2783,248852,36,Sprite subroutine (JSR),"Subroutine for the Lemmy Koopa and Wendy O. Koopa boss fights.


Jumps to a graphics subroutine, then if the sprite is dead or the lock sprites flag is set, returns. Otherwise, loads the current fight phase from table $151C, then executes the pointer subroutine."
2784,248873,14,Pointer,"Pointers to the various phase routines of the Lemmy Koopa and Wendy O. Koopa boss fights.


[8A CC] Phase 0: In pipe

[21 CD] Phase 1: Rising

[C7 CD] Phase 2: Out of pipe

[EF CD] Phase 3: Descending

[0E CE] Phase 4: Hit

[5A CE] Phase 5: Falling

[89 CE] Phase 6: Sinking in lava"
2785,248888,7,Sprite Misc.,Possible X positions for Lemmy/Wendy and their decoys.
2786,248896,7,Sprite Misc.,Possible Y positions for Lemmy and his decoys.
2787,248904,8,Sprite Misc.,"Number of frames Wendy and Lemmy take to emerge from their pipes, indexed by the animation they are performing."
2788,248912,1,Sprite Misc.,Number of frames that Wendy/Lemmy's dummies take to rise out of their pipes.
2789,248922,48,Sprite Misc.,"Indexes to $03CC38 / $03CC40 to choose from for each RNG value (00-0F). The first set of 16 bytes is used for Wendy/Lemmy, the second set is the corresponding value for the first dummy, and the third set is the corresponding value for the second dummy."
2790,248970,86,Sprite subroutine (JSR),"Subroutine that runs for Lemmy Koopa and Wendy O. Koopa's ""in pipe"" phase. This routine handles several of the Lemmy/Wendy fight behaviours:

- Calls the RNG routine to determine at what X positions (pipes) Lemmy/Wendy and their dummies appear out of.

- Sets their Y positions depending on the pipe they appear from. Always #$50 if the boss is Wendy, otherwise, loads Y positions from a table corresponding to the heights of Lemmy's pipes.

- Jumps to the routines that initialize the sprite tables.

- Calls the RNG routine to determine Lemmy/Wendy's emerged animation pointer, and animation frame when coming out of a pipe.

- Sets the phase timer for Lemmy/Wendy's next phase. Timer value depends on their current animation.

- Increments the current phase table."
2791,249015,1,Sprite Misc.,Initial Y position of Wendy and her decoys.
2792,249121,22,Sprite subroutine (JSR),"Subroutine that runs for Lemmy Koopa and Wendy O. Koopa's ""rising"" phase.


Updates Lemmy/Wendy's Y speed and position when rising out of pipes. When the phase timer for this phase reaches 0, the routine sets the phase timer for the next phase, and increments the current phase table."
2793,249127,1,Timer,"Amount of time Lemmy/Wendy remain vulnerable before retreating into their pipes. However, their animations will become glitched if this is set higher than its initial value of 0x40."
2794,249143,144,Sprite Misc.,Animation frame data for Lemmy Koopa and Wendy O. Koopa when out of a pipe. Indexed by a combination of the emerged animation pointer and the current phase timer.
2795,249287,19,Subroutine (JSR),"Subroutine that runs for Lemmy Koopa and Wendy O. Koopa's ""out of pipe"" phase.


Jumps to a subroutine that checks if Mario has jumped on Lemmy/Wendy/dummy. If he hasn't, the routine checks if the current phase timer is 0. If it is, the the routine sets the phase timer for the next phase and increments the current phase table. If the phase timer is not 0, the routine jumps to a subroutine that handles Lemmy/Wendy's animations."
2796,249301,1,Misc.,"Setting for Lemmy/Wendy's decoys.  00 - keep appearing after boss's defeat, 01 - interaction disabled, 02 - paralyzed, 03 - normal"
2797,249306,21,Sprite subroutine (JSR),"Subroutine that handles Lemmy Koopa and Wendy O. Koopa's animations when out of a pipe.


The accumulator contains the current phase timer when the routine is called, and is right‐shifted twice then stored to $00. The emerged animation pointer is loaded, left‐shifted four times, ORA'd with $00, and moved to the Y register to serve as an index for which animation frame to use."
2798,249327,31,Sprite subroutine (JSR),"Subroutine that runs for Lemmy Koopa and Wendy O. Koopa's ""descending"" phase.


Updates Lemmy/Wendy's Y speed and position when the phase timer isn't 0. When the timer reaches 0, this routine clears the dummy sprite slots, sets the phase timer and resets the Lemmy/Wendy phase to 0 (in pipe)."
2799,249345,1,Timer,How long until Lemmy/Wendy and enemies energe from the pipes.
2800,249350,1,Misc.,Lemmy/Wendy/decoy speed when retreating into a pipe.
2801,249358,72,Sprite subroutine (JSR),"Subroutine for Lemmy Koopa and Wendy O. Koopa's ""hit"" phase.


If the phase timer is 0, this routine will increment the ""hit counter"" table, check if it's at 3, and if so, will zero Lemmy/Wendy's Y speed, play the falling SFX and increment the current phase table to ""falling"". If the ""hit counter"" table is not at 3, the routine will jump to code that sets the phase timer and sets the current phase to ""descending"".


If the phase timer is not 0, this routine will check whether the sprite hit was Lemmy/Wendy or a dummy, play the appropriate SFX for hitting them, and set the appropriate animation frames."
2802,249361,1,Misc.,Change to F0 to make Lemmy/Wendy and enemies immediately go back into the pipe when they have been hit. (will not play the correct! sound effect.)
2803,249370,1,Misc.,Lemmy and Wendy's HP
2804,249381,1,Sound effect,Lemmy/Wendy falling Sound Effect.
2805,249396,1,Sound effect,Correct! Sound Effect.
2806,249415,1,Sound effect,Incorrect sound effect for Lemmy/Wendy Battle.
2807,249430,4,Sprite Misc.,Animation frames for the Lemmy/Wendy dummies when hit by Mario. Indexed by the phase timer.
2808,249434,47,Sprite subroutine (JSR),"Subroutine for Lemmy Koopa and Wendy O. Koopa's ""falling"" phase.


Updates Lemmy/Wendy's Y speed and position - Accelerates their falling speed until it reaches approximately #$40. When their Y low position reaches #$85, the routine spawns lava extended sprites, plays the ""falling in lava"" SFX, sets the phase timer, and sets the current phase to ""sinking in lava"". The routine then branches to part of the ""hit"" phase subroutine that sets Lemmy/Wendy's animation frames."
2809,249457,1,Misc.,Y-position where Lemmy/Wendy lands in the lava after being defeated.
2810,249471,1,Sound effect,Lemmy/Wendy falling in lava Sound Effect.
2811,249472,2,Misc.,Change to [80 05] to disable the lava splash and sound effect when Lemmy/Wendy fall into lava.
2812,249481,30,Sprite subroutine (JSR),"Subroutine that runs when Lemmy Koopa or Wendy O. Koopa are sinking in lava. Ends the level (boss fight) when their phase timer is 0, otherwise, updates their Y speed and position."
2813,249493,1,Timer,How long the fadeout is on the screen before the Castle Destruction Sequence appears.
2814,249498,1,Music,Music played after Lemmy/Wendy is defeated
2815,249511,75,Subroutine (JSR),"Contact routine for the Lemmy Koopa and Wendy O. Koopa boss fights.


Runs the Mario-Sprite interaction routine, and if contact is made with Lemmy, Wendy or one of the dummies, will hurt Mario if his Y speed is negative or less than #$10. For other speeds, the routine calls the subroutines to give Mario points and boost him up, and plays the contact SFX (also the enemy hurt SFX if the sprite hit was Lemmy/Wendy). Also sets the phase timer, and increments the current phase of the fight to ""hit"". If the hit counter is at 2, this routine is also responsible for killing most sprites on screen (via JSL $03A6C8)."
2816,249520,1,Misc.,Minimum speed Mario needs to be falling to stomp Lemmy/Wendy/decoys. Set to 01 to prevent Mario from getting unexpectedly damaged when trying to stomp them underwater. 00 causes Lemmy/Wendy/decoys to be always stomped on contact with Mario.
2817,249528,1,Misc.,Points you get for hitting Lemmy/Wendy or decoys. Default 02 - 400pts.
2818,249538,1,Sound effect,"Hitting Lemmy/Wendy/enemies sound effect. (note: when hitting Lemmy/Wendy, 2 sound effects are played together.)"
2819,249548,1,Sound effect,Sfx that plays when Lemmy/Wendy has been hit.
2820,249552,3,ASM,"[BD 34 15] Change to [80 09] (BRA $09) to make sprites on screen never die when stomping Lemmy Koopa or Wendy O. Koopa, regardless of their hit points."
2821,249556,1,Misc.,Number of times minus one Lemmy/Wendy must be hit before other sprites in the room vanish.
2822,249569,1,Timer,How long Lemmy stalls after being hit.
2823,249586,138,Sprite tilemap related,"X offsets for Lemmy Koopa's graphic tiles, indexed by $03D456,x + $02. $02 contains the current animation frame value x 6.


The value from this table is added to $00 (in accumulator), which contains the sprite's X position relative to the screen border. The resultant value is written to $0300,y."
2824,249724,138,Sprite tilemap related,"X offsets for Wendy O. Koopa's graphic tiles, indexed by $03D46D,x + $02. $02 contains the current animation frame value x 6.


The value from this table is added to $00 (in accumulator), which contains the sprite's X position relative to the screen border. The resultant value is written to $0300,y."
2825,249775,1,Sprite tilemap related,Change to 08 to fix the flip of Wendy's Bow (In conjunction with three other addresses)
2826,249781,1,Sprite tilemap related,Change to 08 to fix Wendy's Bow (In conjunction with three other addresses)
2827,249862,138,Sprite tilemap related,"Y offsets for Lemmy Koopa's graphic tiles, indexed by $03D456,x + $02. $02 contains the current animation frame value x 6.


The value from this table is added to $01 (in accumulator), which contains the sprite's Y position relative to the screen border. The resultant value is written to $0301,y."
2828,250000,138,Sprite tilemap related,"Y offsets for Wendy O. Koopa's graphic tiles, indexed by $03D46D,x + $02. $02 contains the current animation frame value x 6.


The value from this table is added to $01 (in accumulator), which contains the sprite's Y position relative to the screen border. The resultant value is written to $0301,y."
2829,250138,138,Sprite tilemap related,Sprite tilemap: Lemmy Koopa(and decoys)
2830,250276,138,Sprite tilemap related,"Sprite tilemap: Wendy O. Koopa(and decoys).

$03D1D7 - Change to 1F 1E to fix Wendy's Bow (In conjunction with three other addresses)

$03D1DD - Change to 1E 1F to fix Wendy's Bow (In conjunction with three other addresses)"
2831,250414,111,Sprite tilemap related,Lemmy Koopa's Palette/gfx page/priority/flip
2832,250414,138,Sprite tilemap related,"Lemmy Koopa's tile properties (YXPPCCCT), indexed by $03D456,x + $02. $02 contains the current animation frame value x 6.


ORA'd with #$10 before being written to $0303,y."
2833,250528,20,Sprite tilemap related,Lemmy Koopa's Decoys' Palette/gfx page/priority/flip
2834,250552,110,Sprite tilemap related,Wendy Koopa's Palette/gfx page/priority/flip
2835,250552,138,Sprite tilemap related,"Wendy O. Koopa's tile properties (YXPPCCCT), indexed by $03D46D,x + $02. $02 contains the current animation frame value x 6.


ORA'd with #$10 before being written to $0303,y."
2836,250666,20,Sprite tilemap related,Wendy Koopa's Decoys' Palette/gfx page/priority/flip
2837,250690,138,Sprite tilemap related,"Lemmy Koopa's tile sizes, indexed by $03D456,x + $02. $02 contains the current animation frame value x 6."
2838,250828,138,Sprite tilemap related,"Wendy O. Koopa's tile sizes, indexed by $03D46D,x + $02. $02 contains the current animation frame value x 6."
2839,250966,23,Sprite tilemap related,"Table of indexes for the Lemmy Koopa graphics routine, indexed by the current animation frame. Used as the number of times the OAM routine should loop, or ""number of OAM writes ‐ 1"". The value from here is decremented before each loop, and the OAM routine ends when the value is negative.


The data in the table is also added with $02 (the current animation frame value x 6), and then used as an index for the XY offset, tile, property and tile size tables."
2840,250989,23,Sprite tilemap related,"Table of indexes for the Wendy O. Koopa graphics routine, indexed by the current animation frame. Used as the number of times the OAM routine should loop, or ""number of OAM writes ‐ 1"". The value from here is decremented before each loop, and the OAM routine ends when the value is negative.


The data in the table is also added with $02 (the current animation frame value x 6), and then used as an index for the XY offset, tile, property and tile size tables."
2841,251012,160,Sprite subroutine (JSR),"Lemmy Koopa and Wendy O. Koopa's graphics routine.


Jumps to a GetDrawInfo routine, then gets Lemmy's XY offsets, tiles, tile properties and tile sizes from tables, and writes them to OAM. If the boss active is Wendy O. Koopa, it will branch to part of the routine that's identical to Lemmy's code, except it will use Wendy's tables instead."
2842,251564,84,Empty,Unused data.
2843,251675,1,Misc.,Number of Reznors killed before bridge begins breaking
2844,251705,1,Timer,"Change $03D74E to [xx] and $03D739 to [xx-4] to change the speed at which the Reznor bridge breaks. 


xx is the speed at which it breaks. $3C is the original, $05 is the fastest that will work, and $FF is the slowest."
2845,251726,1,Timer,Reznor bridge's shatter timer initialization. Times the shatter SFX and the smoke puff for Reznor bridge tile destruction. Actual removal of the tile set by $03D739. Change this in conjunction to $03D739 to alter the bridge shattering speed. Default is $40.
2846,252382,480,Mode 7 tilemap,"Morton, Roy and Ludwig tilemap"
2847,252862,432,Mode 7 tilemap,Bowser tilemap
2848,253294,5,Pointer,"Low byte for the pointers to the SNES addresses for Morton, Roy, and Ludwig's palettes. The last two bytes are unused."
2849,253299,5,Pointer,"High byte for the pointers to the SNES addresses for Morton, Roy, and Ludwig's palettes. The last two bytes are unused."
2850,253304,5,Graphics,"Graphics files used for Morton, Roy, and Ludwig. The last two bytes are unused."
2851,253326,1,Misc.,Y position of the center of rotation for Reznor's wheel.
2852,253330,1,Misc.,"Size of Reznor's wheel. The closer to 00, the larger."
2853,253706,1,Misc.,"How many animation frames Clown Car's propeller has, -1"
2854,253974,5,ASM,Lightning sound FX for Bowser battle. Change to EA EA EA EA EA to disable noise.
2855,253997,7,Misc.,Code for loading BG flashes during Bowser battle. Change to EA EA EA EA EA EA EA to disable.
2856,254019,4,Pointer,Pointer to Bowser's first palette
2857,254044,932,Empty,Unused data.
2858,254976,6624,Music,Credit music SPC data.
2859,261600,544,Empty,Unused data.
2860,295046,51,Subroutine (JSR),Seems to handle drawing the default water tiles on the overworld.
2861,295441,16,Overworld,"Offsets for overworld free scrolling when start is pressed. 16 bit. Order: null, right, left, both (unused, same as right), null, bottom, top, both (unused, same as bottom)Direction Speeds"
2862,295457,16,Overworld,"Max range for overworld scrolling when start is pressed. 16bit. Indexed by controller bits. Order: null, right, left, both (unused, same as right), null, bottom, top, both (unused, same as bottom)


Due to a discrepancy between these values and the values in $049416, free scrolling can scroll the overworld 1 pixel lower than walking down can.Direction Limits"
2863,295499,1,Debug,"Change from 80 to F0, and pushing select on the OW will cycle through Yoshi colours."
2864,295565,2,ASM,"Change to 80 06 to disable ""Lives Exchanger"" function."
2865,295808,1,Misc.,Change to 00 to disable looking around the overworld map
2866,295957,28,Overworld,Handles looking around the overworld when in the free look mode (pressing pause). Takes values in A and X that correspond to directions. Indexes $048211 and $048221 using the given values.Free Look Speed and Range
2867,296317,39,Pointer,Pointers that are indexed by $7E13D9. Each one points to a different process running on the overworld.
2868,296362,2,Overworld border,X placement of Mario on the overworld border
2869,296370,2,Overworld border,Y placement of Mario on the overworld border
2870,296380,1,Overworld border,"Mario's speed on the overworld (the one in the top-left). Since you don't actually move, it's only a graphical aspect. 0 is the lowest value possible - stand still. 1-3F speed up gradually. Other values aren't recommended and/or give the same effect."
2871,296399,4,Overworld border,Change from 22 BD E2 00 to EA EA EA EA to remove Mario from the Overworld border
2872,296424,1,Overworld border,Change this byte to [60] (RTS) to get rid of the 32x32 box that surrounds the Mario image.
2873,296425,1,Overworld border,X placement of first row of tiles behind Mario
2874,296429,1,Overworld border,Y placement of tile group behind Mario
2875,296451,1,Overworld border,Tile used for group behind Mario
2876,296456,1,Overworld border,Attributes of group behind Mario
2877,296475,1,Overworld border,X placement of second to fourth row of tiles behind Mario
2878,296809,3,ASM,Change to EA EA EA to keep the inactive player from appearing on the map
2879,296884,1,Sprite tilemap related,Tile to use for both halves of Mario's halo on the overworld.
2880,296892,1,Sprite tilemap related,"Properties of left half of Mario's halo on the overworld, in YXPPCCCT format."
2881,296897,1,Sprite tilemap related,"Properties of right half of Mario's halo on the overworld, in YXPPCCCT format."
2882,296907,384,Sprite tilemap related,Overworld sprite tilemap (Mario/Luigi) (2 bytes per 8x8 tile)
2883,297438,384,Sprite tilemap related,"Overworld sprite tilemap (More M/L, Yoshi)

Change $04:8A36 to [42 22 43 22 52 22 53 22] to fix a bug where Yoshi is partially red sometimes, no matter which color he really has."
2884,298458,1,Misc.,"Change to 80 to fix a rather odd bug caused by playing a level immediately after beating a boss in Sunken Ghost Ship's original level (level 018), in which Yoshi will display extremely strangely and goal tapes/spheres will stop Mario rather than making him walk."
2885,298542,1,Music,"Change to 80 to fix the glitch that occurs when Mario defeats one of the Koopalings and the music on the Overworld ""disappears"". Also applies for Custom Music."
2886,298731,3,ASM,"If you change this to EA EA EA, the background water tiles on the overworld will not show up."
2887,298746,1,Misc.,On which submap Mario should be walking upwards after the intro screen (walking to Yoshi's House).
2888,298753,1,Coordinate,"On which X position Mario should be walking upwards after the intro screen (walking to Yoshi's House).


In other words, on this X-position, the intro march will be triggered at the beginning of the game."
2889,298760,1,Coordinate,On which Y position Mario should be walking upwards after the intro screen (walking to Yoshi's House). (To be used with $05B15C.)
2890,298879,8,Misc.,"The overworld tiles that trigger a save prompt.  default is $58 (fortress), $59 (unrevealed fortress, not used in the original game because all tiles are revealed before you play them), $5D (castle), $63 (ghost house), $77,$79 (switch palaces), $7E (yellow dots from special world), $80 (Sunken Ship tile)"
2891,298899,1,ASM,[6C] Changing this to [00] will cause all overworld tiles to show the save prompt when the corresponding level is beaten.
2892,298900,72,Subroutine (JSR),"""Set up saving"" routine. This copies a number of RAM addresses to the table at $1F49. You probably want to copy this to your patch (it contains lots of weirdness you don't want, so don't use the JSL to RTS trick)."
2893,299116,12,Overworld,Table of the no-auto-move levels on the overworld. Each of the values are translevel numbers in 16-bit.
2894,299128,10,Misc.,The list of levels that have hard-coded paths. Each byte represents a level. The value 0xFF means to check for a particular overworld position instead of a level (for the pipe that Chocolate Island 2 leads to). Setting any of these levels to an invalid level (e.g. 0xFE) will disable that hardcoded path.
2895,299138,4,Coordinate,The 16-bit X and Y position in the overworld that will be used for the hardcoded path from the pipe to Chocolate Island 2.
2896,299142,68,Misc.,"This is a list of all of the hardcoded paths, in the same order as the levels defined in $04:9078. The paths are a list of the Layer 1 tiles that Mario would encounter along the path if the path were not hardcoded. Each path ends in a level tile of some kind, which matches a visible level tile in the world."
2897,299210,68,Misc.,"Hardcoded path information. For each tile in the list at $04:9086, there is a corresponding tile in this list. These tiles determine the facing of Mario while walking along that path.

$02: Down

$00: Up

$04: Left

$06: Right"
2898,299278,18,Misc.,Hardcoded path data. A list of offsets into the fields at $04:9086 and $04:90CA. This list corresponds to the list at $04:9078; this offset tells where the tile data for that level's hardcoded path begins.
2899,299318,1,Misc.,DEBUG: Change to F0 to make player warp to Star Road if Select is pressed on top of Yoshi's House (tile 0x56).
2900,299377,1,Sound effect,Sound effect played when warping over a star road tile.
2901,299448,29,Misc.,"Loads Mario/Luigi's powerups, coins, Yoshies, and lives"
2902,299489,1,Music,[80] Music to use when entering a level.
2903,299491,1,Music,[FB] Change to F9 or FC to use sound effect when entering a level.
2904,299566,1,Misc.,Change to 00 to make Mario stay in place after completing a level on the overworld (as opposing to moving to the next level)
2905,299620,1,Misc.,"On the overworld, Mario always faces you after he moves onto a level tile. Change the 09 to a 00 to disable that. Mario will continue facing the last direction he was moving towards after he moves onto a level tile."
2906,299665,3,Debug,"If you replace this with ""4C AF 92"" (JMP $92AF), it will enable to walk in unrevealed paths on the overworld.

(But it will not work correctly with star road warps)"
2907,300052,2,Mario physics,"Speed of Mario on the OW (Higher = faster). First byte is normal ground, second is stairs."
2908,300054,8,Overworld,"Max range for overworld scrolling when walking. 16-bit. Order: left, top, right, bottom.


Due to a discrepancy between these values and the values in $048221, free scrolling can scroll the overworld 1 pixel lower than walking down can.Direction Limits"
2909,300070,10,Misc.,"List of layer 1 overworld tiles that allow mario to walk from one map to another (""exit level tiles"" in lunar magic)"
2910,300636,1,Overworld,"Change to 80 (BRA) to make Mario stand on OW tiles 6A through 6D, instead of swimming through them."
2911,300685,24,Sound effect,"Code that handles what overworld tiles don't play a SFX when stepped on. The tile numbers are used in 16-bit.

$04968D - Change [AD C1] to [80 10] to make overworld star/pipe tiles play the ""beep"" sound when stepped on.

$0496A0 - Sound effect that plays when Mario steps on a level tile. Change to 00 to disable."
2912,300703,6,Sound effect,"Replace [A9 23 00 8D FC 1D] with [EA EA EA EA EA EA] to disable the ""beep"" when Mario moves onto a level tile."
2913,301105,84,Overworld,"Handles moving the camera when Mario moves on the overworld. Checks against the scroll bounds of the overworld at $049416. Does not move the camera when the Valley of Bowser earthquake ($7E1BA0) is happening, or when the player is on a submap."
2914,301189,65,Subroutine (JSR),"Calculator for the players overworld tile position.  Before calling this function $00 must contain the 16 bit X position of the player, $02 must contain the 16 bit Y position of the player, and X must be 0 or 1 (luigi, mario).  Additionally, A must be 16 bit."
2915,301258,1,Overworld,"Initial Y speed of the player when walking up to Yoshi's house. Each frame, he moves up one pixel, and then he's moved down this many 256ths of a pixel. Since the default value for this is #$80, this means Mario moves up #$100-#$80=#$80 pixel 256ths, which is half a pixel."
2916,301296,1,Coordinate,At which Y position Mario should stop the intro march on the overworld (walking to Yoshi's house after start of new game). Default: $78.
2917,301412,170,Overworld,"A big bunch of tables for which exits on the overworld lead to where.


$049964 to $0499A9: Five bytes for each entry that describe where each exit is (the tile Mario enters). First two bytes are Y position ($1F19), then comes X position ($1F21), then finally the submap ($13C3).

$0499AA to $0499EF: Five bytes for each entry that describe where each exit leads (the tile Mario ends at). Same format as above.

$0499F0 to $049A0D: Two bytes for each entry, to additionally describe the target. First comes Y high divided by 16 ($1F21), then comes X high divided by 16 ($1F1F).


If an exit is not present at the exact listed position, Mario is not moved, and tries to exit from the same tile again."
2918,301765,460,Layer 3,"Level names.

It's almost raw tilemaps ready to be uploaded to VRAM (no YXPCCCTT), but if the highest bit is set, it gets cleared and it's the end of the area.

However, it's cut to small chunks. See $04A0FC (0x222FC) for how they're put together."
2919,302370,2,Coordinate,"Position of OW level names. Increase/decrease by 1 to make it move up to the right/left, increase/decrease by 20 to make it move down/upwards.

Note that #$8B should be considered the low byte for the address, not #$50."
2920,302759,162,Misc.,"Two bytes per tile, starts at tile $01 and goes to $51.

First byte is X distance mario moves across tile

Second byte is Y distance mario moves across tile

The distance is based on walking right for a horizontal path

and walking down for a vertical path (see entry for $04:9F49)"
2921,302865,2,Overworld,"[FC F8] Change to [10 04] to allow overworld path tile 36 to be used as the missing water path tile.  Must be combined with $049FB3, $04A020, and $04A04D."
2922,302921,162,Misc.,"Two bytes per tile, starts at tile $01 and goes to $51

If the two bytes are $01,$00 then the tile is a horizontal path

If they are $00,$01 then a vertical path.

No other values were used in game

It seems odd to use two bytes to do this, so it might be worth experimenting with other values"
2923,303027,2,Overworld,"[00 01] Change to [01 00] to allow overworld path tile 36 to be used as the missing water path tile.  Must be combined with $049F11, $04A020, and $04A04D."
2924,303083,81,Misc.,"One byte per tile, starts at tile $01 and goes to $51

Mario pose while walking


0 - Mario Vertical

4 - Mario Horizontal

8 - Mario Swimming Vertical

C - Mario Swimming Horizontal

10 - Entering Level

14 - Climbing

18-FF - Unused


Only multiples of 4 seem to be used, using a value inbetween just seems to result in oddly animated versions of the normal values"
2925,303136,1,Overworld,"[08] Change to [0C] to allow overworld path tile 36 to be used as the missing water path tile.  Must be combined with $049F11, $049FB3, and $04A04D."
2926,303181,1,Overworld,"[36] Change to [87] to allow overworld path tile 36 to be used as the missing water path tile.  Must be combined with $049F11, $049FB3, and $04A020."
2927,303356,186,Layer 3,"How to put level names together.

Format: 16 bits/entry.

First byte contains the offsets to the second and third parts (lowest four bits there is third part, upper four bits there is second), while the second byte (except the highest bit, which is unused) contains the offset to the first part.

Note that those offsets aren't direct, they point to $049C91, $049CCF, or $049CED (note: those offsets are 16bit), which contains the real offsets to $049AC5."
2928,303542,586,Empty,Unused data
2929,304128,307,Overworld border,"Layer 3 Border Tile Data: The 95s, 96s, and 97s are the tiles used for the Mushrooms, Stars, and Fire Flowers (respectively). The overworld border's ""filler"" tiles (tile FE by default) are determined by bytes at: $04A404 (top rows overworld border); $04A40A (first column, left-hand side); $04A410 (second column, left-hand side); $04A416 (top right corner by map shadow); $04A41C (right-hand side column); $04A422 (bottom rows).

$04A530 is the x beside Mario and the Lives in the overword border. Change from 8F to FE to remove it."
2930,304435,6904,Misc.,"Overworld layer 2 data's tilemap data: Tile numbers.


Table is compressed in the LC_RLE2 format"
2931,311339,5709,Misc.,"Overworld layer 2 data's tilemap data: Tile properties (YXPCCCTT).


Table is compressed in the LC_RLE2 format"
2932,317048,96,Overworld,"Which directions you go in after beating a level, indexed by level ID ($13BF).

Format: nnss----

nn = regular exit

ss = secret exit

---- = unknown (unused?)

00 is up, 01 is down, 10 is left, 11 is right."
2933,317981,44,Overworld,"A 22-byte table of Layer 1 overworld tile numbers that change into other tiles, followed by a 22-byte table of the tile numbers that they become.  Entries $09 [53->43], $0A [52->44], and $15 [54->23] correspond to tiles that are unused in the original SMW, so they could be changed to other tile numbers if need be.


(This is how things such as revealing level tiles work: tile numbers from the first list are transformed into the corresponding tiles from the second list when activated.)"
2934,318138,53,Subroutine (JSR),Subroutine that decompresses LC_RLE2 data.
2935,318408,7,Music,"Music tracks used by the different submaps, indexed by submap ID ($1F11)."
2936,318807,54,Subroutine (JSR),Subroutine that decompresses LC_RLE1 data.
2937,318861,1484,Overworld,"A table used by layer 2 events. It contains 0x173 four byte entries. The first two bytes in each entry are for the source offset ($0C8000) (also decides size), the last two are for the target offset ($7F4000)."
2938,320345,242,Overworld,"Table that tells how many layer 2 tiles each event reveals and where in the table ($04DD8D) they start. This table contains 121 16-bit values; one for each event, and one to tell where $04DD8D ends."
2939,320595,285,Subroutine (JSR),Routine that loads the overworld layer 2 events on game load and OW load after cutscenes (possibly at every OW load).
2940,320887,16,Pointer,Pointer to locations in the routine that runs events.
2941,320903,32,Overworld,"VRAM addresses (16-bit) to write each of the destroyed castle/fortress/switch palace tiles to.

Likely not used when LM is done with the ROM."
2942,320935,5,Overworld,"Layer 1 tile numbers that have a destruction event associated with them. Essentially, the ""before"" tiles."
2943,320940,5,Overworld,"Top tile to write after each destruction, in the order of $13D0. The table is only used for two-tile destructions (like the castles), so the first three bytes are normally unused."
2944,320945,5,Overworld,"Bottom/base tile to write after each overworld tile destruction, in the order of $13D0."
2945,320950,32,Overworld,Layer 1 tilemap locations (16-bit) for each of the castle/fortress/switch palace destruction events.
2946,320982,16,Overworld,"Which event numbers will trigger castle/fortress/switch palace tile destruction sequences.  Due to a coding error by Nintendo, the table is treated as 0x18 bytes long when it's really only 0x10 bytes."
2947,320998,8,Overworld,The overworld tiles that will allow triggering a save prompt when an event has already been cleared.  Tile must also exist in the list at $04:8F7F.
2948,321006,82,Subroutine (JSR),Subroutine that runs events at level end.
2949,321120,1,Misc.,Level that triggers overworld Earthquake sequence
2950,321136,1,Sound effect,Castle Destroyed (OW) Sound Effect.
2951,321380,1,Sound effect,SFX that makes the path appear (OW).
2952,321764,44,Overworld,Event numbers corresponding to each of the Layer 1 and Layer 2 event tiles that are loaded offscreen in a clean ROM.
2953,321808,44,Overworld,Table of whether an offscreen event tile is on Layer 1 (00) or Layer 2 (01).
2954,321852,88,Overworld,Location indices (16-bit) for each of the offscreen event tiles in their respective tilemaps.
2955,321940,88,Overworld,"Tile numbers for each of the offscreen events. All entries are 16-bit, with the high byte for Layer 1 tiles being unused."
2956,322216,1,Timer,Delay between laying down individual OW event tiles. Change from 40 to 00 for minimal delay.
2957,322369,1,Misc.,Determines which submap reveals its event tiles at a slower rate (Default value is 03: Forest of Illusion)
2958,322370,1,Misc.,Change from D0 to 80 to make the Forest of Illusion submap reveal its event tiles at the same speed as the other submaps
2959,322731,1,Sound effect,SFX that makes when the level tile appears.
2960,323390,834,Empty,Unused data.
2961,324244,1,Timer,How long until Switch Palace is destroyed.
2962,324257,1,Misc.,No. of times the ! blocks are spawned on OW after switch palace.
2963,324261,1,Sound effect,[1C] Sound played by the switch palace blocks as they fly across the overworld (after pressing a switch).
2964,324266,1,Misc.,How many ! blocks are spawned on OW after switch palace.
2965,324790,10,Stripe Image,"""MARIO"" text in the Lives Exchanger box. Odd bytes are tile numbers. Even bytes are YXPCCCTT properties."
2966,324804,10,Stripe Image,"""LUIGI"" text in the Lives Exchanger box. Odd bytes are tile numbers. Even bytes are YXPCCCTT properties."
2967,324854,4,Stripe Image,Tiles for Mario's halo in the Life Exchange box. Even bytes are tile numbers and odd bytes are their YXPCCCTT properties.
2968,324862,4,Stripe Image,Tiles for Luigi's halo in the Life Exchange box. Even bytes are tile numbers and odd bytes are their YXPCCCTT properties.
2969,324907,250,Misc.,"Main Lives Exchanger routine

$04F56F is X location of Mario on lives exchange

$04F570 is Y location of Mario on lives exchange

$04F575 is X location of Luigi on lives exchange 

$04F576 is Y location of Luigi on lives exchange

$04F57B is the tile to use for Mario on lives exchange

$04F57C is Pal/flip/etc. of Mario on lives exchange

$04F581 is the tile to use for Luigi on lives exchange

$04F582 is Pal/flip/etc. of Luigi on lives exchange"
2970,325157,65,Misc.,"Overworld sprite data - controls 13 of the 16 slots of the overworld sprite tables (the first 3 of the 16 are reserved for clouds). One overworld sprite has 5 bytes:

Byte 1 - sprite number

Byte 2 - X-Pos, low

Byte 3 - X-Pos, high

Byte 4 - Y-Pos, low

Byte 5 - Y-Pos, high


Data is only read once, on titlescreen load. (Which also explains the bug that occurs with the titlescreen showing an unnecessary cloud tile.)"
2971,325222,6,Coordinate,"X positions of the overworld ghost sprites, relative to their corresponding main map ghosts. Two bytes each. The small size of this table is why you can't have ghosts in any slot other than the last three."
2972,325228,6,Coordinate,"Y positions of the overworld ghost sprites, relative to their corresponding main map ghosts. Two bytes each. The small size of this table is why you can't have ghosts in any slot other than the last three."
2973,325385,1,Overworld,"Submaps on where to disable the thunder effect (originally used in Valley of Bowser).

#$80 - Main map

#$40 - Yoshi's Island

#$20 - Vanilla Dome

#$10 - Forest of Illusion

#$08 - Valley of Bowser

#$04 - Special World

#$02 - Star World

#$01 - Unused

Note that the bits in this address disables the thunder in this submap, so to disable it everywhere, #$FF is the correct value. This address affects both colors and sound."
2974,325431,1,Music,Sound effect for the thunder in Valley of Bowser.
2975,325444,1,Timer,How long the lightning flash stays on screen (Bowser's Valley)
2976,325451,35,Subroutine (JSR),"Subroutine which is used for the flashing effect in Valley of Bowser.

$04F754 - Color which is animated by this routine. Can be changed to 00 to have an all round lightning effect (everything flashes)."
2977,325673,10,Misc.,"Table which determines on which OW submaps sprites are disabled. myvfbswx format, where m = main, y = Yoshi's Island, v = Vanilla Dome, b = Valley of Bowser, s = Special World, w = Star World, x = not used."
2978,325727,22,Pointer,Overworld sprite pointer table.
2979,326216,1,Overworld,"Determines the three consecutive layer 1 tiles (this value +0, +1, or +2) that cause an overworld Cheep-Cheep to jump when walked across."
2980,326253,1,Misc.,Flip to use when approaching overworld Cheep-Cheep from left
2981,326255,1,Sprite tilemap related,Base Palette/flip/etc. of overworld Cheep-Cheep
2982,326260,1,Misc.,Maximum height overworld Cheep-Cheep can jump
2983,326265,1,Sound effect,Sound overworld Cheep-Cheep makes
2984,326270,1,Sprite Misc.,No. of frames used by OW Cheep-Cheep's splash.
2985,326322,1,Sprite tilemap related,Tile to use for overworld Cheep-Cheep (1)
2986,326328,1,Sprite tilemap related,Tile to use for overworld Cheep-Cheep (2)
2987,326395,1,Sprite tilemap related,Tile to use for overworld Piranha Plant (1)
2988,326401,1,Sprite tilemap related,Tile to use for overworld Piranha Plant (2)
2989,326403,1,Sprite tilemap related,Palette/flip/etc. of overworld Piranha Plant
2990,326456,1,Misc.,X speed of overworld clouds
2991,326461,1,Misc.,Y speed of overworld clouds
2992,326468,3,Misc.,Change from 20 62 FE to EA EA EA to make the overworld clouds not show up (even if you use sprite slots for them).
2993,326501,1,Sprite tilemap related,Pal/flip/etc. of overworld cloud (left half)
2994,326518,1,Sprite tilemap related,Pal/flip/etc. of overworld cloud (right half)
2995,326521,1,Sprite tilemap related,Tile to use for overworld clouds
2996,326854,1,Sprite tilemap related,Tile to use for Yoshi's House smoke (1)
2997,326867,1,Sprite tilemap related,Tile to use for Yoshi's House smoke (2)
2998,326958,1,Sprite tilemap related,Pal/flip/etc. of overworld Bowser (facing left)
2999,326965,1,Sprite tilemap related,Pal/flip/etc. of overworld Bowser (facing right)
3000,326968,1,Sprite tilemap related,Tile to use for overworld Bowser in clown car
3001,327042,1,Sprite Misc.,Overworld sprite slot to use as Forest of Illusion's ghost (default: slot 0F). This ghost won't appear on submaps unless certain events are beaten.
3002,327049,1,Sprite Misc.,"Which event numbers reveal the Forest of Illusion ghost, in the format of $1F02. The address number to use is two bytes at $04FD86 (x27F86).

Default value: 12, with address $1F07 (events 2B and 2E)."
3003,327078,1,Sprite tilemap related,Pal/flip/etc. of overworld Boo (facing left)
3004,327085,1,Sprite tilemap related,Pal/flip/etc. of overworld Boo (facing right)
3005,327088,1,Sprite tilemap related,Tile to use for overworld Boo
3006,327312,71,Sprite subroutine (JSR),Overworld sprite speed routine.
3007,327601,79,Empty,Unused data.
3008,360661,3,ASM,"Handles pipe colours in horizontal levels. Change to:

EA - Pipes change colour every half-screen.

EAEA - Every 1/4 screen (every 2 pipes).

EAEAEA - Every pipe.

EAEA0A - Every half pipe (every pipe is 2-toned).

EAA9xx - All pipes are same colour (xx=00, 01, 02 or 04).

Must be combined with $05:87A4.


Warning: Does not have any effect on ROMs LM 1.7 has been used on."
3009,360891,64,Misc.,"Map16 tileset-specific table. Each bit (from high to low) corresponds to one tile. When the game sets up tile pointers, if the bit is set, it writes and then increments (by 2) P1 (which is initialized to the value at $058000 + (Tileset * 2)), otherwise it writes and increments P2 (initialized to $(0D)8000)."
3010,361160,114,Subroutine (JSR),This routine is used within the level clear to set $7EC800-$7EFFFF to #$25.
3011,361274,114,Subroutine (JSR),This routine is used within the level clear to set $7FC800-$7FFFFF to #$00.
3012,361495,192,Misc.,"Level mode attribute tables (seen in LM's “Change Properties in Header” -> “SNES Registers and Level Modes”). 6 tables each 32 bytes long, each level mode refers to each byte of all tables.


$058417-$058436: Table of Screen Mode values. Stores to $5B.


$058437-$058456: Table of TM&TMW values. Stored to $0D9D.


$058457-$058476: Table of TD&TSW values. Stored to $0D9E.


$058477-$058496: Table of CGADSUB values. Stored to $40.


$058497-$0584B6: Table of Fight Mode values. Stored to $0D9B.


$0584B7-$0584D6: Table containing the default YXPPCCCT sprite tile settings. Stored to $64.

It's used for determining whether or not layer priority should work in a level mode; the value #$30 means that it won't work, while #$20 means that it will.


Change at $058455-$058456 (level mode $1E and $1F in $058437) from [$01 $02] to [$05 $06] (this sets bit 2, originally, all 32 but the last two were set) to fix an oversight that layer 3 status bar is overlaid by the transparent layer.Default table values"
3013,361687,4,Timer,"Hundreds digits for the four time limits that can be specified in the level header.  Default is $00, $02, $03, $04 for time limits of 0, 200, 300, and 400.  Tens and ones digits are set to 0 at $05858A."
3014,361691,1,Music,Level Music - Here We Go! [02] (change to any other value to change what music plays by default in grassland levels)
3015,361692,1,Music,Level Music - Cave Drums [06] (change to any other value to change what music plays by default in cave levels)
3016,361693,1,Music,Level Music - Piano [01] (change to any other value to change what music plays by default in rope/sky levels)
3017,361694,1,Music,Level Music - Castle [08] (change to any other value to change what music plays by default in Castles and Fortresses)
3018,361695,1,Music,Level Music - Ghost House [07] (change to any other value to change what music plays by default in Ghost Houses)
3019,361696,1,Music,Level Music - Water [03] (change to any other value to change what music plays by default in water levels)
3020,361697,1,Music,Level Music - Boss Battle [05] (change to any other value to change what music plays by default during boss battles)
3021,361698,1,Music,Level Music - Switch Palace [12] (change to any other value to change what music plays by default in Switch Palaces)
3022,362404,3,ASM,Same as $05:80D5. Both must be changed to the same values.
3023,363157,2,Coordinate,Until which Y position (default : #$01B0) all Map16 tiles' graphics should be updated.
3024,363425,1,Objects,"Which tileset's layer 2 always uses palettes 4-7 in horizontal levels, never 0-3. Default is 03 (Underground 1). To disable this effect, set it to anything invalid, like FF."
3025,363653,1,Objects,"Which tileset's layer 2 always uses palettes 4-7 in vertical levels, never 0-3. Default is 03 (Underground 1). To disable this effect, set it to anything invalid, like FF."
3026,364057,487,Empty,Filled with FF.
3027,364544,135,Pointer,"24-bit layer 3 pointer. 3 pointer addresses per FG/BG tileset (tilesets 0-E). First pointer for low and high tides, second pointer for low tide only, third pointer for tileset specific layer 3 (although technically, all layer 3 settings here can be tileset specific)."
3028,364679,525,Layer 3,"Layer 3 cage tiles placement, stripe image format."
3029,365204,693,Layer 3,"Layer 3 crusher tiles placement, stripe image format."
3030,365897,149,Layer 3,"Layer 3 tide tiles placement, stripe image format."
3031,366046,1081,Layer 3,"Layer 3 ghost house fog tiles placement, stripe image format."
3032,367127,201,Layer 3,"Layer 3 goldfish tiles placement, stripe image format."
3033,367328,1857,Layer 3,"Layer 3 castle windows tiles placement, stripe image format."
3034,369185,834,Layer 3,"Layer 3 underground rocks tiles placement, stripe image format."
3035,370019,29,Empty,Unused data
3036,370048,16,Layer 3,VRAM positions for the different lines of the message boxes. Actually the first half of stripe images; the second half is the same for all of those. It's at $05B1F7.
3037,370064,23,Misc.,"Which levels have message boxes. Different values here corresponds to $13BF. If the highest bit (#$80) is set, it tells that message 2 is used for that level; if clear, message 1 is used.

Most likely not used when LM is done with the ROM."
3038,370137,2854,Layer 3,"All the message box texts.

They're almost raw tilemaps (doesn't contain YXPCCCTT data) to be uploaded to VRAM, but setting the highest bit makes it add a newline too."
3039,372998,2,Misc.,"Time when to show text after expanding/shrinking the Message Box window.


1st byte determines when to show the message.

2nd byte determines how fast to hide the message.


Edited values can't be higher than the default hex values."
3040,373000,2,Misc.,"Expanding/Shrinking size of Message Box window.


Second digit of both bytes can't be other numbers than 0."
3041,373002,2,Misc.,Expanding/Shrinking speed of Message Box window.
3042,373004,399,Subroutine (JSL),"The subroutine that displays the message from a message box.  It handles the windowing HDMA, the stripe image upload, and things such as teleporting to the overworld after the intro screen.


$05B129: [9C 9F 0D] Change to [EA EA EA] to prevent HDMA from getting disabled AFTER a message box has been displayed. Use with $05B296.

$05B15C: [8E] The Y position on which to start the march to Yoshi's House after the intro screen. To be used with $048F08.

$05B15D: [8D 19 1F] ASM code that stores the player's starting Y position to its RAM address, $1F19. Lunar Magic changes this to [EA EA EA] if you move the Mario OW sprite around, thus disabling the intro march (and its effects, such as storing '0' to the amount of levels cleared). If you want to undo this effect, change it back to [8D 19 1F].

$05B160: Side exit subroutine. It can be JSL'd to.

$05B189: [D0 CF] Change to [EA EA] to prevent the message that pops up in the intro screen from exiting the level. (It will act exactly the same as a message in any other level.)

$05B21D: [39] Tile properties of the Layer 3 tiles in message box messages in YXPCCCTT format. (Note: Lunar Magic ASM hacks render this address unused.)

$05B296: [8D] Change to [0C] to prevent HDMA from getting disabled WHILE a message box is being displayed. Use with $05B129."
3043,373403,64,Sprite tilemap related,"This is the 8x8 tilemap data for the sprites used on the switch palace messages (dotted and '!' block).  The first byte in each in the tile, the second byte is the YXPPCCCT data."
3044,373545,33,Subroutine (JSL),"""Give coins"" subroutine.  If you JSL to it, it will give the player the number of coins equal to the value in A."
3045,373578,17,Subroutine (JSL),"Subroutine that gives the player a single coin. It handles the green star block as well.

$05B34E is the sound this generates."
3046,373621,488,Layer 3,Title screen stripe image data (the part that appears right as the title screen loads up).
3047,374526,203,Layer 3,"Tilemap of the erase file select dialog. (""ERASE MARIO A . . . EMPTY"", etc.)"
3048,374729,169,Layer 3,"Tilemap of the file select dialog. (""MARIO A . . . EMPTY"", etc.)"
3049,374898,85,Misc.,1 / 2 player game stripe image data.
3050,375099,48,Misc.,"Destination VRAM addresses for animated tiles.  There are 6 bytes, 3 16-bit addresses, for each of the 8 possible animation frames (index = (frame & 7) * 6), and their values get stored to $0D7C, $0D7E, and $0D80 during the animation handling routine.  (The last 6 bytes are actually unused, since SMW never uses animation frame 7 for anything.)"
3051,375147,24,Misc.,"This table determines how a certain tile should vary its animation.  00 = always the same, 01 = change depending on $14AD, $14AE, or $14AF (P-switch timers and on/off switch), 02 = change depending on $1931 (FG/BG tileset number).  It is indexed by the animation frame times 3, or (($14 & #$07) * 3), and each of the 8 possible animation frames uses one group of 3 bytes.  Note that the last 6 bytes overlap with the table at $05B97D."
3052,375165,15,Misc.,"Table that determines, for tile animations that can have one of two states, which address to use to determine the state (i.e. any animation for which its corresponding value in the table at $05B96B is 01).  The address used is $14AD plus this value, so 00 = blue P-switch, 01 = gray P-switch, 02 = on/off switch.  This table is only 15 bytes long rather than 24 because all of the 2-state animations are updated on animation frame 0, 1, 2, 3, or 4, never 5, 6, or 7.  Note also that the last byte overlaps with the table at $05B98B."
3053,375179,14,Misc.,"Table, indexed by FG/BG tileset. Determines which group of animated tiles to use for a certain tileset, such as conveyor belts, stars, lava, etc."
3054,375193,416,Misc.,"Frame data for animated tiles.  Each group of 8 bytes is one set of tile animation, and each pair of bytes is one frame. The numbers are offsets forming the lower two bytes of pointers to the table data at $7E7D00. (For instance, the first two bytes = 00 95 -> data at $7E9500.) There seems to be no discernable pattern to which tiles are uploaded where in VRAM, though."
3055,375609,109,Subroutine (JSL),"The routine that handles tile animation.  It reads the animation data from the table at $05B999 and, based on that and a few other factors (such as tileset and blue P-switch status), sets the pointers to the tile data in the table at RAM $7E0D76."
3056,375718,90,Empty,Unused data.
3057,375943,30,Pointer,Pointers to the scroll sprite main routines for Layer 1 scrolling.
3058,375992,30,Pointer,Pointers to the scroll sprite main routines for Layer 2 scrolling.
3059,376048,30,Pointer,Pointers to the scroll sprite init routines for Layer 1 scrolling.
3060,376087,30,Pointer,Pointers to the scroll sprite init routines for Layer 2 scrolling.
3061,376486,3,ASM,[9C 11 14] Change this to EA EA EA to make Layer 2 Sideways Scroll not disable horizontal scroll.
3062,378098,6,ASM,"Change from [85 22 A9 01 85 23] to [38 69 02 85 22 EA] in order to make the Layer 3 tides scroll to the right instead of the left. (Nothing is stored to the high byte of Layer 3 X position, however, so if you adjusted the tide to be asymmetrical, this may not give the wanted result.)


Only applies to the graphical part of the Layer 3 tide."
3063,378651,1,Misc.,"Layer 2 on/off switch lower limit. The lower this number, the further down the screen layer 2 will go before stopping."
3064,378653,1,Misc.,"Layer 2 on/off switch upper limit. The higher this number, the further up layer 2 will go before it will start descending again."
3065,378812,3,Misc.,Change to A9 08 EA and the background will start scrolling fast with generator F4 without having to touch platform C1
3066,378827,2,Misc.,"Maximum speed of layer 2 scrolling during ""Fast BG Scroll"" (sprite F4)."
3067,379484,5,Sprite Misc.,"What direction Layer 2 will start out moving when each variant of the Layer 2 Scroll sprite (sprite EA) is used.  In order: Range 12, Range 08, Range 05, Range 06, Range 05 (alternate).  00 -> down, 01 -> up."
3068,379893,10,Timer,"Determines the distance for Layer 2 to scroll when using each variant of the Layer 2 Scroll sprite (sprite EA), outside of the acceleration/deceleration period.  In order: Range 12, Range 08, Range 05, Range 06, Range 05 (alternate); each type corresponds to a pair of bytes here.  The first byte of each pair is for the first movement, and the second is for every time it moves after that.  The data is roughly how much time will be spent scrolling at full speed, not the actual distance, so the scroll speed and acceleration affect this."
3069,379903,8,Subroutine (JSL),Jumps to Level End Scorecard Subroutine
3070,379926,75,Layer 3,"Start of course clear message tilemap.

$05CC1A (10 bytes) is 'MARIO' tiles and attributes used in the end-of-level scorecard

$05CC28 (12 bytes) is ""COURSE"" and attributes at end of level scorecard.

$05CC36 (10 bytes) is ""CLEAR"" and attributes at end of level scorecard."
3071,380001,5,Misc.,'LUIGI' letters used in the end-of-level scorecard (uses the same attributes as the MARIO letters)
3072,380006,2,Misc.,Change to 80 1C to prevent the player from getting a free 1UP at the goal if the tens digit of your bonus star counter and the tens and ones digits of your time are all the same
3073,380037,1,Misc.,"Change to 00 to disable ""Course Clear"" from appearing."
3074,380100,1,Misc.,Number of LUIGI tiles to use in the end-of-level scorecard
3075,380204,1,Timer,Time it takes for Bonus! to appear after hitting the goal tape.
3076,380223,35,Layer 3,"Stripe image for the bonus star counter in end of level scorecard.

$05CD3F is the main ""BONUS! ★x__"" text, with the __ being blank tiles reserved for the bottom of the number of stars.

A second header starting at $05CD5A handles two additional blank tiles, used for the top of the numbers."
3077,380258,20,Layer 3,"Table of tiles used to display the amount of bonus stars received in the end level routine.

Starts with top tile of 0, bottom tile of 0, top tile of 1, bottom tile of 1, etc. Notably, there's no header OR end byte."
3078,380281,1,ASM,Changing this byte to [80] will disable the bonus counter in the 'Course Clear' screen.
3079,380376,1,ASM,"Changing this byte to [80] will disable the drumroll sound effect, and the Timer and score tallying at the 'Course Clear' screen."
3080,380388,1,Sound effect,Drum Roll (tallying points) Sound Effect.
3081,380538,1,Misc.,Time Multiplier for every second (use with $05CE92) must be a multiple of 10.
3082,380562,1,Misc.,Time Multiplier for every second (use with $05CE7A) must be a multiple of 10.
3083,380699,3,ASM,Change to EA EA EA and the player will receive no bonus stars at the end of the level.
3084,380745,1,Sound effect,Drum Roll Finishing Sound Effect.
3085,380906,22,Empty,Empty.
3086,380928,1536,Misc.,"Tile data for all Layer 1 overworld tiles, #$00-#$BF (but BF doesn't show up in LM no matter what you set it to). 8 bytes per 16x16 tile = 2 bytes per 8x8 tile. (TTTTTTTT YXPCCCTT.)

Order in which the pairs of bytes go inside a 16x16 tile: upper-left, bottom-left, upper-right, bottom-right."
3087,382472,96,Overworld,"Which events are triggered by which level. Indexed by level ID, aka $13BF."
3088,382568,160,Empty,Unused data.
3089,382728,8,Level data,"Layer 1, 2 (FG,BG) Initial Position. FG values (4 bytes) are first. BG values (4 values) are last."
3090,382736,16,Level data,Vertical scroll settings for layer 2 background. The values in this table are for RAM $7E:1414. The index to this table is the %ssss from the %ssssyyyy in table ROM $05:F000.
3091,382752,16,Level data,"Horizontal scroll settings for layer 2 background. The values in this table are for RAM $7E:1413. The index to this table is the %ssss from the %ssssyyyy in table ROM $05:F000.


The maximum %ssss in SMW is %0111, thus indexes %1000 through %1111 are unused and are available if you want to invent more scroll settings for layer 2."
3092,382768,16,Level data,Mario Y-Position (main and midway entrances)
3093,382784,16,Level data,Mario Y-Subscreen Positions (main and midway entrances)
3094,382800,8,Level data,Mario X-Positions (main and midway entrances). 8th byte unused?
3095,382808,8,Level data,Mario X-Subscreen Positions (main and midway entrances). 8th byte unused?
3096,382816,6,Misc.,The tileset that each no-Yoshi intro intro is used with. Same order as $05D766 (0x2D966). The last one seems to be unused.
3097,382822,18,Pointer,"List of 6 pointers to the ""Get off Yoshi"" level intros. In order: Ghost House, Castle Entrance 1, No Yoshi Sign 1, No Yoshi Sign 2, No Yoshi Sign 3, Castle Entrance 2."
3098,382840,18,Pointer,"List of pointers to the Layer 2's for the ""Get off Yoshi"" intro levels. Same order as for 2D966"
3099,382870,857,Subroutine (JSL),"The main level data loading routine.

$05DAE5 is which level has the variable exits that changes depending on coins, timer, and yoshi coins. To disable the variable properties of this level, change $05DAE6 to 80.

$05DA19 is the start of the code for checking whether or not the level should use a No-Yoshi intro. Change to [4C D7 DA] to disable all No-Yoshi intros, including those for ghost houses and castles."
3100,383517,1,Level number,"Any level with a translevel number greater than or equal to this will use the ""No Yoshi Sign 2"" intro if the no-Yoshi intro is not disabled, regardless of tileset."
3101,383563,1,Level number,One of five translevels that will use a dark-background castle intro if the level is set to tileset 1 and a no-Yoshi intro is enabled. This one is 31 (Front Door) by default.
3102,383567,1,Level number,One of five translevels that will use a dark-background castle intro if the level is set to tileset 1 and a no-Yoshi intro is enabled. This one is 32 (Back Door) by default.
3103,383571,1,Level number,One of five translevels that will use a dark-background castle intro if the level is set to tileset 1 and a no-Yoshi intro is enabled. This one is 34 (#7 Larry's Castle) by default.
3104,383575,1,Level number,One of five translevels that will use a dark-background castle intro if the level is set to tileset 1 and a no-Yoshi intro is enabled. This one is 35 (Valley Fortress) by default.
3105,383579,1,Level number,One of five translevels that will use a dark-background castle intro if the level is set to tileset 1 and a no-Yoshi intro is enabled. This one is 40 (#3 Lemmy's Castle) by default.
3106,383727,186,Subroutine (JSR),"The routine that loads level data for the sublevels of the level with the variable screen exits (i.e. level 24, or Chocolate Island 2, in the original SMW)."
3107,383752,18,Pointer,Pointers to the layer 1 data that should be loaded for Chocolate Island 2.
3108,383770,18,Pointer,Pointers to the sprite data that should be loaded for Chocolate Island 2.
3109,383788,18,Pointer,Pointers to the layer 2 data that should be loaded for Chocolate Island 2 (all identical).
3110,383913,1,Level number,Level number for bonus game after gaining 100 bonus stars from a goal tape.
3111,383914,1,Level number,Level number for yoshi wings bonus stage.
3112,383916,29,Subroutine (JSR),The routine that handles setting the level to warp to when Yoshi gets the wings. (Level xC8.)
3113,383923,1,Misc.,"Change to 60 (RTS) to make it so Yoshi wings use the normal screen exit instead of forcing a warp to level C8/1C8. This allows you to use pipes/doors in Yoshi wings levels. However, bonus games still remain incompatible. (Make sure to add a screen exit on every screen a player could possibly collect Yoshi wings if you use this.)"
3114,383945,2,Coordinate,Position of lives counter on the overworld.
3115,384058,12,Subroutine (JSR),"Hex -> Dec subroutine, ends with RTS. Only used for displaying the player's lives on the overworld.


Input: A (8-bit) = the value to be converted


Output:

A = ones digit.

X = tens digit."
3116,384070,954,Empty,Filled with FF.
3117,385024,1536,Pointer,Level data pointer table (Layer 1)
3118,386560,1536,Pointer,Level data pointer table (Layer 2)
3119,388096,1024,Pointer,Level data pointer table (Sprites)
3120,389120,512,Level data,"Table for each level in ssssyyyy format. ssss = layer 2 scroll settings, yyyy = Y position (from LM's method 1)."
3121,389632,512,Level data,"Table for each level in ttaaaxxx format. tt = tide/tileset specific Layer 3 BG to use, aaa = Mario action to start the level out with, xxx = initial X position (one of which is not selectable by LM, X = 10)."
3122,390144,512,Level data,"Table for each level in mmmmffbb format. mmmm = screen for midway entrance, ff = FG initial position, bb = BG initial position."
3123,390656,512,Level data,"Table for each level in iuveeeee format. i = disable No Yoshi Intro flag, u = unknown vertical level positioning flag, v = vertical level positioning flag, eeeee = screen # that the primary entrance is on."
3124,391168,512,Level data,"Part of the Secondary Entrance information; each byte is one of the secondary entrances. The byte is the low byte of the destination level number. The high bit (0x100 vs. 0x000) is stored in another table.


Note that, as of LM v2.50, this table may be dynamically moved to accomodate the size of the new secondary exits. It can be found at read3($0DE191)."
3125,391680,512,Level data,"Part of the Secondary Entrance information; each byte is one of the secondary entrances. The low 4 bits are the Y position for Mario; offsets into a table at SNES addresses $05:D730 and $05:D740. The next two bits are the FG initial position, indexing into the table at SNES address $05:D708. The highest 2 bits are the BG initial position, indexing into the table at SNES address $05:D70C.


Note that, as of LM v2.50, this table may be dynamically moved to accomodate the size of the new secondary exits. It can be found at read3($0DE198)."
3126,392192,512,Level data,"Part of the secondary level information. The low 5 bits are for the destination screen number. The high 3 bits are the X position for Mario; offsets into a table at SNES addresses $05:D750 and $05:D758.


Note that, as of LM v2.50, this table may be dynamically moved to accomodate the size of the new secondary exits. It can be found at read3($0DE19F)."
3127,392704,512,Level data,"Part of the Secondary Entrance data; each byte corresponds to an entrance. The lowest 3 bits are the Mario action. The next bit is the high bit of the secondary entrance's level number. The highest bit is set when the destination level should be slippery.


Note that, as of LM v2.50, this table may be dynamically moved to accomodate the size of the new secondary exits. It can be found at read3($05DC81)."
3128,425984,99,Level data,"Level 012, 019, 01E, 025-092, 09C-0BC, 10C, 112, 124, 129, 12E, 12F, 131, 133, 137-192, 19C-1BA"
3129,426083,90,Level data,Unused level: Ride Among the Clouds
3130,426173,123,Level data,Unused level: Mushroom Scales
3131,426296,282,Level data,Unused level: Boss Test
3132,426578,6,Level data,"Level 09B, 19B"
3133,426584,6,Level data,"Level 095, 098-09A, 195, 198-19A"
3134,426590,6,Level data,"Level 096, 097, 196, 197"
3135,426596,135,Level data,Unused level: Lava Cave (Layer 2)
3136,426731,177,Level data,Unused level: Lava Cave
3137,426908,15,Level data,Unused level: Twin Blocks
3138,426923,342,Level data,Unused level: Beta level 01A.
3139,427265,60,Level data,Unused level: Beta level 01A (Layer 2)
3140,427325,36,Level data,Unused level: Pipe 'n' Ground
3141,427361,42,Level data,"Level 093, 194"
3142,427403,42,Level data,"Level 094, 193"
3143,427445,78,Level data,Level 0C7
3144,427523,24,Level data,Level 0C5
3145,427547,6,Level data,"Level 0C4, 0EB, 0F0, 0FB, 1DA, 1E6, 1E7, 1F9 (Layer 2)"
3146,427553,21,Level data,"Level 0EB, 0F0, 0FB, 1DA, 1E7, 1F9"
3147,427574,6,Level data,"Level 0CC, 0D5, 0D9, 0DF, 0E2, 0E5, 1DE"
3148,427580,24,Level data,Level 0FF
3149,427604,33,Level data,"Level 000, 100"
3150,427637,18,Level data,Unused level: Ghost House Exit
3151,427655,6,Level data,"Level 1EB, 1F6"
3152,427661,67,Level data,Level 014
3153,427728,91,Level data,Level 11B
3154,427819,67,Level data,Level 121
3155,427886,64,Level data,Level 008
3156,427950,69,Level data,Level 0CA
3157,428019,69,Level data,Level 1D8
3158,428088,69,Level data,Level 1D7
3159,428157,66,Level data,Level 0C9
3160,428223,30,Level data,Level 003
3161,428253,283,Level data,Level 105
3162,428536,55,Level data,Level 1CB
3163,428591,388,Level data,Level 106
3164,428979,43,Level data,Level 1CA
3165,429022,655,Level data,Level 103
3166,429677,64,Level data,Level 1FD
3167,429741,230,Level data,Level 102
3168,429971,30,Level data,Level 1FF
3169,430001,76,Level data,Level 1BE
3170,430077,370,Level data,Level 101
3171,430447,118,Level data,Level 1FC
3172,430565,503,Level data,Level 015-017
3173,431068,151,Level data,Level 0FD
3174,431219,250,Level data,Level 0E3
3175,431469,192,Level data,Level 009 (Layer 2)
3176,431661,353,Level data,Level 009
3177,432014,121,Level data,Level 0E9
3178,432135,116,Level data,Level 004
3179,432251,34,Level data,Level 0FA
3180,432285,83,Level data,"Level 0DE, 0F9"
3181,432368,95,Level data,Level 0FE
3182,432463,18,Level data,Level 0C4
3183,432481,445,Level data,Level 005
3184,432926,151,Level data,Level 0F4
3185,433077,407,Level data,Level 006
3186,433484,55,Level data,Level 0D2
3187,433539,61,Level data,Level 0C3
3188,433600,110,Level data,Level 007
3189,433710,145,Level data,Level 0E8
3190,433855,165,Level data,Level 0E7 (Layer 2)
3191,434020,313,Level data,Level 0E7
3192,434333,151,Level data,Level 0E6
3193,434484,316,Level data,Level 00A
3194,434800,130,Level data,Level 0C2
3195,434930,130,Level data,"Level 013, 0EC, 0EE"
3196,435060,172,Level data,"Level 0ED, 0F2"
3197,435232,47,Level data,Level 0F1
3198,435279,18,Level data,Level 0E4
3199,435297,268,Level data,Level 10B
3200,435565,76,Level data,Level 1C6
3201,435641,71,Empty,Unused data
3202,435712,745,Level data,Level 11A
3203,436457,85,Level data,Level 1EF
3204,436542,33,Level data,Level 1EF (Layer 2)
3205,436575,841,Level data,Level 118
3206,437416,97,Level data,Level 1C3
3207,437513,271,Level data,"Level 107, 1FB"
3208,437784,101,Level data,Level 1EA
3209,437885,824,Level data,Level 10A
3210,438709,133,Level data,Level 1C2
3211,438842,151,Level data,Level 1F7
3212,438993,337,Level data,Level 119
3213,439330,190,Level data,Level 1F5
3214,439520,320,Level data,Level 11C
3215,439840,70,Level data,Level 1F4
3216,439910,229,Level data,Level 1F3
3217,440139,162,Level data,Level 1F3 (Layer 2)
3218,440301,42,Level data,Level 1F2
3219,440343,495,Level data,Level 109
3220,440838,45,Level data,Level 1F1
3221,440883,54,Level data,Level 1F0
3222,440937,352,Level data,Level 001
3223,441289,106,Level data,Level 0D8
3224,441395,187,Level data,Level 002
3225,441582,33,Level data,Level 0CB
3226,441615,167,Level data,Level 00B
3227,441782,247,Level data,"Level 0E0, 0E1"
3228,442029,748,Level data,Level 00F
3229,442777,43,Level data,Level 0BF
3230,442820,433,Level data,Level 010
3231,443253,46,Level data,Level 0C1
3232,443299,203,Level data,Level 00E
3233,443502,39,Level data,Level 00E (Layer 2)
3234,443541,127,Level data,Level 0DC
3235,443668,69,Level data,Level 0DC (Layer 2)
3236,443737,403,Level data,Level 0DB
3237,444140,151,Level data,Level 0DA
3238,444291,454,Level data,Level 011
3239,444745,27,Level data,Level 0C6
3240,444772,1692,Empty,Filled with $FF.
3241,446464,220,Level data,Level 00C
3242,446684,24,Level data,Level 0F3
3243,446708,226,Level data,Level 00D
3244,446934,100,Level data,Level 0DD
3245,447034,465,Level data,Level 11E
3246,447499,744,Level data,Level 120
3247,448243,545,Level data,Level 123
3248,448788,46,Level data,Level 1F8
3249,448834,151,Level data,Level 1BC
3250,448985,229,Level data,Level 020
3251,449214,207,Level data,"Level 11D, 1E8, 1E9"
3252,449421,837,Level data,"Level 11D, 1E8, 1E9 (Layer 2)"
3253,450258,116,Level data,Level 1FA
3254,450374,21,Level data,Level 1E6
3255,450395,425,Level data,Level 11F
3256,450820,36,Level data,Level 1DF
3257,450856,91,Level data,Level 1C1
3258,450947,135,Level data,Level 122
3259,451082,253,Level data,Level 01F
3260,451335,317,Level data,Level 0D6
3261,451652,396,Level data,"Level 022, 0D0, 0D1"
3262,452048,414,Level data,"Level 0F5, 0F6"
3263,452462,52,Level data,Level 0BE
3264,452514,115,Level data,Level 021
3265,452629,130,Level data,Level 0FC
3266,452759,238,Level data,Level 024
3267,452997,118,Level data,Level 0CF
3268,453115,181,Level data,Chocolate Island 2 - Level 1
3269,453296,91,Level data,Chocolate Island 2 - Level 2
3270,453387,103,Level data,Level 0CE
3271,453490,76,Level data,Chocolate Island 2 - Level 3
3272,453566,102,Level data,Chocolate Island 2 - Level 4
3273,453668,90,Level data,Level 0CD
3274,453758,75,Level data,Chocolate Island 2 - Level 5
3275,453833,286,Level data,Level 023
3276,454119,79,Level data,Level 0D7
3277,454198,199,Level data,Level 01B
3278,454397,352,Level data,Level 0EF
3279,454749,263,Level data,Level 117
3280,455012,505,Level data,Level 1ED
3281,455517,205,Level data,Level 1EC
3282,455722,210,Level data,Level 1EC (Layer 2)
3283,455932,21,Level data,Level 1EE
3284,455953,40,Level data,Level 1C0
3285,455993,2759,Empty,"Filled with $FF.

464 bytes at $06F600 used for LM's Map16 custom behavior routine."
3286,491520,24,Level data,Ghost house entrance
3287,491544,6,Level data,Empty level (header only). Used as layer 2 when no background is needed.
3288,491550,15,Level data,Castle entrance 1
3289,491565,33,Level data,Level 104
3290,491598,18,Level data,No Yoshi sign entrance 1
3291,491616,33,Level data,Unused level: Ghost House Exit
3292,491649,15,Level data,Unused level: Three bushes
3293,491664,15,Level data,Castle entrance 2
3294,491679,18,Level data,No Yoshi sign entrance 2
3295,491697,18,Level data,No Yoshi sign entrance 3
3296,491715,42,Level data,Level 108
3297,491757,19,Empty,Empty
3298,491776,1204,Level data,Level 01D
3299,492980,303,Level data,Level 0EA
3300,493283,488,Level data,Level 01C
3301,493771,106,Level data,Level 0C0
3302,493877,151,Level data,Level 0BD
3303,494028,337,Level data,Level 01A
3304,494365,45,Level data,Level 01A (Layer 2)
3305,494410,109,Level data,Level 0D4
3306,494519,51,Level data,Level 0D4 (Layer 2)
3307,494570,42,Level data,Level 0D3
3308,494612,178,Level data,Level 018
3309,494790,229,Level data,Level 0F8
3310,495019,249,Level data,Level 0F7
3311,495268,893,Level data,Level 116
3312,496161,18,Level data,Level 1E5
3313,496179,151,Level data,Level 1E4
3314,496330,178,Level data,Level 115
3315,496508,102,Level data,Level 115 (Layer 2)
3316,496610,451,Level data,Level 1E3
3317,497061,75,Level data,Level 1E3 (Layer 2)
3318,497136,366,Level data,Level 1E2
3319,497502,30,Level data,Level 1E2 (Layer 2)
3320,497532,135,Level data,Level 0C8
3321,497667,100,Level data,"Level 114, 1D9"
3322,497767,258,Level data,Level 1DD
3323,498025,109,Level data,"Level 1DB, 1DC"
3324,498134,235,Level data,Level 113
3325,498369,151,Level data,Level 1BB
3326,498520,556,Level data,Level 10F
3327,499076,94,Level data,Level 1BF
3328,499170,320,Level data,Level 110
3329,499490,262,Level data,Level 1FE
3330,499752,268,Level data,Level 111
3331,500020,69,Level data,Level 111 (Layer 2)
3332,500089,1159,Empty,Filled with $FF.
3333,501248,142,Level data,Level 10D
3334,501390,121,Level data,Level 1D4
3335,501511,94,Level data,Level 1D3
3336,501605,157,Level data,Level 1D2
3337,501762,61,Level data,Level 1D1
3338,501823,154,Level data,Level 1D0
3339,501977,91,Level data,Level 1CF
3340,502068,45,Level data,Level 1CF (Layer 2)
3341,502113,130,Level data,Level 1CE
3342,502243,51,Level data,Level 1CE (Layer 2)
3343,502294,97,Level data,Level 1CD
3344,502391,82,Level data,Level 1CC
3345,502473,304,Level data,Level 1BD
3346,502777,310,Level data,Level 10E
3347,503087,6,Level data,Level 1C7
3348,503093,481,Level data,Level 134
3349,503574,15,Level data,Level 1D6
3350,503589,169,Level data,Level 130
3351,503758,21,Level data,Level 1D5
3352,503779,78,Level data,Level 132
3353,503857,243,Level data,Level 135
3354,504100,327,Level data,Level 136
3355,504427,347,Level data,Level 12A
3356,504774,168,Level data,"Level 1C4, 1C5"
3357,504942,210,Level data,Level 12B
3358,505152,829,Level data,Level 12C
3359,505981,25,Level data,Level 1C9
3360,506006,114,Level data,Level 1C8
3361,506120,438,Level data,Level 12D
3362,506558,339,Level data,Level 128
3363,506897,356,Level data,Level 127
3364,507253,21,Level data,Level 1E1
3365,507274,91,Level data,Level 1E0
3366,507365,384,Level data,Level 126
3367,507749,705,Level data,Level 125
3368,508454,218,Empty,Filled with $FF
3369,508672,14,Level data,Unused level: Ride Among the Clouds (Sprites)
3370,508686,50,Level data,Unused level: Mushroom Scales (Sprites)
3371,508736,5,Level data,"Level 09B, 19B (Sprites)"
3372,508741,5,Level data,"Level 09A, 19A (Sprites)"
3373,508746,5,Level data,"Level 099, 199 (Sprites)"
3374,508751,5,Level data,"Level 098, 198 (Sprites)"
3375,508756,5,Level data,"Level 097, 197 (Sprites)"
3376,508761,14,Level data,"Level 096, 196 (Sprites)"
3377,508775,14,Level data,"Level 095, 195 (Sprites)"
3378,508789,38,Level data,Unused level: Lava Cave (Sprites)
3379,508827,14,Level data,Unused level: Twin Blocks (Sprites)
3380,508841,50,Level data,Unused level: Beta level 01A (Sprites)
3381,508891,8,Level data,"Level 093, 194 (Sprites)"
3382,508899,11,Level data,"Level 094, 193 (Sprites)"
3383,508910,2,Level data,"Level 0BD, 0DA, 0E6, 0F4, 0FA, 0FD, 1BB, 1BC, 1C9, 1CB, 1E0, 1E4, 1F4, 1F7 (Sprites)"
3384,508912,5,Level data,"Level 0C6, 0CB, 0F3, 0FF, 1D5, 1D6, 1E1, 1EE (Sprites)"
3385,508917,8,Level data,"Level 0C4, 0F0, 0FB, 1DA, 1E6, 1F9 (Sprites)"
3386,508925,5,Level data,Unused level: Goal 1 (Sprites)
3387,508930,5,Level data,Unused level: Goal 2 (Sprites)
3388,508935,5,Level data,"Level 000, 100 (Sprites)"
3389,508940,8,Level data,"Level 0EB, 1E7 (Sprites)"
3390,508948,14,Level data,"Level 0D5, 0DF, 0E2, 1DE (Sprites)"
3391,508962,5,Level data,"Level 10D, 1D0 (Sprites)"
3392,508967,26,Level data,Level 0C7 (Sprites)
3393,508993,5,Level data,Level 0C5 (Sprites)
3394,508998,5,Level data,Level 014 (Sprites)
3395,509003,5,Level data,Level 0CA (Sprites)
3396,509008,35,Level data,Level 11B (Sprites)
3397,509043,5,Level data,Level 1D8 (Sprites)
3398,509048,32,Level data,Level 121 (Sprites)
3399,509080,5,Level data,Level 1D7 (Sprites)
3400,509085,35,Level data,Level 008 (Sprites)
3401,509120,5,Level data,Level 0C9 (Sprites)
3402,509125,5,Level data,Level 003 (Sprites)
3403,509130,104,Level data,Level 105 (Sprites)
3404,509234,77,Level data,Level 106 (Sprites)
3405,509311,20,Level data,Level 1CA (Sprites)
3406,509331,92,Level data,Level 103 (Sprites)
3407,509423,5,Level data,Level 1FD (Sprites)
3408,509428,101,Level data,Level 102 (Sprites)
3409,509529,8,Level data,Level 1FF (Sprites)
3410,509537,14,Level data,Level 1BE (Sprites)
3411,509551,80,Level data,Level 101 (Sprites)
3412,509631,17,Level data,Level 1FC (Sprites)
3413,509648,5,Level data,Level 1F6 (Sprites)
3414,509653,116,Level data,Level 015-017 (Sprites)
3415,509769,8,Level data,Level 0E3 (Sprites)
3416,509777,86,Level data,Level 009 (Sprites)
3417,509863,14,Level data,Level 0E9 (Sprites)
3418,509877,8,Level data,Level 004 (Sprites)
3419,509885,14,Level data,"Level 0DE, 0F9 (Sprites)"
3420,509899,14,Level data,Level 0FE (Sprites)
3421,509913,107,Level data,Level 005 (Sprites)
3422,510020,137,Level data,Level 006 (Sprites)
3423,510157,29,Level data,Level 0D2 (Sprites)
3424,510186,26,Level data,Level 0C3 (Sprites)
3425,510212,17,Level data,Level 007 (Sprites)
3426,510229,17,Level data,Level 0E8 (Sprites)
3427,510246,29,Level data,Level 0E7 (Sprites)
3428,510275,5,Level data,Level 0E5 (Sprites)
3429,510280,98,Level data,Level 00A (Sprites)
3430,510378,32,Level data,Level 0C2 (Sprites)
3431,510410,17,Level data,"Level 013, 0EC, 0EE (Sprites)"
3432,510427,23,Level data,"Level 0ED, 0F2 (Sprites)"
3433,510450,26,Level data,Level 0F1 (Sprites)
3434,510476,11,Level data,Level 0E4 (Sprites)
3435,510487,86,Level data,Level 10B (Sprites)
3436,510573,26,Level data,Level 1C6 (Sprites)
3437,510599,122,Level data,Level 11A (Sprites)
3438,510721,41,Level data,Level 1EF (Sprites)
3439,510762,155,Level data,Level 118 (Sprites)
3440,510917,23,Level data,Level 1C3 (Sprites)
3441,510940,53,Level data,"Level 107, 1FB (Sprites)"
3442,510993,20,Level data,Level 1EA (Sprites)
3443,511013,149,Level data,Level 10A (Sprites)
3444,511162,26,Level data,Level 1C2 (Sprites)
3445,511188,143,Level data,Level 119 (Sprites)
3446,511331,5,Level data,Level 1F5 (Sprites)
3447,511336,44,Level data,Level 11C (Sprites)
3448,511380,44,Level data,Level 1F3 (Sprites)
3449,511424,8,Level data,Level 1F2 (Sprites)
3450,511432,68,Level data,Level 109 (Sprites)
3451,511500,8,Level data,Level 1F1 (Sprites)
3452,511508,8,Level data,Level 1F0 (Sprites)
3453,511516,158,Level data,Level 001 (Sprites)
3454,511674,5,Level data,Level 0D8 (Sprites)
3455,511679,71,Level data,Level 002 (Sprites)
3456,511750,71,Level data,Level 00B (Sprites)
3457,511821,98,Level data,"Level 0E0, 0E1 (Sprites)"
3458,511919,128,Level data,Level 00F (Sprites)
3459,512047,20,Level data,Level 0BF (Sprites)
3460,512067,140,Level data,Level 010 (Sprites)
3461,512207,8,Level data,Level 0C1 (Sprites)
3462,512215,29,Level data,Level 00E (Sprites)
3463,512244,29,Level data,Level 0DC (Sprites)
3464,512273,65,Level data,Level 0DB (Sprites)
3465,512338,5,Level data,Level 0D9 (Sprites)
3466,512343,158,Level data,Level 011 (Sprites)
3467,512501,101,Level data,Level 00C (Sprites)
3468,512602,170,Level data,Level 00D (Sprites)
3469,512772,8,Level data,Level 0DD (Sprites)
3470,512780,116,Level data,Level 11E (Sprites)
3471,512896,197,Level data,Level 120 (Sprites)
3472,513093,128,Level data,Level 123 (Sprites)
3473,513221,8,Level data,Level 1F8 (Sprites)
3474,513229,80,Level data,Level 020 (Sprites)
3475,513309,5,Level data,Level 0CC (Sprites)
3476,513314,74,Level data,"Level 11D, 1E8, 1E9 (Sprites)"
3477,513388,11,Level data,Level 1FA (Sprites)
3478,513399,80,Level data,Level 11F (Sprites)
3479,513479,8,Level data,Level 1DF (Sprites)
3480,513487,38,Level data,Level 1C1 (Sprites)
3481,513525,83,Level data,Level 122 (Sprites)
3482,513608,32,Level data,Level 01F (Sprites)
3483,513640,113,Level data,Level 0D6 (Sprites)
3484,513753,104,Level data,"Level 022, 0D0, 0D1, 0F5, 0F6 (Sprites)"
3485,513857,11,Level data,Level 0BE (Sprites)
3486,513868,77,Level data,Level 021 (Sprites)
3487,513945,38,Level data,Level 0FC (Sprites)
3488,513983,38,Level data,Level 024 (Sprites)
3489,514021,5,Level data,Level 0CF (Sprites)
3490,514026,59,Level data,Choco Island 2 (36BFB) (Sprites)
3491,514085,38,Level data,Choco Island 2 (36CB0) (Sprites)
3492,514123,35,Level data,Level 0CE (Sprites)
3493,514158,26,Level data,Choco Island 2 (36D72) (Sprites)
3494,514184,17,Level data,Choco Island 2 (36DBE) (Sprites)
3495,514201,8,Level data,Level 0CD (Sprites)
3496,514209,29,Level data,Choco Island 2 (36E7E) (Sprites)
3497,514238,152,Level data,Level 023 (Sprites)
3498,514390,8,Level data,Level 0D7 (Sprites)
3499,514398,83,Level data,Level 01B (Sprites)
3500,514481,62,Level data,Level 0EF (Sprites)
3501,514543,35,Level data,Level 117 (Sprites)
3502,514578,50,Level data,Level 1ED (Sprites)
3503,514628,59,Level data,Level 1EC (Sprites)
3504,514687,20,Level data,Level 1C0 (Sprites)
3505,514707,74,Level data,Level 01D (Sprites)
3506,514781,50,Level data,Level 0EA (Sprites)
3507,514831,134,Level data,Level 01C (Sprites)
3508,514965,38,Level data,Level 0C0 (Sprites)
3509,515003,62,Level data,Level 01A (Sprites)
3510,515065,41,Level data,Level 0D4 (Sprites)
3511,515106,11,Level data,Level 0D3 (Sprites)
3512,515117,14,Level data,Level 018 (Sprites)
3513,515131,38,Level data,Level 0F8 (Sprites)
3514,515169,179,Level data,Level 0F7 (Sprites)
3515,515348,98,Level data,Level 116 (Sprites)
3516,515446,5,Level data,Level 1E5 (Sprites)
3517,515451,56,Level data,Level 115 (Sprites)
3518,515507,5,Level data,Level 1E3 (Sprites)
3519,515512,23,Level data,Level 1E2 (Sprites)
3520,515535,50,Level data,Level 0C8 (Sprites)
3521,515585,14,Level data,"Level 114, 1D9 (Sprites)"
3522,515599,44,Level data,Level 1DD (Sprites)
3523,515643,20,Level data,"Level 1DB, 1DC (Sprites)"
3524,515663,185,Level data,Level 113 (Sprites)
3525,515848,140,Level data,Level 10F (Sprites)
3526,515988,29,Level data,Level 1BF (Sprites)
3527,516017,47,Level data,Level 110 (Sprites)
3528,516064,68,Level data,Level 1FE (Sprites)
3529,516132,14,Level data,Level 1EB (Sprites)
3530,516146,53,Level data,Level 111 (Sprites)
3531,516199,38,Level data,Level 1D4 (Sprites)
3532,516237,56,Level data,Level 1D3 (Sprites)
3533,516293,35,Level data,Level 1D2 (Sprites)
3534,516328,44,Level data,Level 1D1 (Sprites)
3535,516372,29,Level data,Level 1CF (Sprites)
3536,516401,47,Level data,Level 1CE (Sprites)
3537,516448,35,Level data,Level 1CD (Sprites)
3538,516483,26,Level data,Level 1CC (Sprites)
3539,516509,35,Level data,"Level 10E, 1BD (Sprites)"
3540,516544,5,Level data,Level 1C7 (Sprites)
3541,516549,92,Level data,Level 134 (Sprites)
3542,516641,125,Level data,Level 130 (Sprites)
3543,516766,17,Level data,Level 132 (Sprites)
3544,516783,134,Level data,Level 135 (Sprites)
3545,516917,167,Level data,Level 136 (Sprites)
3546,517084,38,Level data,Level 12A (Sprites)
3547,517122,38,Level data,"Level 1C4, 1C5 (Sprites)"
3548,517160,62,Level data,Level 12B (Sprites)
3549,517222,134,Level data,Level 12C (Sprites)
3550,517356,5,Level data,Level 1C8 (Sprites)
3551,517361,131,Level data,Level 12D (Sprites)
3552,517492,107,Level data,Level 128 (Sprites)
3553,517599,113,Level data,Level 127 (Sprites)
3554,517712,164,Level data,Level 126 (Sprites)
3555,517876,101,Level data,Level 125 (Sprites)
3556,517977,20,Level data,Level 104 (Sprites)
3557,517997,2,Level data,"Level 012, 019, 01E, 025-092, 09C-0BC, 10C, 112, 124, 129, 12E, 12F, 131, 133, 137-192, 19C-1BA (Sprites)"
3558,517999,2193,Empty,Unused data.
3559,520192,180,Sprite Misc.,Table of sprite OAM indexes.  It is indexed by the values in the table at $07F0B4 and used in the routine at $0180D2.
3560,520372,20,Sprite Misc.,Indexes to the table at $07F000.  This table itself is indexed by the sprite memory setting plus the sprite index.
3561,520392,107,Misc.,X-coordinates of bonus star numbers (FF terminates the string)
3562,520500,107,Misc.,Y-coordinates of bonus star numbers (FF terminates the string)
3563,520608,10,Pointer,Relative pointers for each bonus star number formation's tilemap (0-9)
3564,520618,32,Misc.,"Table of bonus stars to receive at the goal. The table is x20 bytes long, and each byte corresponds to a four-pixel range, from the lowest to the highest point. (The values in this table are binary-coded decimal numbers, so e.g. if the table says x17 it means you will get 17 (decimal) stars at that level.)"
3565,520730,1,Sprite tilemap related,Tile used by Bonus Star formation
3566,520782,4,Sprite tilemap related,Tiles used by Bonus Star formation when the screen fades out
3567,520802,1,Misc.,"If you get this many bonus stars at the goal, you will also be awarded a 3up (default 50)"
3568,520803,1,Misc.,Change to 80 to disable getting a 3up when getting the above number of bonus stars
3569,520806,1,Misc.,Bonus for getting 50 bonus stars (3up)
3570,520812,201,Sprite Misc.,"Default values for $1656, various interaction-related flags, for the standard sprites.

$07F27B: Goomba 1656 value - change from 10 to 30 to make Goombas die when jumped on like the classic Goombas in SMB or SMB3.

$07F27C: Winged Goomba 1656 value - change from 10 to 30 to make Winged Goombas ""die when jumped on"" (when jumped on, they will ""die"" and spawn a regular Goomba, just like the Paragoombas in SMB3).

$07F306: Sumo Bros. 1656 value (object clipping/table offset, can be jumped on, dies when jumped on, hop in/kick shells, disappear in a cloud of smoke)."
3571,521013,201,Sprite Misc.,"Default values for $1662, some death-related flags and the sprite clipping, for the standard sprites."
3572,521214,201,Sprite Misc.,"Default values for $166E, various flags to disable some stuff (like fireball death and layer 2 interaction) and palette/graphics page, for the standard sprites."
3573,521415,201,Sprite Misc.,"Default values for $167A, various misc flags, for the standard sprites.

Change $07F57D from 00 to 01 to fix the glitched tiles that appear when a reflecting fireball goes into lava and make it display the normal lava splash."
3574,521616,201,Sprite Misc.,"Default values for $1686, various misc flags, for the standard sprites."
3575,521817,201,Sprite Misc.,"Default values for $190F, various misc flags, for the standard sprites.


Change $07F69C from 05 to 25 to fix the Dolphin tails showing up when they're vertically off-screen."
3576,522018,105,Sprite subroutine (JSL),"Zeros out the sprite tables. However, $15A0 (the horizontal off screen flag) is set to $01 instead of zero."
3577,522123,21,Sprite subroutine (JSL),"The subroutine that loads the necessary bytes for some sprite tables. Actually just JSLs to $07F7A0 and sets $15F6,x."
3578,522144,50,Sprite subroutine (JSL),The subroutine that loads the six Tweaker bytes for a sprite when it is initialized.
3579,522194,9,Sprite subroutine (JSL),Resets most sprite tables and loads new values for some of them depending on the sprite number.  Actually just JSLs to $07F722 and $07F78B.
3580,522203,512,Misc.,"SMW's trigonometry/sine/cosine value table, ordered incrementally from decreasing to increasing angle. Note that these are 16-bit values, but almost all of the high bytes are 00; additionally, this table only contains values for one half of the circle.


The actual values in this table are not degrees, but rather a scale from 0000 to 01FF (although the values in the table only go up to 0100, which is equivalent to 180 degrees). One ""SMW degree"" is equivalent to 360/512ths of a real-world degree. See this document for additional details."
3581,522715,536,Sprite Misc.,"Line-guided sprite speed table. These aren't speed values in the tradition sense: when using them, the low nybble of the sprite's X and Y position is cleared, and then it is offset a certain number of pixels depending on where it was before and which line guide it is on. The high nybble of each of these values determines how many pixels to move the sprite on the Y axis, and the low nybble determines how many pixels to move the sprite on the X axis. The pointers to these are at $07FBF3 and $07FC13."
3582,523251,32,Pointer,"Low byte of pointer to line-guided sprite speed table, indexed by the Map16 tile number (76-95).  The high bytes are at $07FC13, and the bank byte is 07."
3583,523283,32,Pointer,"High byte of pointer to line-guided sprite speed table, indexed by the Map16 tile number (76-95).  The low bytes are at $07FBF3, and the bank byte is 07."
3584,523315,4,Sprite Misc.,"X speeds for the 4 stars in the spin kill animation. Format: Upper left, upper right, bottom left, bottom right."
3585,523319,4,Sprite Misc.,"Y speeds for the 4 stars in the spin kill animation. Format: Upper left, upper right, bottom left, bottom right."
3586,523323,85,ASM,"Spin Jump Star GFX Subroutine

$07FC53 is 4 objects to use for spin jump stars"
3587,523408,880,Empty,Unused data.
3588,557056,130317,Graphics,Graphics (compressed)
3589,785677,755,Empty,Empty space.
3590,819200,3328,Overworld,"Tiles for layer 2 events. The first 0x900 bytes are for 6x6 blocks of 8x8 tiles, the last 0x400 bytes are for 2x2 blocks of 8x8 tiles."
3591,822528,1642,Misc.,"Overworld layer 2 event data's tilemap data: Tile properties (YXPCCCTT).


(Layer 2 events are what you see on the right of the overworld editor, in those blue X area)


Table is compressed in the LC_RLE1 format.


[FF FF] marks the end of the compressed table."
3592,824246,1,ASM,Change to 0B to make Mario able to play the Yoshi's House level after the Yoshi's House scene of the credits gets over.
3593,824257,14,Pointer,"Table indexed by $1928*2, which is used to indicate the cutscene number in the beginning of the credits (as in, castle = #$00, chocolate island BG = #$01, etc.). Points to BG image to use. All images are in bank $0C."
3594,824271,14,Misc.,"Table indexed by $1928*2. Is used to clear certain bits of the loaded BG tile out, specifically, but not necessarily, the properties byte (YXPCCCTT) of the BG tile.

Some BG images in the credits require bit 8 to be clear ($FEFF)."
3595,824391,1,Music,Music used for the first part of the Ending.
3596,824679,96,Subroutine (JSL),The DMA routine for updating the backgrounds during the credits walking sequence.
3597,824775,2280,Layer 3,Credits text data.
3598,827057,171,Subroutine (JSR),The subroutine that uploads the credits tilemap.
3599,827247,2,Misc.,"Speed at which the Layer 2 background in the credits roll moves. [80] [FF]. It's actually a word address (#$FF80). Anything from #$8000-#$FFFF is left speed, anything from #$0001-#$7FFF is right speed."
3600,827273,2,Layer 3,"How fast the credits scroll upwards. Word value. Default value is $0040 $0000-$7FFF is upward while $8000-$FFFF is downward.

(Note, when the credits end the situation will warp to Yoshi's House)"
3601,827367,3,Coordinate,"Princess's Y position on Yoshi during the staff roll, relative to absolute value #$85. Each byte represents a Y position."
3602,827373,2,Coordinate,Mario's absolute X position during the staff roll in the credits.
3603,827378,2,Coordinate,Mario's absolute Y position during the staff roll in the credits.
3604,827384,2,ASM,"Mario's powerup status during the staff roll in the credits.

Change to A9 00 for Small Mario,

A9 01 for Big Mario,

A9 02 for Cape Mario,

A9 03 for Fiery Mario,

A5 19 to keep the same powerup after Bowser's Battle."
3605,827389,1,Mario physics,"How fast Mario walks during the staff roll. Doesn't actually affect the walking speed, but his walking animation speed."
3606,827397,1,Coordinate,X-position of Yoshi (Credits)
3607,827404,1,Coordinate,Y-position of Yoshi (Credits)
3608,827422,1,Coordinate,X-position of Peach (Credits)
3609,827445,1,Coordinate,Y-position of eggs (Credits)
3610,827535,42,Sprite tilemap related,Yoshi's House decoration tiles (Ending)
3611,827577,42,Sprite tilemap related,Yoshi's House decoration palettes (Ending)
3612,827626,1,Coordinate,Y-position of Yoshi's House decorations (Ending)
3613,827702,16,Sprite tilemap related,"""THANK YOU!"" text tiles (Yoshi’s House)."
3614,827721,2,Sprite Misc.,"Y position of the right half of the ""THANK YOU!"" text after it finishes scrolling in.

Its Y position as it scrolls is located at $0CA687. (Yoshi's House)"
3615,827771,2,Sprite Misc.,"Y position of the left half of the ""THANK YOU!"" text. (Yoshi's House)"
3616,827790,1,Sprite tilemap related,"""THANK YOU!"" text palette (Yoshi’s House)"
3617,827915,1,Mario tilemap,"Which frame for Mario ($13E0) at the Yoshi House (credits), when he stops walking to the left."
3618,828428,1,Music,Music used for the second part of the ending. (Yoshi's House)
3619,828866,1,Music,Music used for the third part of the ending. (Thank You Music)
3620,829026,1,Sprite Misc.,"Acceleration of the ""THANK YOU!"" text. Setting above 04 will usually cause the text to bounce due to its speed being signed. (Yoshi's House)"
3621,829063,1,Sprite Misc.,"Y position of the right half of the ""THANK YOU!"" text as it scrolls in.

Its Y position after it finishes scrolling is at $0CA687. (Yoshi's House)"
3622,829125,1,Mario tilemap,Mario's pose ($13E0) after the Yoshis start jumping. (Yoshi's House)
3623,829168,1,Coordinate,X offset of Peach from Mario after the eggs hatch. (Yoshi's House)
3624,829179,1,Coordinate,Y-position of Peach waving after eggs hatch (Ending)
3625,829330,1,Misc.,Direction Yoshi faces in Credits
3626,829360,1,Misc.,Change to 00 to make Yoshi invisible for the credits sequence
3627,829397,12,Sprite tilemap related,Red Yoshi Cheering Tiles (Ending)
3628,829409,12,Sprite tilemap related,Yellow Yoshi Cheering Tiles (Ending)
3629,829449,12,Sprite tilemap related,Red Yoshi Cheering Palettes (Ending)
3630,829461,12,Sprite tilemap related,Yellow Yoshi Cheering Palettes (ending)
3631,829656,7,Sprite tilemap related,Palettes of Baby Yoshis (Ending)
3632,829702,1,Sprite tilemap related,Tile used by Eggs (Ending)
3633,829707,1,Sprite tilemap related,Palette of eggs (ending)
3634,829720,1,Sprite tilemap related,Tile used by Baby Yoshis (Ending)
3635,829754,12,Sprite tilemap related,Red Yoshi Watching Tiles (Ending)
3636,829766,12,Sprite tilemap related,Yellow Yoshi Watching Tiles (Ending)
3637,829778,12,Misc.,Red Yoshi Watching Palettes (Ending)
3638,829790,12,Sprite tilemap related,Yellow Yoshi Watching Palettes (Ending)
3639,829802,12,Misc.,Red Yoshi Watching Tile X-coords (Ending)
3640,829814,12,Misc.,Yellow Yoshi Watching Tile X-coords (Ending)
3641,829826,12,Misc.,Red Yoshi Watching Tile Y-coords (Ending)
3642,829838,12,Sprite tilemap related,Yellow Yoshi Watching Tile Y-coords (Ending)
3643,829941,1,Misc.,Tile size of 8x8 tiles (Red/Yellow Yoshi watching)
3644,829963,6,Sprite tilemap related,Blue/Green Yoshi Tiles (Ending)
3645,829969,2,Sprite tilemap related,Blue Yoshi Palettes (Ending)
3646,829971,1,Sprite tilemap related,Green Yoshi Palettes (Ending)
3647,830035,140,Sprite tilemap related,"Mario, Luigi and Peach ending image tilemap"
3648,830372,7,Palette,"Points to BG colour to use at the cutscenes in the beginning of the credits.

First value not used?"
3649,830505,21,Level data,Ending sequence level data (Scene 1)
3650,830526,21,Level data,Ending sequence level data (Scene 2)
3651,830547,36,Level data,Ending sequence level data (Scene 3)
3652,830583,39,Level data,Ending sequence level data (Scene 4)
3653,830622,42,Level data,Ending sequence level data (Scene 5)
3654,830664,18,Level data,Ending sequence level data (Scene 6)
3655,830682,21,Level data,Ending sequence level data (Scene 7)
3656,830703,21,Level data,Ending sequence level data (Scene 8)
3657,830724,27,Level data,Ending sequence level data (Scene 9)
3658,830751,18,Level data,Ending sequence level data (Scene 10)
3659,830769,12,Level data,Ending sequence level data (Scene 11)
3660,830781,20,Level data,Ending sequence level data (Scene 12)
3661,830802,6,Level data,Ending sequence level data (Scene 13)
3662,830808,26,Pointer,Ending sequence level data (Pointer table)
3663,831249,69,Sprite tilemap related,Ending sequence sprites (Scene 5)
3664,831318,92,Sprite tilemap related,Ending sequence sprites (Scene 6)
3665,831410,70,Sprite tilemap related,Ending sequence sprites (Scene 9)
3666,831480,53,Sprite tilemap related,Ending sequence sprites (Scene 12)
3667,831533,165,Sprite tilemap related,Ending sequence sprites (Scene 2)
3668,831698,97,Sprite tilemap related,Ending sequence sprites (Scene 3)
3669,831795,105,Sprite tilemap related,Ending sequence sprites (Scene 4)
3670,831900,113,Sprite tilemap related,Ending sequence sprites (Scene 7)
3671,832013,153,Sprite tilemap related,Ending sequence sprites (Scene 1)
3672,832166,149,Sprite tilemap related,Ending sequence sprites (Scene 8)
3673,832315,105,Sprite tilemap related,Ending sequence sprites (Scene 10)
3674,832420,105,Sprite tilemap related,Ending sequence sprites (Scene 11)
3675,832525,405,Sprite tilemap related,Ending sequence sprites (Scene 13)
3676,833082,53,Misc.,"The End text data, (with Mario, Peach and Luigi.)"
3677,833135,401,Empty,Unused data. Used by GPS as pointers for the shared routines. Note that some versions of GPS incorrectly start at $0CB66E instead.
3678,833536,447,Misc.,World 4 Castle Destruction Scene Layer 2 Tilemap
3679,833983,151,Misc.,Castle Destruction Scene Layer 1 Tilemap (Castle)
3680,834134,355,Misc.,World 3/7 Castle Destruction Scene Layer 2 Tilemap
3681,834489,329,Misc.,World 6 Castle Destruction Scene Layer 2 Tilemap
3682,834818,387,Misc.,World 1/2/5 Castle Destruction Scene Layer 2 Tilemap
3683,835205,365,Layer 3,Castle destruction sequence 1 text.
3684,835570,414,Layer 3,Castle destruction sequence 2 text.
3685,835984,361,Layer 3,Castle destruction sequence 3 text.
3686,836345,422,Layer 3,Castle destruction sequence 4 text.
3687,836767,371,Layer 3,Castle destruction sequence 5 text.
3688,837138,424,Layer 3,Castle destruction sequence 6 text.
3689,837562,404,Layer 3,Castle destruction sequence 7 text.
3690,838275,12,Sprite tilemap related,"Positions and tilemap for the castle destruction scene's ""Thank you!"" text bubble.


Almost in the standard OAM format (xxxxxxxx yyyyyyyy tttttttt YXPPCCCT), except the YXPPCCCT is actually formatted as ""YX-SCCCT"", where the S bit is the size (8x8 or 16s16); the PP bits are always set to 10."
3691,840103,41,Misc.,Castle Destruction Scene Layer 1 Tilemap (Destroyed castle)
3692,840342,1,Sound effect,Bomb Explosion (Castle Destruction Sequence) Sound Effect.
3693,840352,1,Timer,"how long ""BOMB"" stays on castle destruction sequence. The highest possible value is 80, 81-FF will make the BOMB never appear."
3694,840371,1,Sound effect,Castle Crumbling sound effect. (Castle Destruction Sequence)
3695,840382,1,Sound effect,Castle Launch (Castle Destruction Sequence #4) Sound Effect.
3696,840680,1,Sound effect,Mario Hammering (Castle Destruction Sequence #3) sound effect.
3697,841167,1,Timer,"Number of frames, divided by 4, to disable pressing a button to end the castle destruction scene after the text finishes appearing."
3698,841172,1,Music,Music to play after destruction of castle. (Castle Destruction Sequence)
3699,841689,1,Sound effect,Castle Painting (Castle Destruction Sequence #6) Sound Effect.
3700,841829,1,Sprite tilemap related,[$21] YXPPCCCT properties for the Yoshi egg in the castle destruction sequences.
3701,841839,145,Empty,Unused data.
3702,841984,441,Overworld border,"Tilemap of the oblong hill background (the one that appears in, e.g., level 105), in LC_RLE1 format."
3703,842425,440,Overworld border,"Tilemap of the underwater background (the one that appears in, e.g., level A), in LC_RLE1 format."
3704,842865,211,Overworld border,"Tilemap of the cloud/mountain background (the one that appears in level 125), in LC_RLE1 format."
3705,843076,272,Overworld border,"Tilemap of the cloud background (the one that appears in, e.g., level 1), in LC_RLE1 format."
3706,843348,261,Overworld border,"Tilemap of the shallow hills background (the one that appears in, e.g., level 15), in LC_RLE1 format."
3707,843609,426,Overworld border,"Tilemap of the ""odd land formations with clouds"" background (the one that appears in, e.g., level 102), in LC_RLE1 format."
3708,844035,879,Overworld border,"Tilemap of the castle background with pillars (the one that appears in, e.g., level 1F), in LC_RLE1 format."
3709,844914,514,Overworld border,"Tilemap of the large mountain background (the one that appears in, e.g., level 12B), in LC_RLE1 format."
3710,845428,16,Overworld border,"Tilemap of the switch palace background (the one that appears in, e.g., level 14), in LC_RLE1 format."
3711,845444,316,Overworld border,"Tilemap of the starry night background (the one that appears in, e.g., level 119), in LC_RLE1 format."
3712,845760,302,Overworld border,"Tilemap of the ""pointy land formations"" background (the one that appears in, e.g., level 23), in LC_RLE1 format."
3713,846062,16,Overworld border,"Tilemap of the blank background (the one that appears in level F7), in LC_RLE1 format."
3714,846078,900,Overworld border,"Tilemap of the underground background (the one that appears in, e.g., level 11A), in LC_RLE1 format."
3715,846978,766,Overworld border,"Tilemap of the forest background (the one that appears in, e.g., level 106), in LC_RLE1 format."
3716,847744,501,Overworld border,"Tilemap of the ghost house background (the one that appears in, e.g., level 4), in LC_RLE1 format."
3717,848245,741,Overworld border,"Tilemap of the sunken ship background (the one that appears in level F8), in LC_RLE1 format."
3718,848986,901,Overworld border,"Tilemap of the castle background with windows (the one that appears in, e.g., level 7), in LC_RLE1 format."
3719,849887,2048,Misc.,"Layer 1 data on the overworld. Numbers are the same as in LM's ""map16 editor"".

The YI submap starts at $0CFBDE and is a simple format: One row of tiles at the time, 16 bytes for one line.

Level numbers are a little trickier, though:

Level numbers aren't anywhere in the rom. The loading routine assigns them when it runs. If you remove or add a level tile, you'll shift all of the levels after it. And the order of the tiles in the other submaps is even weirder, but if you look at the OW as 16x16 blocks and ignore submap borders, it'll start making sense."
3720,851937,31,Empty,Unused data
3721,884736,920,Graphics,"Graphic data for Map16 tiles 000-072. Shared by all tilesets. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3722,885656,56,Graphics,"Graphic data for Map16 tiles 100-106. Shared by all tilesets. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3723,885712,528,Graphics,"Graphic data for Map16 tiles 111-152. Shared by all tilesets. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3724,886240,688,Graphics,"Graphic data for Map16 tiles 16E-1C3. Shared by all tilesets. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3725,886928,32,Graphics,"Graphic data for Map16 tiles 1C4-1C7. Used in every tileset, but not when using GFX header 0 or 7. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3726,886960,288,Graphics,"Graphic data for Map16 tiles 1C8-1EB. Shared by all tilesets. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3727,887248,32,Graphics,"Graphic data for Map16 tiles 1EC-1EF. Used in every tileset, but not when using GFX header 0 or 7. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3728,887280,128,Graphics,"Graphic data for Map16 tiles 1F0-1FF. Shared by all tilesets. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3729,887408,32,Graphics,"Graphic data for Map16 tiles 1C4-1C7. Only used in GFX header 0 and 7. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3730,887440,32,Graphics,"Graphic data for Map16 tiles 1EC-1EF. Only used when using GFX header 0 or 7. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3731,887472,192,Graphics,"Graphic data for the Map16 tiles used by multicolour pipes (besides the default green pipe). 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3732,887664,1128,Graphics,"Graphic data for Map16 tiles 073-0FF. Used by tileset 0 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3733,888792,80,Graphics,"Graphic data for Map16 tiles 107-110. Used by tileset 0 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3734,888872,216,Graphics,"Graphic data for Map16 tiles 153-16D. Used by tileset 0 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3735,889088,4096,Graphics,Background Map16 tiles (pages 0x80 and 0x81 in LM) in TTTTTTTT YXPCCCTT format.
3736,893199,768,Objects,"Pointers to extended objects, 3 bytes per pointer, although the bank byte is always 0D.  Extended objects 02-0F and 98-FF are unused, so they could be repointed (which is essentially what Extended Objects +14 and ObjecTool do)."
3737,893967,60,Objects,"The routine that loads normal (i.e. not extended) objects.  $0DA41E-$0DA44A (45 bytes) are the pointers to the main object routines for each tileset.  (Even though not all objects are tileset-specific, SMW's code treats them as if they all were.)"
3738,894037,189,Objects,"Pointers to normal (i.e. not extended) objects, for tilesets 0, 7, and C. Object 00 is not included (because normal object 00 is simply *all* extended objects); these pointers are for objects 01-3F."
3739,894280,51,Objects,"Map16 data for extended objects 10-40, low byte. They are in order of object number, but the 8th byte is unused (it would be used for object 17, but the final byte in the table is used instead). The high byte of the first 19 tiles is 00, while the high byte of the rest of the tiles is 01."
3740,894331,210,Objects,"Main creation code for extended objects 10-40. (Extended object 17 uses a different pointer, but it jumps to the same routine.)"
3741,894541,5,Objects,"The start of the routine for extended object 17, the green star block. It loads a hardcoded index to the table at $0DA548."
3742,894641,9,Subroutine (JSR),A routine that backs up the low and high bytes of the Map16 data pointers.  It stores $6B and $6C in $04 and $05.
3743,894650,19,Subroutine (JSR),A routine that restores the low and high bytes of the Map16 pointers [$6B] and [$6E] from scratch RAM.  Used in conjunction with $0DA6B1.
3744,894669,4,Objects,"Map16 data for the door and P-switch-activated door. In order: Top tile of normal door, top tile of P-switch door, bottom tile of normal door, bottom tile of P-switch door."
3745,894673,29,Objects,"Main creation code for extended objects 47 and 48, the normal door and P-switch-activated door.


This is also the routine that unused extended objects 98-FF point to (they just pull garbage tiles)."
3746,894702,45,Misc.,Map16 data for the big bush
3747,894747,45,Objects,"Main creation code for extended object 82 (the larger of the two big bushes).

$0DA71E is the width, minus one.

$0DA722 is the height, minus one.

$0DA732 is the pointer to Map16 tile array (only contains low bytes)."
3748,894792,24,Objects,Map16 data for the small bush
3749,894816,45,Objects,"Main creation code for extended object 83 (the smaller of the two big bushes).

$0DA763 is the width, minus one.

$0DA767 is the height, minus one.

$0DA777 is the pointer to Map16 tile array (only contains low bytes)."
3750,894861,33,ASM,Part of bush object decoding routine.
3751,894947,4,Objects,Goal Arrow sign: MAP16 tiles
3752,895142,8,ASM,"Bitmasking table. Contains the values $80,$40,$20,$10,$08,$04,$02,$01

So masking can be simply done by AND.l $0DA8A6,x"
3753,895156,15,Objects,"Map16 data for objects 01-0E, low bytes of tile numbers.  The last byte is actually used for tileset-specific object 31 when it forms ice-blue turn blocks."
3754,895171,152,Objects,"Main creation code for the objects that are made up of only one Map16 tile and can be extended both horizontally and vertically, i.e., objects 01-0E and tileset-specific object 31 when it forms ice-blue turn blocks."
3755,895323,34,Objects,"The subroutine that enables most objects to go across screen boundaries in horizontal levels without glitching. (It doesn't work in vertical levels.) It also stores the value of A to [$6B],y.  (Forgot to include that info before.)"
3756,895357,21,Objects,The subroutine that allows objects to go across subscreen boundaries in horizontal levels without glitching.
3757,895506,20,Objects,"Map16 data for vertical pipe ends.  There are four 5-byte tables here.  The first two are for the top of a pipe (the last two bytes are unused), and the second two are for the bottom of a pipe (the first two bytes are unused)."
3758,895526,126,Objects,"Main creation code for the vertical pipe objects.

$0DAA5A - The Map16 tile number (low byte) for the left side of the vertical pipe with no end.

$0DAA62 - The Map16 tile number (low byte) for the right side of the vertical pipe with no end.

$0DAA6C - The Map16 tile number (low byte) for the left side of all non-vertical pipes except the one without ends.

$0DAA74 - The Map16 tile number (low byte) for the right side of all non-vertical pipes except the one without ends."
3759,895652,16,Objects,"Map16 data for the horizontal pipes.  There are two tables here, each containing the low bytes of the tile numbers and both in order; the first two bytes of each table are for the left-facing non-exit-enabled pipe, the next two are for the left-facing exit-enabled pipe, the next two are for the right-facing non-exit-enabled pipe, and the last two are for the right-facing exit-enabled pipe."
3760,895668,89,Objects,Main creation code for the horizontal pipe objects.
3761,895757,49,Objects,"Main creation code for the Bullet Bill shooter object. $0DAB1A, $0DAB27, and $0DAB34 control which three Map16 tiles make up the object."
3762,895806,48,Objects,"Main creation code for the slope objects (object 12), minus the code for each individual slope.  $0DAB50-$0DAB6D are the pointers to the individual slope objects."
3763,895997,36,Objects,The routine that allows slopes to overlap with dirt tiles.  It checks the Map16 tile below the current one for certain numbers and adds values to the current tile number to change it into the one with dirt behind it.
3764,897141,123,Objects,Main creation code for object 13 (vine and edge objects).
3765,897480,74,Objects,"Main creation code for objects 14 and 21, the normal ledge and wide ground ledge.  They share most of their code, but the wide ledge begins at $0DB1C8, while the normal one begins at $0DB1D4.


$0DB1CE - Height of the wide ground ledge - 1. The top tile is 100, the rest is 03F."
3766,897554,18,Objects,"The Map16 tiles that make up the midway point and goal point objects.  There are 6 3-byte tables here that are, in order: Top tiles of midway point, middle tiles of midway point, bottom tiles of midway point, top tiles of goal point, middle tiles of goal point, bottom tiles of goal point.  You can change $0DB221 to 3A and $0DB223 to 3D to fix the glitched tiles at the bottom of the goal point. (They will just appear the same as the middle tiles.)"
3767,897572,166,Objects,Main creation code for the midway point/goal point object.
3768,897738,108,Objects,"Dragon Coin creation routine.

$0DB2DF - Change to 00 to prevent Dragon Coins from vanishing when at least 5 have been collected.

$0DB328 - Map16 tile for the upper half of a Yoshi/Dragon Coin.

$0DB329 - Change to EA EA to make only the lower half of Yoshi/Dragon Coins appear.

$0DB332 - Map16 tile for the lower half of a Yoshi/Dragon Coin.

$0DB333 - Change to EA EA to make only the upper half of Yoshi/Dragon Coins appear."
3769,897846,133,Objects,Main creation code for the purple coins.  This is very similar to the code at $0DA8C3.
3770,897979,1,Objects,Rope: MAP16 block
3771,897980,1,Objects,Clouds: MAP16 block
3772,897981,30,Objects,Main creation code for the rope and cloud objects.
3773,898011,1,Objects,Water with animated surface: MAP16 block (Top)
3774,898012,1,Objects,Water with normal surface: MAP16 block (Top)
3775,898013,1,Objects,Lava with animated surface: MAP16 block (Top)
3776,898014,1,Objects,Climbing net with top edge: MAP16 block (Top)
3777,898015,1,Objects,Water with animated surface: MAP16 block (Bottom)
3778,898016,1,Objects,Water with normal surface: MAP16 block (Bottom)
3779,898017,1,Objects,Lava with animated surface: MAP16 block (Bottom)
3780,898018,1,Objects,Climbing net with top edge: MAP16 block (Bottom)
3781,898019,72,Objects,"Main creation subroutine for objects 18-1B (water with and without animated surface, lava, climbing net with top edge).  It is also used as the default routine for unused objects 22-2D."
3782,898091,1,Objects,Donut bridge: MAP16 block (Top)
3783,898092,1,Objects,Donut bridge: MAP16 block (Bottom)
3784,898093,52,Objects,Main creation code for the donut bridge (object 1C).
3785,898335,40,Objects,"Vertical pipe/bone/log object creation subroutine. $0DB52E, $0DB536, and $0DB543 determine which three Map16 tiles make up the object."
3786,898375,34,Objects,"Horizontal pipe/bone/log object creation subroutine. $0DB552, $0DB55A, and $0DB565 determine which three Map16 tiles make up the object."
3787,898435,37,Objects,"Main creation code for the yellow and green switch blocks.


$0DB583 - Start of the code for the green block.

$0DB587 - Map16 tiles (on page 1) for the filled-in blocks.

$0DB589 - Map16 tiles (on page 0) for the outline blocks.

$0DB58B - Start of the code for the yellow block.

$0DB592 - Change F0 to D0, to invert the Green and Yellow Switch Palace blocks (solid before the Switch Palce, passable afterwards)."
3788,898472,15,Objects,"Tiles the Bushes 1-5 is made up of, in order of Left-Middle-right (five bytes per part)"
3789,898487,1,Misc.,6A-Green Switch Palace Block after you beat its Palace (always Map16 page 1)
3790,898488,1,Misc.,6B-Yellow Switch Palace Block after you beat its Palace (always Map16 page 1)
3791,898489,1,Misc.,6A-Green Switch Palace Block after you beat its Palace (always Map16 page 0)
3792,898490,1,Misc.,6B-Yellow Switch Palace Block after you beat its Palace (always Map16 page 0)
3793,898863,16,Objects,Map16 data for the diagonal pipe (low bytes only).
3794,898879,107,Objects,"Main creation code for the diagonal pipe object.

$0DB7A6 - The Map16 tile (on page 1) at the bottom of the diagonal pipe object. (Default: $EB.)"
3795,898986,185,Objects,Main creation code for the left-facing diagonal ledge.
3796,899171,179,Objects,Main creation code for the right-facing diagonal ledge.
3797,899350,76,Objects,"Main creation code for the red and blue switch blocks.  Note that the actual object number varies per tileset.  (It was really dumb that Nintendo did that...oh well.)


$0DB916 - Start of the code for the blue block.

$0DB91A - Map16 tiles (on page 0) for the outline blocks.

$0DB91C - Map16 tiles (on page 1) for the filled-in blocks.

$0DB91E - Start of the code for the red block.

$0DB943 - Change F0 to D0 to invert the Blue and Red Switch Palace blocks."
3798,899708,96,Objects,Forest treetop tilemap (repeated a few times)
3799,899944,152,Empty,Unused data
3800,900096,1128,Graphics,"Graphic data for Map16 tiles 073-0FF. Used by tileset 1 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3801,901224,80,Graphics,"Graphic data for Map16 tiles 107-110. Used by tileset 1 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3802,901304,216,Graphics,"Graphic data for Map16 tiles 153-16D. Used by tileset 1 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3803,901530,189,Objects,"Pointers to normal (i.e. not extended) objects, for tileset 1. Object 00 is not included (because normal object 00 is simply *all* extended objects); these pointers are for objects 01-3F."
3804,901739,126,Objects,Castle entrance: MAP16 blocks
3805,902255,3,Objects,The three Map16 tiles that make up the left side of the large stone castle block (tileset-specific object 3C in tileset 1).  These are low bytes; the tiles are on page 1.
3806,902258,3,Objects,The three Map16 tiles that make up the middle columns of the large stone castle block (tileset-specific object 3C in tileset 1).  These are low bytes; the tiles are on page 1.
3807,902261,3,Objects,The three Map16 tiles that make up the right side of the large stone castle block (tileset-specific object 3C in tileset 1).  These are low bytes; the tiles are on page 1.
3808,902264,81,Objects,Main creation code for the large stone castle block (tileset-specific object 3C in tileset 1).
3809,902688,480,Empty,Unused data.
3810,903168,1128,Graphics,"Graphic data for Map16 tiles 073-0FF. Used by tileset 2 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3811,904296,80,Graphics,"Graphic data for Map16 tiles 107-110. Used by tileset 2 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3812,904376,216,Graphics,"Graphic data for Map16 tiles 153-16D. Used by tileset 2 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3813,904602,189,Objects,"Pointers to normal (i.e. not extended) objects, for tilesets 2, 6, and 8. Object 00 is not included (because normal object 00 is simply *all* extended objects); these pointers are for objects 01-3F."
3814,904791,16,Objects,Map16 data for the large circular line guide pieces (low bytes only).
3815,904807,41,Objects,Main creation code for the large circular line guide pieces.
3816,904848,4,Objects,Map16 data for the small circular line guide pieces (low bytes).
3817,904852,18,Objects,Main creation code for the small circular line guide pieces.
3818,904894,2,Objects,Map16 data for the horizontal line guide end (extended object 55).
3819,904896,24,Objects,Main creation code for the horizontal line guide end (extended object 55).
3820,904920,2,Objects,Map16 data for the vertical line guide end (extended object 56).
3821,904922,22,Objects,Main creation code for the vertical line guide end (extended object 56).
3822,905858,382,Empty,Unused data
3823,906240,1128,Graphics,"Graphic data for Map16 tiles 073-0FF. Used by tileset 3 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3824,907368,80,Graphics,"Graphic data for Map16 tiles 107-110. Used by tileset 3 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3825,907448,216,Graphics,"Graphic data for Map16 tiles 153-16D. Used by tileset 3 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3826,907674,189,Objects,"Pointers to normal (i.e. not extended) objects, for tilesets 3, 9, A, B, and E. Object 00 is not included (because normal object 00 is simply *all* extended objects); these pointers are for objects 01-3F."
3827,907934,4,Objects,Torpedo Ted Launcher: MAP16 tiles
3828,909702,378,Empty,Unused data
3829,910080,1128,Graphics,"Graphic data for Map16 tiles 073-0FF. Used by tileset 4 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3830,911208,80,Graphics,"Graphic data for Map16 tiles 107-110. Used by tileset 4 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3831,911288,216,Graphics,"Graphic data for Map16 tiles 153-16D. Used by tileset 4 only. 8 bytes per tile, upper left, lower left, upper right, lower right. TTTTTTTT YXPCCCTT format."
3832,911514,189,Objects,"Pointers to normal (i.e. not extended) objects, for tilesets 4, 5, and D. Object 00 is not included (because normal object 00 is simply *all* extended objects); these pointers are for objects 01-3F."
3833,912094,140,Objects,Ghost House entrance: MAP16 blocks
3834,912275,160,Objects,"Tilemap of Yoshi's House. Change EB to D3 at $0DEB85, $0DEB89, $0DEBBE, $0DEBC6, $0DEBCC, $0DEBD0 and $0DEBDA to remove Berries from Yoshi's House, or to 45 to make them work without placing berry objects on top of them."
3835,912510,4,Objects,Green Switch: MAP16 blocks
3836,912514,4,Objects,Yellow Switch: MAP16 blocks
3837,912518,4,Objects,Blue Switch: MAP16 blocks
3838,912522,4,Objects,Red Switch: MAP16 blocks
3839,912526,51,Objects,Main creation code for the four switch palace switches.
3840,913546,630,Empty,"Unused data.

Lunar Magic uses most of this area for custom code related to level loading, so using it is discouraged."
3841,914336,26,Layer 3,FISHIN'LAKITU and attributes (sprite name)
3842,914366,18,Layer 3,PARA-BOMB and attributes (sprite name)
3843,914388,22,Layer 3,PARA-GOOMBA and attributes (sprite name)
3844,914414,12,Layer 3,LAKITU and attributes (sprite name)
3845,914430,10,Layer 3,SPINY and attributes (sprite name)
3846,914444,14,Layer 3,WIGGLER and attributes (sprite name)
3847,914462,14,Layer 3,BOB-OMB and attributes (sprite name)
3848,914601,28,Layer 3,AMAZING FLYIN' and attributes (sprite name)
3849,914633,28,Layer 3,AMAZING FLYIN' HAMMER BROTHER and attributes (sprite name)
3850,914665,22,Layer 3,SUPER KOOPA and attributes (sprite name)
3851,914691,16,Layer 3,CHARGIN' and attributes (sprite name)
3852,914711,10,Layer 3,CHUCK and attributes (sprite name)
3853,914725,48,Layer 3,Layer 3 JUMPING PIRHANA PLANT and attributes (sprite name)
3854,914773,29,Layer 3,Layer 3 VOLCANO LOTUS and attributes (sprite name)
3855,914962,28,Layer 3,Layer 3 SUMO BROTHER and attributes (sprite name)
3856,914990,24,Layer 3,Layer 3 MONTY MOLE and attributes (sprite name)
3857,915014,14,Layer 3,Layer 3 POKEY and attributes (sprite name)
3858,915028,23,Layer 3,Layer 3 BULLET BILL and attributes (sprite name)
3859,915211,10,Layer 3,Layer 3 REX and attributes (sprite name)
3860,915221,22,Layer 3,Layer 3 MEGA MOLE and attributes (sprite name)
3861,915243,23,Layer 3,Layer 3 BANZAI BILL and attributes (sprite name)
3862,915450,24,Layer 3,Layer 3 DINO RHINO and attributes (sprite name)
3863,915474,24,Layer 3,Layer 3 DINO TORCH and attributes (sprite name)
3864,915498,13,Layer 3,Layer 3 KOOPAS and attributes (sprite name)
3865,915623,22,Layer 3,Layer 3 SPIKE TOP and attributes (sprite name)
3866,915645,20,Layer 3,Layer 3 SWOOPERS and attributes (sprite name)
3867,915665,28,Layer 3,Layer 3 BUZZY BEETLE and attributes (sprite name)
3868,915693,13,Layer 3,Layer 3 BLARGG and attributes (sprite name)
3869,915806,16,Layer 3,Layer 3 BLURPS and attributes (sprite name)
3870,915822,16,Layer 3,Layer 3 URCHIN and attributes (sprite name)
3871,915838,28,Layer 3,Layer 3 PORCU-PUFFER and attributes (sprite name)
3872,915866,26,Layer 3,Layer 3 TORPEDO TED and attributes (sprite name)
3873,915892,25,Layer 3,Layer 3 RIP VAN FISH and attributes (sprite name)
3874,916023,30,Layer 3,"Layer 3 ""BOO"" BUDDIES and attributes (sprite name)"
3875,916053,24,Layer 3,Layer 3 FISHIN' BOO and attributes (sprite name)
3876,916077,30,Layer 3,"Layer 3 THE BIG ""BOO"" and attributes (sprite name)"
3877,916107,13,Layer 3,Layer 3 EERIES and attributes (sprite name)
3878,916220,24,Layer 3,Layer 3 LIL SPARKY and attributes (sprite name)
3879,916244,26,Layer 3,Layer 3 BONY BEETLE and attributes (sprite name)
3880,916270,22,Layer 3,Layer 3 DRY BONES and attributes (sprite name)
3881,916292,16,Layer 3,Layer 3 THWOMP and attributes (sprite name)
3882,916308,16,Layer 3,Layer 3 THWIMP and attributes (sprite name)
3883,916324,15,Layer 3,Layer 3 HOTHEAD and attributes (sprite name)
3884,916505,18,Layer 3,Layer 3 GRINDER and attributes (sprite name)
3885,916523,28,Layer 3,Layer 3 BALL'N'CHAIN and attributes (sprite name)
3886,916551,17,Layer 3,Layer 3 FISHBONE and attributes (sprite name)
3887,916680,13,Layer 3,Layer 3 REZNOR and attributes (sprite name)
3888,916805,23,Layer 3,Layer 3 MECHAKOOPAS and attributes (sprite name)
3889,916838,38,Layer 3,Layer 3 MORTON KOOPA JR and attributes (sprite name)
3890,916876,24,Layer 3,Layer 3 ROY KOOPA and attributes (sprite name)
3891,916900,16,Layer 3,Layer 3 BOWSER and attributes (sprite name)
3892,916916,28,Layer 3,Layer 3 LEMMY KOOPA and attributes (sprite name)
3893,916944,32,Layer 3,Layer 3 WENDY O.KOOPA and attributes (sprite name)
3894,916976,26,Layer 3,Layer 3 IGGY KOOPA and attributes (sprite name)
3895,917002,28,Layer 3,Layer 3 LARRY KOOPA and attributes (sprite name)
3896,917030,35,Layer 3,Layer 3 LUDWIG VON KOOPA and attributes (sprite name)
3897,917071,16,Layer 3,Layer 3 PUMPKIN and attributes (sprite name)
3898,917091,16,Layer 3,Layer 3 PIDGIT and attributes (sprite name)
3899,917111,25,Layer 3,Layer 3 MASK KOOPAS and attributes (sprite name)
3900,917151,353,Empty,Unused data. Warning: the 0x12 FF bytes before this are NOT unused data (used in credits).
3901,953753,2,Misc.,"SPC Main Volume. Default is $7F,$7F"
3902,953758,1,Misc.,High byte of the address that the echo buffer will be placed at in audio ram. The low byte is ignored. Default is $60 = ($6000 in audio RAM)
3903,953777,16,Misc.,"SPC FIR Filter.

x70FB1 - FIR Filter 1, like $F1 $XX $YY $00

x70FB9 - FIR Filter 2, like $F1 $XX $YY $01"
3904,956613,1,Music,"Special World overworld music - Change to 76 to start right at the beginning of the SMB theme, or 74 to include the short drum intro normally at the beginning of the loop."
3905,979184,3856,Empty,Empty
3906,1015808,28560,Music,Instrument data.
3907,1044368,4208,Empty,Empty
3908,8192,4,MSU-1 Register (Write),"MSU_SEEK - Data Seek Port

   aaaaaaaa aaaaaaaa aaaaaaaa aaaaaaaa



   This register is a little endian 32-bit address. Writing to $2003 triggers the

   seek within the MSU-1 data file and sets the ""data busy"" bit on the status

   port until it completes."
3909,8192,1,MSU-1 Register (Read),"MSU_STATUS - Status Port

   dalp mrrr



   rrr = Revision. Always 001 in the current revision of MSU-1, may be different

         in a future revision with more features.

   m = Track missing. Set if, after seeking to a given audio track, that track is

       unavailable. Allows selectively falling back to SPC700 sound.

   p = Audio playing

   l = Audio repeat

   a = Audio busy

   d = Data busy"
3910,8193,1,MSU-1 Register (Read),"MSU_READ - Data Read Port

   dddddddd



   Reading from this register returns the next byte of data from the MSU-1 data

   file and increments the stream port's address automatically. Reads have no

   effect if the ""data busy"" bit is set on the status port."
3911,8194,6,MSU-1 Register (Read),"MSU_ID - Identification

   iiiiiiii iiiiiiii iiiiiiii iiiiiiii iiiiiiii iiiiiiii



   Reading from this register in order returns the string ""S-MSU1"" in ASCII. This

   allows the program to detect availability and as such offer compatibility

   fallbacks."
3912,8196,2,MSU-1 Register (Write),"MSU_TRACK - Audio Track

   tttttttt tttttttt



   This register is a little endian 16-bit value. Writing to $2005 triggers a

   track change and sets the ""audio busy"" bit on the status port until it

   completes. The currently playing track is automatically stopped."
3913,8198,1,MSU-1 Register (Write),"MSU_VOLUME - Audio Volume

   vvvvvvvv



   Sets the audio playback volume on a linear scale. A value of 0 is 0%

   (completely silent), 127 is 50%, and 255 is 100% (full volume)."
3914,8199,1,MSU-1 Register (Write),"MSU_CONTROL - Audio State Control

   0000 00rp



   p = Audio playing. If clear, audio playback from the MSU-1 is effectively

       paused.

   r = Audio repeat

   000000 = Unused bits. Must be set to 0 to ensure proper operation.



   Writing to this register has no effect if the ""audio busy"" bit is set on the

   status port."
3915,8448,1,SNES Register (PPU),"wb++++ INIDISP - Screen Display
   x---bbbb

   x    = Force blank on when set.
   bbbb = Screen brightness, F=max, 0=""off"".

   Note that force blank CAN be disabled mid-scanline. However, this can
   result in glitched graphics on that scanline, as the internal rendering
   buffers will not have been updated during force blank. Current theory
   is that BGs will be glitched for a few tiles (depending on how far in
   advance the PPU operates), and OBJ will be glitched for the entire
   scanline.

   Also, writing this register on the first line of V-Blank (225 or 240,
   depending on overscan) when force blank is currently active causes the
   OAM Address Reset to occur."
3916,8449,1,SNES Register (PPU),"wb++?- OBSEL - Object Size and Chr Address
   sssnnbbb

   sss  = Object size:
       000 =  8x8  and 16x16 sprites
       001 =  8x8  and 32x32 sprites
       010 =  8x8  and 64x64 sprites
       011 = 16x16 and 32x32 sprites
       100 = 16x16 and 64x64 sprites
       101 = 32x32 and 64x64 sprites
       110 = 16x32 and 32x64 sprites ('undocumented')
       111 = 16x32 and 32x32 sprites ('undocumented')

   nn   = Name Select
   bbb  = Name Base Select (Addr>>14)
       See the section ""SPRITES"" below for details.Sprite Information"
3917,8450,2,SNES Register (PPU),"wl++?- OAMADDL - OAM Address low byte
 wh++?- OAMADDH - OAM Address high bit and Obj Priority
   p------b aaaaaaaa

   p    = Obj Priority activation bit
       When this bit is set, an Obj other than Sprite 0 may be given
       priority. See the section ""SPRITES"" below for details.

   b aaaaaaaa = OAM address
       This can be thought of in two ways, depending on your conception of
       OAM. If you consider OAM as a 544-byte table, baaaaaaaa is the word
       address into that table. If you consider OAM to be a 512-byte table
       and a 32-byte table, b is the table selector and aaaaaaaa is the
       word address in the table. See the section ""SPRITES"" below for
       details.
   
   The internal OAM address is invalidated when scanlines are being
   rendered. This invalidation is deterministic, but we do not know how
   it is determined. Thus, the last value written to these registers is
   reloaded into the internal OAM address at the beginning of V-Blank if
   that occurs outside of a force-blank period. This is known as 'OAM
   reset'. 'OAM reset' also occurs on certain writes to $2100.

   Writing to either $2102 or $2103 resets the entire internal OAM Address
   to the values last written to this register. E.g., if you set $104 to
   this register, write 4 bytes, then write $1 to $2103, the internal OAM
   address will point to word 4, not word 6.Sprite Information"
3918,8452,1,SNES Register (PPU),"wb++-- OAMDATA - Data for OAM write
   dddddddd

   Note that OAM writes are done in an odd manner, in particular
   the low table of OAM is not affected until the high byte of a
   word is written (however, the high table is affected
   immediately). Thus, if you set the address, then alternate writes and
   reads, OAM will never be affected until you reach the high table!

   Similarly, if you set the address to 0, then write 1, 2, read, then
   write 3, OAM will end up as ""01 02 01 03"", rather than ""01 02 xx 03"" as
   you might expect.

   Technically, this register CAN be written during H-blank (and probably
mid-scanline as well). However, due to OAM address invalidation, the
   actual OAM byte written will probably not be what you expect. Note that
   writing during force-blank will only work as expected if that
   force-blank was begun during V-Blank, or (probably) if $2102/3 have
   been reset during that force-blank period.

   See the section ""SPRITES"" below for details.Sprite Information"
3919,8453,1,SNES Register (PPU),"wb+++- BGMODE - BG Mode and Character Size
   DCBAemmm

   A/B/C/D = BG character size for BG1/BG2/BG3/BG4
       If the bit is set, then the BG is made of 16x16 tiles. Otherwise,
       8x8 tiles are used. However, note that Modes 5 and 6 always use
       16-pixel wide tiles, and Mode 7 always uses 8x8 tiles. See the
       section ""BACKGROUNDS"" below for details.

   mmm  = BG Mode
   e    = Mode 1 BG3 priority bit
       Mode     BG depth  OPT  Priorities
                1 2 3 4        Front -> Back
       -=-------=-=-=-=----=---============---
        0       2 2 2 2    n    3AB2ab1CD0cd
        1       4 4 2      n    3AB2ab1C 0c
                   * if e set: C3AB2ab1  0c
        2       4 4        y    3A 2B 1a 0b
        3       8 4        n    3A 2B 1a 0b
        4       8 2        y    3A 2B 1a 0b
        5       4 2        n    3A 2B 1a 0b
        6       4          y    3A 2  1a 0
        7       8          n    3  2  1a 0
        7+EXTBG 8 7        n    3  2B 1a 0b

       ""OPT"" means ""Offset-per-tile mode"". For the priorities, numbers
       mean sprites with that priority. Letters correspond to BGs (A=1,
       B=2, etc), with upper/lower case indicating tile priority 1/0. See
       the section ""BACKGROUNDS"" below for details.

       Mode 7's EXTBG mode allows you to enable BG2, which uses the same
       tilemap and character data as BG1 but interprets bit 7 of the pixel
       data as a priority bit. BG2 also has some oddness to do with some
       of the per-BG registers below. See the Mode 7 section under
       BACKGROUNDS for details."
3920,8454,1,SNES Register (PPU),"wb+++- MOSAIC - Screen Pixelation
   xxxxDCBA

   A/B/C/D = Affect BG1/BG2/BG3/BG4

   xxxx = pixel size, 0=1x1, F=16x16
       The mosaic filter goes over the BG and covers each x-by-x square
       with the upper-left pixel of that square, with the top of the first
       row of squares on the 'starting scanline'. If this register is set
       during the frame, the 'starting scanline' is the current scanline,
       otherwise it is the first visible scanline of the frame. I.e. if
       even scanlines are completely red and odd scanlines are completely
       blue, setting the xxxx=1 mid-frame will make the rest of the screen
       either completely red or completely blue depending on whether you
       set xxxx on an even or an odd scanline.

       XXX: It seems that writing the same value to this register does not
       reset the 'starting scanline', but which changes do reset it?

       Note that mosaic is applied after scrolling, but before any clip
       windows, color windows, or math. So the XxX block can be partially
       clipped, and it can be mathed as normal with a non-mosaiced BG. But
       scrolling can't make it partially one color and partially another.

       Modes 5-6 should 'double' the expansion factor to expand
       half-pixels. This actually makes xxxx=0 have a visible effect,
       since the even half-pixels (usually on the subscreen) hide the odd
       half-pixels. The same thing happens vertically with interlace mode.

       Mode 7, of course, is weird. BG1 mosaics about like normal, as long
       as you remember that the Mode 7 transformations have no effect on
       the XxX blocks. BG2 uses bit A to control 'vertical mosaic' and bit
       B to control 'horizontal mosaic', so you could be expanding over
       1xX, Xx1, or XxX blocks. This can get really interesting as BG1
       still uses bit A as normal, so you could have the BG1 pixels
       expanded XxX with high-priority BG2 pixels expanded 1xX on top of
       them.

   See the section ""BACKGROUNDS"" below for details.Background Information"
3921,8455,4,SNES Register (PPU),"wb++?- BG1SC - BG1 Tilemap Address and Size
 wb++?- BG2SC - BG2 Tilemap Address and Size
 wb++?- BG3SC - BG3 Tilemap Address and Size
 wb++?- BG4SC - BG4 Tilemap Address and Size
   aaaaaayx

   aaaaaa = Tilemap address in VRAM (Addr>>10)
   x    = Tilemap horizontal mirroring
   y    = Tilemap veritcal mirroring
       All tilemaps are 32x32 tiles. If x and y are both unset, there is
       one tilemap at Addr. If x is set, a second tilemap follows the
       first that should be considered ""to the right of"" the first. If y
       is set, a second tilemap follows the first that should be
       considered ""below"" the first. If both are set, then a second
       follows ""to the right"", then a third ""below"", and a fourth ""below
       and to the right"".

   See the section ""BACKGROUNDS"" below for more details.Background Information"
3922,8459,2,SNES Register (PPU),"wb++?- BG12NBA - BG1 and 2 Chr Address
 wb++?- BG34NBA - BG3 and 4 Chr Address
   bbbbaaaa

   aaaa = Base address for BG1/3 (Addr>>13)
   bbbb = Base address for BG2/4 (Addr>>13)
       See the section ""BACKGROUNDS"" below for details.Background Information"
3923,8461,4,SNES Register (PPU),"ww+++- BG1HOFS - BG1 Horizontal Scroll ww+++- M7HOFS  - Mode 7 BG Horizontal Scroll ww+++- BG1VOFS - BG1 Vertical Scroll ww+++- M7VOFS  - Mode 7 BG Vertical Scroll   ------xx xxxxxxxx   ---mmmmm mmmmmmmm   x = The BG offset, 10 bits.   m = The Mode 7 BG offset, 13 bits two's-complement signed.   These are actually two registers in one (or would that be ""4 registers   in 2""?). Anyway, writing $210d will write both BG1HOFS which works   exactly like the rest of the BGnxOFS registers below ($210f-$2114), and   M7HOFS which works with the M7* registers ($211b-$2120) instead.   Modes 0-6 use BG1xOFS and ignore M7xOFS, while Mode 7 uses M7xOFS and   ignores BG1HOFS. See the appropriate sections below for details, and   note the different formulas for BG1HOFS versus M7HOFS."
3924,8463,6,SNES Register (PPU),"ww+++- BG2HOFS - BG2 Horizontal Scroll
 ww+++- BG2VOFS - BG2 Vertical Scroll
 ww+++- BG3HOFS - BG3 Horizontal Scroll
 ww+++- BG3VOFS - BG3 Vertical Scroll
 ww+++- BG4HOFS - BG4 Horizontal Scroll
 ww+++- BG4VOFS - BG4 Vertical Scroll
   ------xx xxxxxxxx

   Note that these are ""write twice"" registers, first the low byte is
   written then the high. Current theory is that writes to the register
   work like this:
     BGnHOFS = (Current<<8) | (Prev&~7) | ((Reg>>8)&7);
     Prev = Current;
       or
     BGnVOFS = (Current<<8) | Prev;
     Prev = Current;

   Note that there is only one Prev shared by all the BGnxOFS registers.
   This is NOT shared with the M7* registers (not even M7xOFS and
   BG1xOFS).

   x = The BG offset, at most 10 bits (some modes effectively use as few
       as 8).

   Note that all BGs wrap if you try to go past their edges. Thus, the
   maximum offset value in BG Modes 0-6 is 1023, since you have at most 64
   tiles (if x/y of BGnSC is set) of 16 pixels each (if the appropriate
   bit of BGMODE is set).

   Horizontal scrolling scrolls in units of full pixels no matter if we're
   rendering a 256-pixel wide screen or a 512-half-pixel wide screen.
   However, vertical scrolling will move in half-line increments if
   interlace mode is active.

   See the section ""BACKGROUNDS"" below for details.Background Information"
3925,8469,1,SNES Register (PPU),"wb++?- VMAIN - Video Port Control
   i---mmii

   i    = Address increment mode:
           0 => increment after writing $2118/reading $2139
           1 => increment after writing $2119/reading $213a
       Note that a word write stores low first, then high. Thus, if you're
       storing a word value to $2118/9, you'll probably want to set 1
       here.

   ii = Address increment amount
       00 = Normal increment by 1
       01 = Increment by 32
       10 = Increment by 128
       11 = Increment by 128
   
   mm = Address remapping
       00 = No remapping
       01 = Remap addressing aaaaaaaaBBBccccc => aaaaaaaacccccBBB
       10 = Remap addressing aaaaaaaBBBcccccc => aaaaaaaccccccBBB
       11 = Remap addressing aaaaaaBBBccccccc => aaaaaacccccccBBB

       The ""remap"" modes basically implement address translation. If
       $2116/7 are set to #$0003, then word address #$0018 will be written
       instead, and $2116/7 will be incremented to $0004."
3926,8470,2,SNES Register (PPU),"wl++?- VMADDL - VRAM Address low byte
 wh++?- VMADDH - VRAM Address high byte
   aaaaaaaa aaaaaaaa

   This sets the address for $2118/9 and $2139/a. Note that this is a word
   address, not a byte address!

   See the sections ""BACKGROUNDS"" and ""SPRITES"" below for details.Background Information
Sprite Information"
3927,8472,2,SNES Register (PPU),"wl++-- VMDATAL - VRAM Data Write low byte
 wh++-- VMDATAH - VRAM Data Write high byte
   xxxxxxxx xxxxxxxx

   This writes data to VRAM. The writes take effect immediately(?), even
   if no increment is performed. The address is incremented when one of
   the two bytes is written; which one depends on the setting of bit 7 of
   register $2115. Keep in mind the address translation bits of $2115 as
   well.

   The interaction between these registers and $2139/a is unknown.

   See the sections ""BACKGROUNDS"" and ""SPRITES"" below for details.Background Information
Sprite Information"
3928,8474,1,SNES Register (PPU),"wb++?- M7SEL - Mode 7 Settings
   rc----yx

   r    = Playing field size: When clear, the playing field is 1024x1024
       pixels (so the tilemap completely fills it). When set, the playing
       field is much larger, and the 'empty space' fill is controlled by
       bit 6.

   c    = Empty space fill, when bit 7 is set:
          0 = Transparent.
          1 = Fill with character 0. Note that the fill is matrix
              transformed like all other Mode 7 tiles.
   
   x/y  = Horizontal/Veritcal mirroring. If the bit is set, flip the
          256x256 pixel 'screen' in that direction.

   See the section ""BACKGROUNDS"" below for details.Background Information"
3929,8475,4,SNES Register (PPU),"ww+++- M7A - Mode 7 Matrix A (also used with $2134/6)
 ww+++- M7B - Mode 7 Matrix B (also used with $2134/6)
 ww+++- M7C - Mode 7 Matrix C
 ww+++- M7D - Mode 7 Matrix D
   aaaaaaaa aaaaaaaa

   Note that these are ""write twice"" registers, first the low byte is
   written then the high. Current theory is that writes to the register
   work like this:
     Reg = (Current<<8) | Prev;
     Prev = Current;
   
   Note that there is only one Prev shared by all these registers. This
   Prev is NOT shared with the BGnxOFS registers, but it IS shared with
   the M7xOFS registers.

   These set the matrix parameters for Mode 7. The values are an 8-bit
   fixed point, i.e. the value should be divided by 256.0 when used in
   calculations. See below for more explanation.

   The product A*(B>>8) may be read from registers $2134/6. There is
   supposedly no important delay. It may not be operative during Mode 7
   rendering.

   See the section ""BACKGROUNDS"" below for details.Background Information"
3930,8479,2,SNES Register (PPU),"ww+++- M7X - Mode 7 Center X
 ww+++- M7Y - Mode 7 Center Y
   ---xxxxx xxxxxxxx

   Note that these are ""write twice"" registers, like the other M7*
   registers. See above for the write semantics. The value is 13 bit
   two's-complement signed.

   The matrix transformation formula is:

   [ X ]   [ A B ]   [ SX + M7HOFS - CX ]   [ CX ]
   [   ] = [     ] * [                  ] + [    ]
   [ Y ]   [ C D ]   [ SY + M7VOFS - CY ]   [ CY ]

   Note: SX/SY are screen coordinates. X/Y are coordinates in the playing
   field from which the pixel is taken. If $211a bit 7 is clear, the
   result is then restricted to 0<=X<=1023 and 0<=Y<=1023. If $211a bits 6
   and 7 are both set and X or Y is less than 0 or greater than 1023, use
   the low 3 bits of each to choose the pixel from character 0.

   The bit-accurate formula seems to be something along the lines of:
     #define CLIP(a) (((a)&0x2000)?((a)|~0x3ff):((a)&0x3ff))

     X[0,y] = ((A*CLIP(HOFS-CX))&~63)
            + ((B*y)&~63) + ((B*CLIP(VOFS-CY))&~63)
            + (CX<<8)
     Y[0,y] = ((C*CLIP(HOFS-CX))&~63)
            + ((D*y)&~63) + ((D*CLIP(VOFS-CY))&~63)
            + (CY<<8)

     X[x,y] = X[x-1,y] + A
     Y[x,y] = Y[x-1,y] + C

   (In all cases, X[] and Y[] are fixed point with 8 bits of fraction)

   See the section ""BACKGROUNDS"" below for details.Background Information"
3931,8481,1,SNES Register (PPU),"wb+++- CGADD - CGRAM Address
   cccccccc

   This sets the word address (i.e. color) which will be affected by $2122
   and $213b."
3932,8482,1,SNES Register (PPU),"ww+++- CGDATA - CGRAM Data write
   -bbbbbgg gggrrrrr

   This writes to CGRAM, effectively setting the palette colors.
   
   Accesses to CGRAM are handled just like accesses to the low table of
   OAM, see $2104 for details.

   Note that the color values are stored in BGR order."
3933,8483,3,SNES Register (PPU),"wb+++- W12SEL - Window Mask Settings for BG1 and BG2
 wb+++- W34SEL - Window Mask Settings for BG3 and BG4
 wb+++- WOBJSEL - Window Mask Settings for OBJ and Color Window
   ABCDabcd

   c    = Enable window 1 for BG1/BG3/OBJ
   a    = Enable window 2 for BG1/BG3/OBJ
   C/A  = Enable window 1/2 for BG2/BG4/Color
       When the bit is set, the corresponding window will affect the
       corresponding background (subject to the settings of $212e/f).

   d    = Window 1 Inversion for BG1/BG3/OBJ
   b    = Window 2 Inversion for BG1/BG3/OBJ
   D/B  = Window 1/2 Inversion for BG2/BG4/Color
       When the bit is set, ""W"" should be replaced by ""~W"" (not-W) in the
       window combination formulae below.

   See the section ""WINDOWS"" below for more details.Windowing Information"
3934,8486,4,SNES Register (PPU),"wb+++- WH0 - Window 1 Left Position
 wb+++- WH1 - Window 1 Right Position
 wb+++- WH2 - Window 2 Left Position
 wb+++- WH3 - Window 2 Right Position
   xxxxxxxx

   These set the offset of the appropriate edge of the appropriate window.
   Note that if the left edge is greater than the right edge, the window
   is considered to have no range at all (and thus ""W"" always is false).
   See the section ""WINDOWS"" below for more details.Windowing Information"
3935,8490,1,SNES Register (PPU),"wb+++- WBGLOG - Window mask logic for BGs
   44332211
 wb+++- WOBJLOG - Window mask logic for OBJs and Color Window
   ----ccoo

   44/33/22/11/oo/cc = Mask logic for BG1/BG2/BG3/BG4/OBJ/Color
       This specified the window combination method, using standard
       boolean operators:
         00 = OR
         01 = AND
         10 = XOR
         11 = XNOR

       Consider two variables, W1 and W2, which are true for pixels
       between the appropriate left and right bounds as set in
       $2126-$2129 and false otherwise. Then, you have the following
       possibilities: (replace ""W#"" with ""~W#"", depending on the Inversion
       settings of $2123-$2125)
         Neither window enabled => nothing masked.
         One window enabled     => Either W1 or W2, as appropriate.
         Both windows enabled   => W1 op W2, where ""op"" is as above.
       Where the function is true, the BG will be masked.

   See the section ""WINDOWS"" below for more details.Windowing Information"
3936,8492,2,SNES Register (PPU),"wb+++- TM - Main Screen Designation
 wb+++- TS - Subscreen Designation
   ---o4321

   1/2/3/4/o = Enable BG1/BG2/BG3/BG4/OBJ for display
               on the main (or sub) screen.

   See the section ""BACKGROUNDS"" below for details.Background Information"
3937,8494,2,SNES Register (PPU),"wb+++- TMW - Window Mask Designation for the Main Screen
 wb+++- TSW - Window Mask Designation for the Subscreen
   ---o4321

   1/2/3/4/o = Enable window masking for BG1/BG2/BG3/BG4/OBJ on the
               main (or sub) screen.

   See the section ""BACKGROUNDS"" below for details.Background Information"
3938,8496,1,SNES Register (PPU),"wb+++- CGWSEL - Color Addition Select
   ccmm--sd

   cc = Clip colors to black before math
       00 => Never
       01 => Outside Color Window only
       10 => Inside Color Window only
       11 => Always

   mm = Prevent color math
       00 => Never
       01 => Outside Color Window only
       10 => Inside Color Window only
       11 => Always

   s     = Add subscreen (instead of fixed color)

   d     = Direct color mode for 256-color BGs

   See the sections ""BACKGROUNDS"", ""WINDOWS"", and ""RENDERING THE
   SCREEN"" below for details.Background Information
Windowing Information
Rendering the Screen"
3939,8497,1,SNES Register (PPU),"wb+++- CGADSUB - Color math designation
   shbo4321

   s    = Add/subtract select
       0 => Add the colors
       1 => Subtract the colors

   h    = Half color math. When set, the result of the color math is
       divided by 2 (except when $2130 bit 1 is set and the fixed color is
       used, or when color is cliped).

   4/3/2/1/o/b = Enable color math on BG1/BG2/BG3/BG4/OBJ/Backdrop

   See the sections ""BACKGROUNDS"", ""WINDOWS"", and ""RENDERING THE
   SCREEN"" below for details.Background Information
Windowing Information
Rendering the Screen"
3940,8498,1,SNES Register (PPU),"wb+++- COLDATA - Fixed Color Data
   bgrccccc

   b/g/r = Which color plane(s) to set the intensity for.
   ccccc = Color intensity.

   So basically, to set an orange you'd do something along the lines of:
       LDA #$3f
       STA $2132
       LDA #$4f
       STA $2132
       LDA #$80
       STA $2132

   See the sections ""BACKGROUNDS"" and ""WINDOWS"" below for details.Background Information
Windowing Information"
3941,8499,1,SNES Register (PPU),"wb+++- SETINI - Screen Mode/Video Select
   se--poIi

   s    = ""External Sync"". Used for superimposing ""sfx"" graphics, whatever
       that means. Usually 0. Not much is known about this bit.
       Interestingly, the SPPU chip has a pin named ""EXTSYNC"" (or
       not-EXTSYNC, since it has a bar over it) which is tied to Vcc.

   e    = Mode 7 EXTBG (""Extra BG""). When this bit is set, you may enable
       BG2 on Mode 7. BG2 uses the same tile and character data as BG1,
       but interprets the high bit of the color data as a priority for the
       pixel.

       Various sources report additional effects for this bit, possibly
       related to bit 7. For example, ""Enable the Data Supplied From the
       External Lsi."", whatever that means. Of course, maybe that's a
       typo and it's supposed to apply to bit 7 instead.

   p    = Enable pseudo-hires mode. This creates a 512-pixel horizontal
       resolution by taking pixels from the subscreen for the
       even-numbered pixels (zero based) and from the main screen for the
       odd-numbered pixels. Color math behaves just as with Mode 5/6
       hires. The interlace bit still has no effect. Mosaic operates as
       normal (not like Mode 5/6). The 'subscreen' pixel is clipped (by
       windows) when the main-screen pixel to the LEFT is clipped, not
       when the one to the RIGHT is clipped as you'd expect. What happens
       with pixel column 0 is unknown.

       Enabling this bit in Modes 5 or 6 has no effect.

   o    = Overscan mode. When set, 239 lines will be displayed instead of
       the normal 224. This also means V-Blank will occur that
       much later, and be shorter. All that happens is that extra lines
       get added to the display, and it seems the TV will like to move
       the display up 8 pixels. See below for more details.

   I    = OBJ Interlace. When set regardless of BG mode, the OBJ will be
       interlaced (see bit 0 below), and thus will appear half-height.

       Note that this only controls whether obj are drawn as normal or
       not; the interlace signal is only output to the TV based on bit 0
       below.

   i    = Screen interlace. When set in BG mode 5 (and probably 6), the
       effective screen height will be 448 (or 478) pixles, rather than
       224 (or 239). When set in any other mode, the screen will just get
       a bit jumpy. However, toggling the tilemap each field would
       simulate the increased screen height (much like pseudo-hires
       simulares hires).

       In hardware, setting this bit makes the SNES output a normal
       interlace signal rather than always forcing one frame.

   See the sections ""BACKGROUNDS"" and ""SPRITES"" below for details.

   Overscan: The bit only matters at the very end of the frame, if you
   change the setting on line 0xE0 before the normal NMI trigger point
   then it's the same as if you had it on all frame. Note that this
   affects both the NMI trigger point and when HDMA stops for the
   frame.

   If you turn the bit off at the very beginning of scanline X (for
   0xE1<=X<=0xF0), NMI will occur on line X and the last HDMA transfer
   will occur on line X-1. However, on my TV at least, the display will
   remain in the normal no-overscan position for lines E1-EC, it will
   move up only one pixel for line ED, and it will lose vertical sync
   for lines EF-F4!

   Turning the bit on, only line E1 gives any effect: NMI will occur on
   line E2, although the last HDMA will still occur on line E0.
   Anything else acts like you left the bit off the whole time. Note,
   however, that if you wait too long after the beginning of the
   scanline then you will get no effect.

   Even if there is no visible effect, the overscan setting still
   affects VRAM writes. In particular, executing ""LDA #'-' / STA $2118
   / LDA r2133 / STA $2133 / LDA #'+' / STA $2118"" during the E1-F0
   period will write only + or only - to VRAM, depending on whether the
   overscan bit was set to 0 or 1.Background Information
Sprite Information"
3942,8500,3,SNES Register (PPU),"r l+++? MPYL - Multiplication Result low byte
r m+++? MPYM - Multiplication Result middle byte
r h+++? MPYH - Multiplication Result high byte
   xxxxxxxx xxxxxxxx xxxxxxxx

   This is the 2's compliment product of the 16-bit value written to $211b
   and the 8-bit value most recently written to $211c. There is supposedly
   no important delay. It may not be operative during Mode 7 rendering."
3943,8503,1,SNES Register (PPU),"b++++ SLHV - Software Latch for H/V Counter
   --------

   When read, the H/V counter (as read from $213c and $213d) will be
   latched to the current X and Y position if bit 7 of $4201 is set. The
   data actually read is open bus."
3944,8504,1,SNES Register (PPU),"r w++?- OAMDATAREAD* - Data for OAM read
   xxxxxxxx

   OAM reads are straightforward: the current byte as set in $2102/3 and
   incremented by reads from this register and writes to $2104 will be
   returned. Note that writes to the lower table are not affected so
   logically. See register $2104 and the section ""SPRITES"" below for
   details.

   Also, note that OAM address invalidation probably affects the address
   read by this register as well."
3945,8505,2,SNES Register (PPU),"r l++?- VMDATALREAD* - VRAM Data Read low byte
r h++?- VMDATAHREAD* - VRAM Data Read high byte
   xxxxxxxx xxxxxxxx

   Simply, this reads data from VRAM. The address is incremented when
   either $2139 or $213a is read, depending on the setting of bit 7 of
   $2115.

   Actually, the reading is more complex. When either of these registers
   is read, the appropriate byte from a word-sized buffer is returned. A
   word from VRAM is loaded into this buffer just *before* the VRAM
   address is incremented. The actual data read and the amount of the
   increment depend on the low 4 bits of $2115. The effect of this is
   that a 'dummy read' is required after setting $2116-7 before you start
   getting the actual data.

   The interaction between these registers and $2118/9 is unknown.

   See the sections ""BACKGROUNDS"" and ""SPRITES"" below for details.Background Information
Sprite Information"
3946,8507,1,SNES Register (PPU),"r w++?- CGDATAREAD* - CGRAM Data read
   -bbbbbgg gggrrrrr

   This reads from CGRAM.

   Accesses to CGRAM are handled just like accesses to the low table of
   OAM, see $2138 for details.

   Note that the color values are stored in BGR order. The '-' bit is PPU2
   Open Bus."
3947,8508,2,SNES Register (PPU),"r w++++ OPHCT - Horizontal Scanline Location
r w++++ OPVCT - Vertical Scanline Location
   -------x xxxxxxxx

   These values are latched by reading $2137 when bit 7 of $4201 is set,
   or by clearing-and-setting bit 7 of $4201 either by writing $4201 or by
   pin 6 of Controller Port 2 (the latch occurs on the 1->0 transition).

   Note that the value read is only 9 bits: bits 1-7 of the high byte are
   PPU2 Open Bus. Each register keeps seperate track of whether to
   return the low or high byte. The high/low selector is reset to 'low'
   when $213f is read (the selector is NOT reset when the counter is
   latched).

   H Counter values range from 0 to 339, with 22-277 being visible on the
   screen. V Counter values range from 0 to 261 in NTSC mode (262 is
   possible every other frame when interlace is active) and 0 to 311 in
   PAL mode (312 in interlace?), with 1-224 (or 1-239(?) if overscan is
   enabled) visible on the screen."
3948,8510,1,SNES Register (PPU),"r b++++ STAT77 - PPU Status Flag and Version
   trm-vvvv

   t    = Time Over Flag. If more than 34 sprite-tiles (e.g. a 16x16
       sprite has 2 sprite-tiles) were encountered on a single line, this
       flag will be set. The flag is reset at the end of V-Blank. See the
       section ""SPRITES"" below for details.

   r    = Range Over Flag. If more than 32 sprites were encountered on a
       single line, this flag will be set. The flag is reset at the end of
       V-Blank. See the section ""SPRITES"" below for details.

       Note that the above two flags are set whether or not OBJ are
       actually enabled at the time.

   m    = ""Master/slave mode select"". Little is known about this bit.
       Current theory is that it indicates the status of the ""MASTER"" pin
       on the S-PPU chip, which in the normal SNES is always Gnd. We
       always seem to read back 0 here.

   vvvv = 5c77 chip version number. So far, we've only encountered version
       1.

   The '-' bit is PPU Open Bus.Sprite Information"
3949,8511,1,SNES Register (PPU),"r b++++ STAT78 - PPU Status Flag and Version
   fl-pvvvv

   f    = Interlace Field. This will toggle every V-Blank.

   l    = External latch flag. When the PPU counters are latched, this
       flag gets set. The flag is reset on read, but only when $4201 bit 7
       is set. 

   p    = NTSC/Pal Mode. If this is a PAL SNES, this bit will be set,
       otherwise it will be clear.

   vvvv = 5C78 chip version number. So far, we've encountered at least 2
       and 3. Possibly 1 as well.

   The '-' bit is PPU2 Open Bus.

   Note: as a side effect of reading this register, the high/low byte
   selector for $213c/d is reset to 'low'."
3950,8512,4,SNES Register (APU),"rwb++++ APUIO0 - APU I/O register 0
rwb++++ APUIO1 - APU I/O register 1
rwb++++ APUIO2 - APU I/O register 2
rwb++++ APUIO3 - APU I/O register 3
   xxxxxxxx

   These registers are used in communication with the SPC700. Note that
   the value written here is not the value read back. Rather, the value
   written shows up in the SPC700's registers $f4-7, and the values
   written to those registers by the SPC700 are what you read here.

   If the SPC700 writes the register during a read, the value read will
   be the logical OR of the old and new values. The exact cycles during
   which the 'read' actually occurs is not known, although a good guess
   would be some portion of the final 3 master cycles of the 6-cycle
   memory access.
   
   Note that these registers are mirrored throughout the range
   $2140-$217f."
3951,8576,1,SNES Register (Hardware),"rwb++++ WMDATA - WRAM Data read/write
   xxxxxxxx

   This register reads to or writes from the WRAM address set in $2181-3.
   The address is then incremented. The effect of mixed reads and writes
   is unknown, but it is suspected that they are handled logically.

   Note that attempting a DMA from WRAM to this register will not work,
   WRAM will not be written. Attempting a DMA from this register to
   WRAM will similarly not work, the value written is (initially) the Open
   Bus value. In either case, the address in $2181-3 is not incremented."
3952,8577,3,SNES Register (Hardware),"wl++++ WMADDL - WRAM Address low byte
 wm++++ WMADDM - WRAM Address middle byte
 wh++++ WMADDH - WRAM Address high bit
   -------x xxxxxxxx xxxxxxxx

   This is the address that will be read or written by accesses to $2180.
   Note that WRAM is also mapped in the SNES memory space from $7E:0000 to
   $7F:FFFF, and from $0000 to $1FFF in banks $00 through $3F and $80
   through $BF.

   Verious docs indicate that these registers may be read as well as
   written. However, they are wrong. These registers are open bus.

   DMA from WRAM to these registers has no effect. Otherwise, however, DMA
   writes them as normal. This means you could use DMA mode 4 to $2180 and
   a table in ROM to write any sequence of RAM addresses.

   The value does not wrap at page boundaries on increment."
3953,8704,1,SA-1 Register (Write),"CPU Control ($20, w, x)

   IRrNmmmm



   I = Enable SA-1 IRQ

   R = SA-1 Ready

       0 = Ready

       1 = Wait

   r = SA-1 Reset

       0 = Cancel

       1 = Reset

   N = Enable SA-1 NMI

   mmmm = Messages from SNES CPU"
3954,8705,1,SA-1 Register (Write),"Super Nintendo CPU INT Enable ($00, w, x)

   I-C----



   I = Enable IRQ from SA-1

   C = Enable Character Conversion DMA IRQ"
3955,8706,1,SA-1 Register (Write),"Super Nintendo CPU INT Clear ($00, w, x)

   I-C----



   I = Clear IRQ from SA-1

       0 = No Change

       1 = Change

   C = Clear Character Conversion DMA IRQ

       0 = No Change

       1 = Clear"
3956,8707,2,SA-1 Register (Write),"SA-1 CPU Reset Vector ($xxxx, w, x)

   aaaaaaaa aaaaaaaa



   a = SA-1 reset vector address (in bank $00)"
3957,8709,2,SA-1 Register (Write),"SA-1 CPU NMI Vector ($xxxx, w, x)

   aaaaaaaa aaaaaaaa



   a = SA-1 NMI vector address (in bank $00)"
3958,8711,2,SA-1 Register (Write),"SA-1 CPU IRQ Vector ($xxxx, w, x)

   aaaaaaaa aaaaaaaa



   a = SA-1 IRQ vector address (in bank $00)"
3959,8713,1,SA-1 Register (Write),"Super Nintendo CPU Control ($00, W, x)

   IS-Nmmmm



   I = Enable SNES IRQ

   S = IRQ vector select

       0 = ROM

       1 = SNES IRQ register ($220E)

   N = NMI vector select

       0 = ROM

       1 = SNES NMI register ($220C)

   mmmm = Message from SA-1"
3960,8714,1,SA-1 Register (Write),"SA-1 CPU INT Enable ($00, W, x)

   ITDN----



   I = Switch IRQ control from SNES to SA-1

   T = Switch IRQ control from timer to SA-1

   D = Switch IRQ control to SA-1 after SA-1 DMA

   N = Switch NMI control from SNES to SA-1"
3961,8715,1,SA-1 Register (Write),"SA-1 CPU INT Clear ($00, W, x)   ITDN----   I = Switch IRQ clear from SNES to SA-1   T = Switch IRQ clear from timer to SA-1   D = Switch IRQ clear to SA-1 after SA-1 DMA   N = Switch NMI clear from SNES to SA-1"
3962,8716,2,SA-1 Register (Write),"Super Nintendo CPU NMI Vector ($xxxx, w, x)

   aaaaaaaa aaaaaaaa



   a = SNES NMI vector address (in bank $00)"
3963,8718,2,SA-1 Register (Write),"Super Nintendo CPU IRQ Vector ($xxxx, w, x)

   aaaaaaaa aaaaaaaa



   a = SNES IRQ vector address (in bank $00)"
3964,8720,1,SA-1 Register (Write),"H/V Timer Control ($00, W, x)

   T-----VH



   T = Timer type

       0 = HV Timer

       1 = Linear timer

   V = Vertical count enable

   H = Horizontal count enable"
3965,8721,1,SA-1 Register (Write),"SA-1 CPU Timer Restart ($xx, W, x)

   --------



   Simply writing to this register restarts the timer to zero."
3966,8722,2,SA-1 Register (Write),"Set H-Count ($xxxx, W, x)

   -------H HHHHHHHH



   In HV mode values are 0 to 340.

   In linear mode values are 0 to 511 (lower 9 bits)."
3967,8722,2,SA-1 Register (Write),"Set V-Count ($xxxx, W, x)

   -------V VVVVVVVV



   In HV mode values are 0 to 261 (NTSC) or 0 to 311 (PAL).

   In linear mode values are 0 to 511 (upper 9 bits)."
3968,8736,1,SA-1 Register (Write),"Set Super MMC Bank C ($00, w, x)

   B----AAA



   B = Bank CX projection

       1 = Bank data

       0 = Game Pak ROM area

   AAA = ROM area select



   When B is set, accessing an address in $00-1F:8000-FFFF will return (AAA << 20) | (addr & 0x0F7FFF).

   If B is not set accessing an address in $00-1F:8000-FFFF will return (addr & 0x0F7FFF).

   $C0-$CF:0000-FFFF will always return (AAA << 20) | (addr & 0x0FFFFF)."
3969,8737,1,SA-1 Register (Write),"Set Super MMC Bank D ($01, w, x)

   B----AAA



   B = Bank DX projection

       1 = Bank data

       0 = Game Pak ROM area

   AAA = ROM area select



   When B is set, accessing an address in $20-3F:8000-FFFF will return (AAA << 20) | (addr & 0x0F7FFF).

   If B is not set accessing an address in $20-3F:8000-FFFF will return  (addr & 0x2F7FFF).

   $D0-$DF:0000-FFFF will always return (AAA << 20) | (addr & 0x0FFFFF)."
3970,8738,1,SA-1 Register (Write),"Set Super MMC Bank E ($02, w, x)

   B----AAA



   B = Bank EX projection

       1 = Bank data

       0 = Game Pak ROM area

   AAA = ROM area select



   When B is set, accessing an address in $80-9F:8000-FFFF will return (AAA << 20) | (addr & 0x0F7FFF).

   If B is not set accessing an address in $80-9F:8000-FFFF will return  (addr & 0x4F7FFF).

   $E0-$EF:0000-FFFF will always return (AAA << 20) | (addr & 0x0FFFFF)."
3971,8739,1,SA-1 Register (Write),"Set Super MMC Bank F ($03, w, x)

   B----AAA



   B = Bank FX projection

       1 = Bank data

       0 = Game Pak ROM area

   AAA = ROM area select



   When B is set, accessing an address in $A0-BF:8000-FFFF will return (AAA << 20) | (addr & 0x0F7FFF).

   If B is not set accessing an address in $A0-BF:8000-FFFF will return  (addr & 0x6F7FFF).

   $F0-$FF:0000-FFFF will always return (AAA << 20) | (addr & 0x0FFFFF)."
3972,8740,1,SA-1 Register (Write),"Super Nintendo CPU BW-RAM Address Mapping ($00, w, x)

   ---BBBBB



   BBBBB = Which portion of BW-RAM to map to $00-3F:$6000-$7FFF and $80-BF:$6000-$7FFF"
3973,8741,1,SA-1 Register (Write),"SA-1 CPU BW-RAM Address Mapping ($00, W, x)

   SBBBBBBB



   S = BW-RAM source to be projected

       0 = $40-43 in 32 blocks (uses B0 to B4)

       1 = $60-6F in 128 blocks (uses B0 to B6)

   BBBBBBB = BW-RAM mapping for the SA-1 (much like $2224)"
3974,8742,1,SA-1 Register (Write),"Super Nintendo CPU BW-RAM Write Enable ($00, w, x)

   P-------



   P = Protect BW-RAM from writes from the SNES

       0 = Protect

       1 = Write enabled"
3975,8743,1,SA-1 Register (Write),"SA-1 CPU BW-RAM Write Enable ($00, w, x)

   P-------



   P = Protect BW-RAM from writes from the SA-1

       0 = Protect

       1 = Write enabled"
3976,8744,1,SA-1 Register (Write),"BW-RAM Write-Protected Area ($FF, w, x)

   ----AAAA



   AAAA = Area to protect



   Size of $400000-$4000FF to protect, 1024*2^(AAAA+1)"
3977,8745,1,SA-1 Register (Write),"SA-1 I-RAM Write Protection ($00, w, x)

   76543210



   0 = Protect $3000 to $30FF

   1 = Protect $3100 to $31FF

   2 = Protect $3200 to $32FF

   3 = Protect $3300 to $33FF

   4 = Protect $3400 to $34FF

   5 = Protect $3500 to $35FF

   6 = Protect $3600 to $36FF

   7 = Protect $3700 to $37FF"
3978,8746,1,SA-1 Register (Write),"SA-1 I-RAM Write Protection ($00, W, x)

   76543210



   0 = Protect $3000 to $30FF and $0000 to $00FF

   1 = Protect $3100 to $31FF and $0100 to $01FF

   2 = Protect $3200 to $32FF and $0200 to $02FF

   3 = Protect $3300 to $33FF and $0300 to $03FF

   4 = Protect $3400 to $34FF and $0400 to $04FF

   5 = Protect $3500 to $35FF and $0500 to $05FF

   6 = Protect $3600 to $36FF and $0600 to $06FF

   7 = Protect $3700 to $37FF and $0700 to $07FF"
3979,8752,1,SA-1 Register (Write),"DMA Control ($00, W, x)

   CPMT-DSS



   C = DMA Enable

   P = Priority

       0 = SA-1 CPU

       1 = DMA

   M = DMA Mode

       0 = Normal DMA

       1 = Character Conversion DMA (CC-DMA)

   T = Character Conversion Type

       0 = SA-1 CPU to I-RAM

       1 = BW-RAM to I-RAM

   D = Destination

       0 = I-RAM

       1 = BW-RAM

   SS = Source

        00 = ROM

        01 = BW-RAM

        10 = I-RAM"
3980,8753,1,SA-1 Register (Write),"CC-DMA Parameters ($00, X, x)

   E--SSSCC



   E = End of conversion 1, set by SNES

   SSS = VRAM horizontal character size 2^SSS

   CC = Color mode

        00 = 8 Bit/Dot

        01 = 4 Bit/Dot

        10 = 2 Bit/Dot"
3981,8754,3,SA-1 Register (Write),"DMA Source Device Start Address ($xx, X, x)

   AAAAAAAA AAAAAAAA AAAAAAAA



   AAAAAAAAAAAAAAAAAAAAAAAA = Source start address



   Write in order low, middle, then high."
3982,8757,3,SA-1 Register (Write),"DMA Destination Start Address ($xx, X, x)

   AAAAAAAA AAAAAAAA AAAAAAAA



   AAAAAAAAAAAAAAAAAAAAAAAA = Destination start address



   Writing to $2236 will initalize I-RAM DMA.

   Writing to $2237 will initalize BW-RAM DMA.

   Write in order low, middle, then high."
3983,8760,2,SA-1 Register (Write),"DMA Terminal Counter ($xx, W, x)

   CCCCCCCC CCCCCCCC



   CCCCCCCCCCCCCCCC = Counter for number of bytes to transmit (0 to 65535)"
3984,8767,1,SA-1 Register (Write),"BW-RAM BIT MAP Format ($00, W, x)

   C-------



   C = color mode

       0 = 16-color mode

       1 = 4-color mode"
3985,8768,16,SA-1 Register (Write),"BIT MAP Register File ($xx, W, x)

   $2240-$2247 = Buffer 1

   $2248-$224F = Buffer 2"
3986,8784,1,SA-1 Register (Write),"Arithmetic Control ($00, W, x)

   ------OO



   OO = Operation

       00 = Multiplication

       01 = Division

       10 = Cumulative sum"
3987,8785,2,SA-1 Register (Write),"Arithmetic Parameters: Multiplicand / Dividend ($xx, W, x)

   NNNNNNNN NNNNNNNN



   NNNNNNNNNNNNNNNN = Signed 16-bit data"
3988,8787,2,SA-1 Register (Write),"Arithmetic Parameters: Multiplier / Divisor ($xx, W, x)

   NNNNNNNN NNNNNNNN



   NNNNNNNNNNNNNNNN = 16-bit data



   Signed if multiplication. Unsigned if division."
3989,8792,1,SA-1 Register (Write),"Variable-Length BIT Processing ($xx, W, x)

   H---VVVV



   H = Read mode

       1 = Auto increment

       0 = Fixed

   VVVV = Length of previously stored data

          0000 = 16

          0001-1111 = Literal"
3990,8793,3,SA-1 Register (Write),"Variable-Length BIT Game Pack ROM Start Address ($xx, W, x)

   AAAAAAAA AAAAAAAA AAAAAAAA



   A = ROM start address



   Execution begins on write to $225B."
3991,8960,1,SA-1 Register (Read),"Super Nintendo CPU Flag Read ($xx, x, r)

   IVDNmmmm



   I = SA-1 IRQ

       0 = No Interrupt

       1 = Interrupt

   V = SNES IRQ vector setting

       0 = ROM

       1 = SIV register

   D = Character Conversion DMA IRQ flag

       0 = No Interrupt

       1 = Interrupt

   N = SNES NMI vector setting

       0 = ROM

       1 = SNV register

   mmmm = Messages from SA-1 CPU"
3992,8961,1,SA-1 Register (Read),"SA-1 CPU Flag Read ($xx, x, R)

   ITDNmmmm



   I = SNES IRQ flag

       0 = No Interrupt

       1 = Interrupt

   T = IRQ from timer

       0 = No Interrupt

       1 = Interrupt

   D = DMA IRQ flag

       0 = No Interrupt

       1 = Interrupt at end of DMA

   N = SNES NMI vector setting

       0 = No NMI

       1 = NMI

   mmmm = Messages from SNES CPU"
3993,8962,2,SA-1 Register (Read),"H-Count Read ($xx, x, R)

   -------H HHHHHHHH



   In HV mode values are 0 to 340.

   In linear mode values are 0 to 511 (lower 9 bits)."
3994,8964,2,SA-1 Register (Read),"V-Count Read ($xx, x, R)

   -------H HHHHHHHH



   In HV mode values are 0 to 261 (NTSC) or 0 to 311 (PAL).

   In linear mode values are 0 to 511 (upper 9 bits)."
3995,8966,5,SA-1 Register (Read),"Arithmetic Result [Product / Quotient / Accumulative Sum] ($xx, x, R)



   Multiplication: $2306-2309 signed

   Division: $2306-2307 signed, remainder in $2308-2309 unsigned

   Cumulative sum: $2306-230A signed"
3996,8971,1,SA-1 Register (Read),"Arithmetic Overflow Flag ($xx, x, R)

   O-------



   O = Overflow flag"
3997,8972,2,SA-1 Register (Read),"Variable-Length Data Read Port ($xx, x, R)



   16-bit results from $2258"
3998,8974,1,SA-1 Register (Read),"Version Code Register (, x, x)



   SA-1 Version"
3999,12288,2,Super FX Register,Default Source/Destination Register (R0)
4000,12290,2,Super FX Register,X coordinate for PLOT instruction (R1)
4001,12292,2,Super FX Register,Y coordinate for PLOT instruction (R2)
4002,12294,2,Super FX Register,General purpose register (R3)
4003,12296,2,Super FX Register,Lower 16 bits of result from LMULT instruction (R4)
4004,12298,2,Super FX Register,General purpose register (R5)
4005,12300,2,Super FX Register,Multiplier for FMULT and LMULT instructions (R6)
4006,12302,2,Super FX Register,Source 1 (fixed point texel X position) for MERGE instruction (R7)
4007,12304,2,Super FX Register,Source 2 (fixed point texel Y position) for MERGE instruction (R8)
4008,12306,2,Super FX Register,General purpose register (R9)
4009,12308,2,Super FX Register,"General purpose register, commonly used as stack pointer (R10)"
4010,12310,2,Super FX Register,Destination for LINK instruction (R11)
4011,12312,2,Super FX Register,Counter for LOOP instruction (R12)
4012,12314,2,Super FX Register,Branch for LOOP instruction (R13)
4013,12316,2,Super FX Register,"ROM Address Pointer for GETB, GETBH, GETBL, GETBS (R14)"
4014,12318,2,Super FX Register,Program Counter (R15)
4015,12336,2,Super FX Register,"Status/Flag Register: Indicates the status of the Super FX.
   I--BHL21 -RGVNCZ-

   I = IRQ, set to 1 when Super FX caused an interrupt. Set to 0 when read by 65c816.
   B = Set to 1 when the WITH instruction is executed
   H = Immediate higher 8-bit flag
   L = Immediate lower 8-bit flag
   2 = ALT2 mode set-up flag for the next instruction
   1 = ALT1 mode set-up flag for the next instruction
   R = Set to 1 when reading ROM using R14 address
   G = Go flag, set to 1 when the Super FX is running
   V = Overflow flag
   N = Negative flag
   C = Carry flag
   Z = Zero flag"
4016,12338,1,Super FX Register,Unused.
4017,12339,1,Super FX Register,"Backup RAM Register: Makes sure the data at banks $78-$79 gets protected (or
not) for writing, write-only."
4018,12340,1,Super FX Register,"Program Bank Register: Specifies the memory bank register to be accessed.
Usually changed with the LJMP instruction."
4019,12341,1,Super FX Register,Unused.
4020,12342,1,Super FX Register,"ROM Bank Register: When using the ROM buffering system, this register specifies
the bank of the game pak ROM being copied into the buffer. The ROMB instruction
is the general method used to change this register."
4021,12343,1,Super FX Register,"Control Flags Config Register: Selects the operating speed of the multiplier
in the Super FX and sets up a mask for the interrupt signal, write-only.
   I-0-----

   I = IRQ, normal or masked
   0 = MS, standard or high-speed. Should be set to 0 if the Super FX is running at
       21 MHz (see $3039)."
4022,12344,1,Super FX Register,"Screen Base Register: This register sets the starting address of the graphics
storage area. It is written to directly, rather than through a specific
instruction."
4023,12345,1,Super FX Register,"Clock Speed Register: This register assigns the Super FX operating frequency,
write-only. 10.7 MHz or 21.4 MHz depending on bit 0."
4024,12346,1,Super FX Register,"Screen Mode Register: Specifies the color gradient and screen height during
PLOT processing and controls ROM and RAM bus assignments, write-only.
   --HRWhMm

   Hh = Screen Height
        00 = 128 pixels
        01 = 160 pixels
        10 = 192 pixels
        11 = OBJ Mode
   R = Game Pak ROM Access - RON
       0 = SNES
       1 = Super FX
   W = Game Pak Work RAM Access - RAN
       0 = SNES
       1 = Super FX
   Mm = Color Mode
        00 = 4 colors
        01 = 16 colors
        10 = Not used
        11 = 256 colors"
4025,12347,1,Super FX Register,"Version Code Register: Checks for the version of the Super FX chip, read-only."
4026,12348,1,Super FX Register,"RAM Bank Register: When writing between the game WRAM and the Super FX
registers, this register specifies the bank of the Game Pak RAM being
used. The RAMB instruction is the general method used to change this
register. Only one bit is used to set the RAM bank to $70 or $71."
4027,12349,1,Super FX Register,Unused.
4028,12350,2,Super FX Register,"Cache Base Register: This register specifies the address of either the
Game Pak ROM or WRAM where data will be loaded from into the cache. Both
the LJMP and CACHE instructions are accepted ways to change this register."
4029,12544,512,Super FX Register,"Instruction cache, about 3 times faster than ROM and RAM."
4030,16406,2,SNES Register (Controller),"rwb++++ JOYSER0 - NES-style Joypad Access Port 1
   Rd: ------ca
   Wr: -------l
r?b++++ JOYSER1 - NES-style Joypad Access Port 2
   ---111db

   These registers basically have a direct connection to the controller
   ports on the front of the SNES. 

   l    = Writing this bit controlls the Latch line of both controller
       ports. When 1 is set, the Latch goes high (or is it low? At any
       rate, whichever one makes the pads latch their state). When
       cleared, the Latch goes the other way.
   
   a/b  = These bits return the state of the Data1 line.
   c/d  = These bits return the state of the Data2 line.
       Reading $4016 drives the Clock line of Controller Port 1 low.
       The SNES then reads the Data1 and Data2 lines, and Clock is set
       back to high. $4017 does the same for Port 2.
   
   Note the 1-bits in $4017: the CPU chip has pins for these bits, but
   these pins are tied to Gnd and thus always 1.

   Data for normal joypads is returned in the order: B, Y, Select,
   Start, Up, Down, Left, Right, A, X, L, R, 0, 0, 0, 0, then ones
   until latched again.

   Note that Auto-Joypad Read (see register $4200) will effectively write
   1 then 0 to bit 'l', then read 16 times from both $4016 and $4017. The
   'a' bits will end up in $4218/9, with the first bit read (e.g. the B
   button) in bit 15 of the word. Similarly, the 'b' bits end up in
   $421a/b, the 'c' bits in $42c/d, and the 'd' bits in $421e/f. Any
   further bits the device may return may be read from $4016/$4017 as
   normal.

   The effect of reading these during auto-joypad read is unknown.

   See the section ""CONTROLLERS"" below for details.Controller Information"
4031,16896,1,SNES Register (Hardware),"wb+++? NMITIMEN - Interrupt Enable Flags
   n-yx---a

   n = Enable NMI. If clear, NMI will not occur. If set, NMI will fire just
       after the start of V-Blank.

       NMI fires shortly after the V Counter reaches $E1 (or presumably $F0 if
       overscan is enabled, see register $2133).
   x/y = IRQ enable.
    0/0 = No IRQ will occur
    0/1 = An IRQ will occur sometime just after the V Counter reaches the value
          set in $4209/$420A.
    1/0 = An IRQ will occur sometime just after the H Counter reaches the value
          set in $4207/$4208.
    1/1 = An IRQ will occur sometime just after the H Counter reaches the value
          set in $4207/$4208 when V Counter equals the value set in
          $4209/$420A.
   a = Auto-Joypad Read Enable. When set, the registers $4218-$421F will be
       updated at about V Counter = $E3 (or presumably $F2).

   Some games try to read this register. However, they work only because open
   bus behavior gives them values they expect.

   This register is initialized to $00 on power on or reset."
4032,16897,1,SNES Register (Hardware),"wb++++ WRIO - Programmable I/O port (out-port)
   abxxxxxx

   This is basically just an 8-bit I/O Port. 'b' is connected to pin 6 of
   Controller Port 1. 'a' is connected to pin 6 of Controller Port 2, and
   to the PPU Latch line. Thus, writing a 0 then a 1 to bit 'a' will latch
   the H and V Counters much like reading $2137 (the latch happens on the
   transition to 0). When bit 'a' is 0, no latching can occur.

   Any other effects of this register are unknown. See $4213 for the
   I half of the I/O Port.

   Note that the IO Port is initialized as if this register were written
   with all 1-bits at power up, unchanged on reset(?)."
4033,16898,2,SNES Register (Hardware),"wb++++ WRMPYA - Multiplicand A
 wb++++ WRMPYB - Multiplicand B
   mmmmmmmm

   Write $4202, then $4203. 8 ""machine cycles"" (probably 48 master cycles)
   after $4203 is set, the product may be read from $4216/7. $4202 will
   not be altered by this process, thus a new value may be written to
   $4203 to perform another multiplication without resetting $4202.

   The multiplication is unsigned.

   $4202 holds the value $ff on power on and is unchanged on reset."
4034,16900,3,SNES Register (Hardware),"wl++++ WRDIVL - Dividend C low byte
 wh++++ WRDIVH - Dividend C high byte
   dddddddd dddddddd
 wb++++ WRDIVB - Divisor B
   bbbbbbbb

   Write $4204/5, then $4206. 16 ""machine cycles"" (probably 96 master
   cycles) after $4206 is set, the quotient may be read from $4214/5, and
   the remainder from $4216/7. Presumably, $4204/5 are not altered by this
   process, much like $4202.
   
   The division is unsigned. Division by 0 gives a quotient of $FFFF and a
   remainder of C.

   WRDIV holds the value $ffff on power on and is unchanged on reset."
4035,16903,2,SNES Register (Hardware),"wl++++ HTIMEL - H Timer low byte
 wh++++ HTIMEH - H Timer high byte
   -------h hhhhhhhh

   If bit 4 of $4200 is set and bit 5 is clear, an IRQ will fire every
   scanline when the H Counter reaches the value set here. If bits 4 and 5
   are both set, the IRQ will fire only when the V Counter equals the
   value set in $4209/a.
   
   Note that the H Counter ranges from 0 to 339, thus greater values will
   result in no IRQ firing.

   HTIME is initialized to $1ff on power on, unchanged on reset."
4036,16905,2,SNES Register (Hardware),"wl++++ VTIMEL - V Timer low byte
 wh++++ VTIMEH - V Timer high byte
   -------v vvvvvvvv

   If bit 5 of $4200 is set and bit 4 is clear, an IRQ will fire just
   after the V Counter reaches the value set here. If bits 4 and 5 are
   both set, the IRQ will fire instead when the V Counter equals the value
   set here and the H Counter reaches the value set in $4207/8.
   
   Note that the V Counter ranges from 0 to 261 in NTSC mode (262 is
   possible every other frame whan interlace is active) and 0 to 311 in
   PAL mode (312 in interlace?), thus greater values will result in no IRQ
   firing.

   VTIME is initialized to $1ff on power on, unchanged on reset."
4037,16907,1,SNES Register (DMA),"wb++++ MDMAEN - DMA Enable
   76543210

   7/6/5/4/3/2/1/0 = Enable the selected DMA channels. The CPU will be
       paused until all DMAs complete. DMAs will be executed in order from
       0 to 7 (?).

   See registers $43x0-$43xA for more details.

   If HDMA (init or transfer) occurs while a DMA is in progress, the DMA
   will be paused for the duration. If the HDMA happens to involve the
   current DMA channel, the DMA will be immediately terminated and the
   HDMA will progress using the then-current values of the registers.
   Other DMA channels will be unaffected.

   This register is initialized to $00 on power on or reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4038,16908,1,SNES Register (DMA),"wb++++ HDMAEN - HDMA Enable
   76543210

   7/6/5/4/3/2/1/0 = Enable the selected HDMA channels. HDMAs will be
       executed in order from 0 to 7 (?).

   See registers $43x0-$43xA for more details.

   If HDMA (init or transfer) occurs while a DMA is in progress, the DMA
   will be paused for the duration. If the HDMA happens to involve the
   current DMA channel, the DMA will be immediately terminated and the
   HDMA will progress using the then-current values of the registers.
   Other DMA channels will be unaffected.

   Note that enabling a channel mid-frame will begin HDMA at the next HDMA
   point. However, the HDMA register initialization only occurs before the
   HDMA point on scanline 0, so those registers will have to be
   initialized by hand before enabling HDMA. A channel that has already
   terminated for the frame cannot be restarted in this manner.

   Writing 0 to a bit will pause an ongoing HDMA; the transfer may be
   continued by writing 1 to the bit.

   This register is initialized to $00 on power on or reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4039,16909,1,SNES Register (Hardware),"wb++++ MEMSEL - ROM Access Speed
   -------f

   f    = FastROM select. The SNES uses a master clock running at
       about 21.477 MHz (current theory is 1.89e9/88 Hz). By default, the
       SNES takes 8 master cycles for each ROM access. If this bit is set
       and ROM is accessed via banks $80-$FF, only 6 master cycles will be
       used.

   This register is initialized to $00 on power on (or reset?).

   See my memory map and timing doc (memmap.txt) for more details.Memory Map and Timings"
4040,16912,1,SNES Register (Hardware),"r b++++ RDNMI - NMI Flag and 5A22 Version
   n---vvvv

   n    = NMI Flag. This bit is set at the start of V-Blank (at the
       moment, we suspect when H-Counter is somewhere between $28 and
       $4E), and cleared on read or at the end of V-Blank. Supposedly, it
       is required that this register be read during NMI.

       Note that this bit is not affected by bit 7 of $4200.

   vvvv = 5A22 chip version number. So far, we've encountered at least 2,
       maybe 1 as well.

   NMI is cleared on power on or reset.

   The '-' bits are open bus."
4041,16913,1,SNES Register (Hardware),"r b++++ TIMEUP - IRQ Flag
   i-------

   i    = IRQ Flag. This bit is set just after an IRQ fires (at the
       moment, it seems to have the same delay as the NMI Flag of $4210
       has following NMI), and is cleared on read or write. Supposedly, it
       is required that this register be read during the IRQ handler. If
       this really is the case, then I suspect that that read is what
       actually clears the CPU's IRQ line.

   This register is marked read/write in another doc, with no explanation.

   IRQ is cleared on power on or reset.
   
   The '-' bits are open bus."
4042,16914,1,SNES Register (Hardware),"r b++++ HVBJOY - PPU Status
   vh-----a

   v    = V-Blank Flag. If we're currently in V-Blank, this flag is set,
       otherwise it is clear. The setting seems to occur at H Counter
       about $16-$17 when V Counter is $E1, and the clearing at about $1E
       with V Counter 0.

   h    = H-Blank Flag. If we're currently in H-Blank, this flag is set,
       otherwise it is clear. The setting seems to occur at H Counter
       about $121-$122, and the clearing at about $12-$18.

   a    = Auto-Joypad Status. This is set while Auto-Joypad Read is in
       progress, and cleared when complete. It typically turns on at
       the start of V-Blank, and completes 3 scanlines later.

   This register is marked read/write in another doc, with no explanation."
4043,16915,1,SNES Register (Hardware),"r b++++ RDIO - Programmable I/O port (in-port)
   abxxxxxx

   Reading this register reads data from the I/O Port. The way the
   I/O Port works, any bit set to 0 in $4201 will be 0 here. Any bit
   set to 1 in $4201 may be 1 or 0 here, depending on whether any other
   device connected to the I/O Port has set a 0 to that bit.

   Bit 'b' is connected to pin 6 of Controller Port 1. Bit 'a' is
   connected to pin 6 of Controller Port 2, and to the PPU Latch line.

   See register $4201 for the O side of the I/O Port."
4044,16916,2,SNES Register (Hardware),"r l++++ RDDIVL - Quotient of Divide Result low byte
r h++++ RDDIVH - Quotient of Divide Result high byte
   qqqqqqqq qqqqqqqq

   Write $4204/5, then $4206. 16 ""machine cycles"" (probably 96 master
   cycles) after $4206 is set, the quotient may be read from these
   registers, and the remainder from $4216/7.
   
   The division is unsigned."
4045,16918,2,SNES Register (Hardware),"r l++++ RDMPYL - Multiplication Product or Divide Remainder low byte
r h++++ RDMPYH - Multiplication Product or Divide Remainder high byte
   xxxxxxxx xxxxxxxx

   Write $4202, then $4203. 8 ""machine cycles"" (probably 48 master cycles)
   after $4203 is set, the product may be read from these registers.

   Write $4204/5, then $4206. 16 ""machine cycles"" (probably 96 master
   cycles) after $4206 is set, the quotient may be read from $4214/5, and
   the remainder from these registers.

   The multiplication and division are both unsigned."
4046,16920,8,SNES Register (Controller),"r l++++ JOY1L - Controller Port 1 Data1 Register low byte
r h++++ JOY1H - Controller Port 1 Data1 Register high byte
r l++++ JOY2L - Controller Port 2 Data1 Register low byte
r h++++ JOY2H - Controller Port 2 Data1 Register high byte
r l++++ JOY3L - Controller Port 1 Data2 Register low byte
r h++++ JOY3H - Controller Port 1 Data2 Register high byte
r l++++ JOY4L - Controller Port 2 Data2 Register low byte
r h++++ JOY4H - Controller Port 2 Data2 Register high byte
   byetUDLR axlr0000

   The bitmap above only applies for joypads, obviously. More
   generically, Auto Joypad Read effectively sets 1 then 0 to $4016,
   then reads $4016/7 16 times to get the bits for these registers.
   
   a/b/x/y/l/r/e/t = A/B/X/Y/L/R/Select/Start button status.

   U/D/L/R = Up/Down/Left/Right control pad status. Note that only one of
       L/R and only one of U/D may be set, due to the pad hardware.

   These registers are only updated when the Auto-Joypad Read bit (bit 0)
   of $4200 is set. They are being updated while the Auto-Joypad Status
   bit (bit 0) of $4212 is set. Reading during this time will return
   incorrect values.

   See the section ""CONTROLLERS"" below for details.Controller Information"
4047,17152,1,SNES Register (DMA),"rwb++++ DMAP0 - DMA Control for Channel 0
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4048,17153,1,SNES Register (DMA),"rwb++++ BBAD0 - DMA Destination Register for Channel 0
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4049,17154,3,SNES Register (DMA),"rwl++++ A1T0L - DMA Source Address for Channel 0 low byte
rwh++++ A1T0H - DMA Source Address for Channel 0 high byte
rwb++++ A1B0 - DMA Source Address for Channel 0 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4304 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4302/3 will be incremented or decremented as specified by
   $4300. However $4304 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4050,17157,3,SNES Register (DMA),"rwl++++ DAS0L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS0H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB0 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4305/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4305/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4307 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4305/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4307 during indirect HDMA will take effect for the next
   transfer. Writes to $4305/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4051,17160,2,SNES Register (DMA),"rwl++++ A2A0L - HDMA Table Address low byte
rwh++++ A2A0H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4302/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4052,17162,1,SNES Register (DMA),"rwb++++ NLTR0 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4305/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4053,17163,2,SNES Register (DMA),"rwb++++ ????0 - Unknown
rwb++++ ????0 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $430F and $430B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4054,17168,1,SNES Register (DMA),"rwb++++ DMAP1 - DMA Control for Channel 1
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4055,17169,1,SNES Register (DMA),"rwb++++ BBAD1 - DMA Destination Register for Channel 1
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4056,17170,3,SNES Register (DMA),"rwl++++ A1T1L - DMA Source Address for Channel 1 low byte
rwh++++ A1T1H - DMA Source Address for Channel 1 high byte
rwb++++ A1B1 - DMA Source Address for Channel 1 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4314 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4312/3 will be incremented or decremented as specified by
   $4310. However $4314 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4057,17173,3,SNES Register (DMA),"rwl++++ DAS1L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS1H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB1 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4315/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4315/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4317 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4315/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4317 during indirect HDMA will take effect for the next
   transfer. Writes to $4315/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4058,17176,2,SNES Register (DMA),"rwl++++ A2A1L - HDMA Table Address low byte
rwh++++ A2A1H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4312/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4059,17178,1,SNES Register (DMA),"rwb++++ NLTR1 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4315/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4060,17179,2,SNES Register (DMA),"rwb++++ ????1 - Unknown
rwb++++ ????1 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $431F and $431B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4061,17184,1,SNES Register (DMA),"rwb++++ DMAP2 - DMA Control for Channel 2
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4062,17185,1,SNES Register (DMA),"rwb++++ BBAD2 - DMA Destination Register for Channel 2
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4063,17186,3,SNES Register (DMA),"rwl++++ A1T2L - DMA Source Address for Channel 2 low byte
rwh++++ A1T2H - DMA Source Address for Channel 2 high byte
rwb++++ A1B2 - DMA Source Address for Channel 2 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4324 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4322/3 will be incremented or decremented as specified by
   $4322/3. However $4324 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4064,17189,3,SNES Register (DMA),"rwl++++ DAS2L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS2H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB2 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4325/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4325/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4327 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4325/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4327 during indirect HDMA will take effect for the next
   transfer. Writes to $4325/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4065,17192,2,SNES Register (DMA),"rwl++++ A2A2L - HDMA Table Address low byte
rwh++++ A2A2H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4322/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4066,17194,1,SNES Register (DMA),"rwb++++ NLTR2 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4325/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4067,17195,2,SNES Register (DMA),"rwb++++ ????2 - Unknown
rwb++++ ????2 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $432F and $432B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4068,17200,1,SNES Register (DMA),"rwb++++ DMAP3 - DMA Control for Channel 3
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4069,17201,1,SNES Register (DMA),"rwb++++ BBAD3 - DMA Destination Register for Channel 3
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4070,17202,3,SNES Register (DMA),"rwl++++ A1T3L - DMA Source Address for Channel 3 low byte
rwh++++ A1T3H - DMA Source Address for Channel 3 high byte
rwb++++ A1B3 - DMA Source Address for Channel 3 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4334 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4332/3 will be incremented or decremented as specified by
   $4332/3. However $4334 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4071,17205,3,SNES Register (DMA),"rwl++++ DAS3L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS3H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB3 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4335/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4335/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4337 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4335/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4337 during indirect HDMA will take effect for the next
   transfer. Writes to $4335/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4072,17208,2,SNES Register (DMA),"rwl++++ A2A3L - HDMA Table Address low byte
rwh++++ A2A3H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4332/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4073,17210,1,SNES Register (DMA),"rwb++++ NLTR3 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4335/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4074,17211,2,SNES Register (DMA),"rwb++++ ????3 - Unknown
rwb++++ ????3 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $433F and $433B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4075,17216,1,SNES Register (DMA),"rwb++++ DMAP4 - DMA Control for Channel 4
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4076,17217,1,SNES Register (DMA),"rwb++++ BBAD4 - DMA Destination Register for Channel 4
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4077,17218,3,SNES Register (DMA),"rwl++++ A1T4L - DMA Source Address for Channel 4 low byte
rwh++++ A1T4H - DMA Source Address for Channel 4 high byte
rwb++++ A1B4 - DMA Source Address for Channel 4 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4344 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4342/3 will be incremented or decremented as specified by
   $4342/3. However $4344 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4078,17221,3,SNES Register (DMA),"rwl++++ DAS4L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS4H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB4 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4345/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4345/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4347 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4345/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4347 during indirect HDMA will take effect for the next
   transfer. Writes to $4345/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4079,17224,2,SNES Register (DMA),"rwl++++ A2A4L - HDMA Table Address low byte
rwh++++ A2A4H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4342/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4080,17226,1,SNES Register (DMA),"rwb++++ NLTR4 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4345/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4081,17227,2,SNES Register (DMA),"rwb++++ ????4 - Unknown
rwb++++ ????4 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $434F and $434B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4082,17232,1,SNES Register (DMA),"rwb++++ DMAP5 - DMA Control for Channel 5
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4083,17233,1,SNES Register (DMA),"rwb++++ BBAD5 - DMA Destination Register for Channel 5
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4084,17234,3,SNES Register (DMA),"rwl++++ A1T5L - DMA Source Address for Channel 5 low byte
rwh++++ A1T5H - DMA Source Address for Channel 5 high byte
rwb++++ A1B5 - DMA Source Address for Channel 5 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4354 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4352/3 will be incremented or decremented as specified by
   $4352/3. However $4354 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4085,17237,3,SNES Register (DMA),"rwl++++ DAS5L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS5H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB5 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4355/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4355/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4357 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4355/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4357 during indirect HDMA will take effect for the next
   transfer. Writes to $4355/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4086,17240,2,SNES Register (DMA),"rwl++++ A2A5L - HDMA Table Address low byte
rwh++++ A2A5H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4352/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4087,17242,1,SNES Register (DMA),"rwb++++ NLTR5 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4355/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4088,17243,2,SNES Register (DMA),"rwb++++ ????5 - Unknown
rwb++++ ????5 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $435F and $435B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4089,17248,1,SNES Register (DMA),"rwb++++ DMAP6 - DMA Control for Channel 6
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4090,17249,1,SNES Register (DMA),"rwb++++ BBAD6 - DMA Destination Register for Channel 6
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4091,17250,3,SNES Register (DMA),"rwl++++ A1T6L - DMA Source Address for Channel 6 low byte
rwh++++ A1T6H - DMA Source Address for Channel 6 high byte
rwb++++ A1B6 - DMA Source Address for Channel 6 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4364 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4362/3 will be incremented or decremented as specified by
   $4362/3. However $4364 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4092,17253,3,SNES Register (DMA),"rwl++++ DAS6L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS6H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB6 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4365/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4365/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4367 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4365/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4367 during indirect HDMA will take effect for the next
   transfer. Writes to $4365/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4093,17256,2,SNES Register (DMA),"rwl++++ A2A6L - HDMA Table Address low byte
rwh++++ A2A6H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4362/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4094,17258,1,SNES Register (DMA),"rwb++++ NLTR6 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4365/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4095,17259,2,SNES Register (DMA),"rwb++++ ????6 - Unknown
rwb++++ ????6 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $436F and $436B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4096,17264,1,SNES Register (DMA),"rwb++++ DMAP7 - DMA Control for Channel 7
   da-ifttt

   d    = Transfer Direction. When clear, data will be read from the CPU
       memory and written to the PPU register. When set, vice versa.
       
       Contrary to previous belief, this bit DOES affect HDMA! Indirect
       mode is more useful, it will read the table as normal and write
       from Bus B to the Bus A address specified. Direct mode will work as
       expected though, it will read counts from the table and try to
       write the data values into the table.

   a    = HDMA Addressing Mode. When clear, the HDMA table contains the
       data to transfer. When set, the HDMA table contains pointers to the
       data. This bit does not affect DMA.

   i    = DMA Address Increment. When clear, the DMA address will be
       incremented for each byte. When set, the DMA address will be
       decremented. This bit does not affect HDMA.

   f    = DMA Fixed Transfer. When set, the DMA address will not be
       adjusted. When clear, the address will be adjusted as specified by
       bit 4. This bit does not affect HDMA.

   ttt  = Transfer Mode.
       000 => 1 register write once             (1 byte:  p               )
       001 => 2 registers write once            (2 bytes: p, p+1          )
       010 => 1 register write twice            (2 bytes: p, p            )
       011 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)
       100 => 4 registers write once            (4 bytes: p, p+1, p+2, p+3)
       101 => 2 registers write twice alternate (4 bytes: p, p+1, p,   p+1)
       110 => 1 register write twice            (2 bytes: p, p            )
       111 => 2 registers write twice each      (4 bytes: p, p,   p+1, p+1)

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next HDMA transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4097,17265,1,SNES Register (DMA),"rwb++++ BBAD7 - DMA Destination Register for Channel 7
   pppppppp

   This specifies the Bus B address to access. Considering the standard
   CPU memory space, this specifies which address $00:2100-$00:21FF to
   access, with two- and four-register modes wrapping $21FF->$2100, not
   $2200.

   The effect of writing this register during HDMA to the associated
   channel is unknown. Most likely, the change takes effect for the
   next transfer.

   This register is set to $FF on power on, and is unchanged on reset."
4098,17266,3,SNES Register (DMA),"rwl++++ A1T7L - DMA Source Address for Channel 7 low byte
rwh++++ A1T7H - DMA Source Address for Channel 7 high byte
rwb++++ A1B7 - DMA Source Address for Channel 7 bank byte
   bbbbbbbb hhhhhhhh llllllll

   This specifies the starting Address Bus A address for the DMA transfer,
   or the beginning of the HDMA table for HDMA transfers. Note that Bus A
   does not access the Bus B registers, so pointing this address at say
   $00:2100 results in open bus.

   The effect of writing this register during HDMA to the associated
   channel is unknown. However, current theory is that only $4374 will
   affect the transfer. The changes will take effect at the next HDMA
   init.

   During DMA, $4372/3 will be incremented or decremented as specified by
   $4372/3. However $4374 will NOT be adjusted. These registers will not be
   affected by HDMA.

   This register is set to $FF on power on, and is unchanged on reset."
4099,17269,3,SNES Register (DMA),"rwl++++ DAS7L - DMA Size/HDMA Indirect Address low byte
rwh++++ DAS7H - DMA Size/HDMA Indirect Address high byte
rwb++++ DASB7 - HDMA Indirect Address bank byte
   bbbbbbbb hhhhhhhh llllllll

   For DMA, $4375/6 indicate the number of bytes to transfer. Note that
   this is a strict limit: if this is set to 1 then only 1 byte will be
   written, even if the transfer mode specifies 2 or 4 registers (and if
   this is 5, all 4 registers would be written once, then the first only
   would be written a second time). Note, however, that writing $0000 to
   this register actually results in a transfer of $10000 bytes, not 0.

   $4375/6 are decremented during DMA, and thus typically end up set to 0
   when DMA is complete.

   For HDMA, $4377 specifies the bank for indirect addressing mode. The
   indirect address is copied into $4375/6 and incremented appropriately.
   For direct HDMA, these registers are not used or altered.

   Writes to $4377 during indirect HDMA will take effect for the next
   transfer. Writes to $4375/6 during indirect HDMA will also take effect
   for the next HDMA transfer, however this is only noticable during
   repeat mode (for normal mode, a new indirect address will be read from
   the table before the transfer). For a direct transfer, presumably
   nothing will happen.

   This register is set to $FF on power on, and is unchanged on reset."
4100,17272,2,SNES Register (DMA),"rwl++++ A2A7L - HDMA Table Address low byte
rwh++++ A2A7H - HDMA Table Address high byte
   aaaaaaaa aaaaaaaa

   At the beginning of the frame $4372/3 are copied into this register for
   all active HDMA channels, and then this register is updated as the
   table is read. Thus, if a game wishes to start HDMA mid-frame (or
   change tables mid-frame), this register must be written. Writing this
   register mid-frame changes the table address for the next scanline.

   This register is not used for DMA.

   This register is set to $FF on power on, and is unchanged on reset."
4101,17274,1,SNES Register (DMA),"rwb++++ NLTR7 - HDMA Line Counter
   rccccccc

   r    = Repeat Select. When set, the HDMA transfer will be performed
       every line, rather than only when this register is loaded from the
       table. However, this byte (and the indirect HDMA address) will only
       be reloaded from the table when the counter reaches 0.

   ccccccc = Line count. This is decremented every scanline. When it
       reaches 0, a byte is read from the HDMA table into this register
       (and the indirect HDMA address is read into $4375/6 if applicable).

   One oddity: the register is decremeted before being checked for r
   status or c==0. Thus, setting a value of $80 is really ""128 lines with
   no repeat"" rather than ""0 lines with repeat"". Similarly, a value of $00
   will be ""128 lines with repeat"" when it doesn't mean ""terminate the
   channel"".

   This register is initialized at the end of V-Blank for every active
   HDMA channel. Note that if a game wishes to begin HDMA during the
   frame, it will most likely have to initalize this register. Writing
   this mid-transfer will similarly change the count and repeat to take
   effect next scanline. Remember though that 'repeat' won't take effect
   until after the next transfer period.

   This register is set to $ff on power on, and is unchanged on reset.

   See the section ""DMA AND HDMA"" below for more information.DMA and HDMA Information"
4102,17275,2,SNES Register (DMA),"rwb++++ ????7 - Unknown
rwb++++ ????7 - Unknown
   ????????

   The effects of these registers (if any) are unknown. $437F and $437B
   are really aliases for the same register.

   This register is set to $FF on power on, and is unchanged on reset."
4103,32803,4,Jump (JML/JSL),Modified by ZSNES incompatibility notice. Jumps to the main code.
4104,32807,4,Code,"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Inserts a SEP #$30, to set the processor status to 8-bit A and X/Y, and a BRA to skip the code that uploads the OAM clear routine to $7F8000.

The BRA jumps to $008052 if !UberASMTool = 0, and to $00804E if !UberASMTool = 1."
4105,32845,1,Opcode,"Not modified, however is used by Lunar Magic as an RTL for calling routines that end in RTS in bank 0 with a JSL via stack magic. So don't modify it."
4106,32846,4,Jump (JML/JSL),"Hijacked by UberASMTool.

JML, jumps to the routine that initializes the freeram used by the tool and executes the global init code."
4107,32850,3,Jump (JMP/JSR),"Hijacked by AddmusicK.

Inserts a JSR to the custom UploadSPCEngine routine inserted in the $008079 area, replacing the original JSR."
4108,32862,3,Hex Edit,"Modified by AddmusicK.

Inserts 3 NOPs to skip a JSR to a routine that uploads samples to the SPC700."
4109,32875,4,Jump (JML/JSL),"Hijacked by UberASMTool.

JML, jumps to the routine that executes global main code."
4110,32880,4,Jump (JML/JSL),Modified by 16-bit frame counter. Jump to code that increases both $13 and 16-bit frame counters.
4111,32882,3,Jump (JMP/JSR),Modified by the CPU Usage Meter patch. Jumps to the main code of the patch in a free area at $00FF9C.
4112,32885,4,Jump (JML/JSL),"Hijacked by AddmusicK.

JML to the main AMK routine inserted in the $0E8000 area."
4113,32889,209,Code,"Modified by AddmusicK.

Replaces the original SPC data upload routine with a custom one."
4114,33142,6,Jump (JML/JSL),"Hijacked by UberASMTool.

JML : NOP #2, jumps to the routine that executes all possible NMI codes inserted in the tool (global, level, gamemode, overworld). For efficiency, certain parts of the code are only inserted if needed."
4115,33145,49,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #47 : +, skips over original NMI audio code that's already handled in AMK's routines. This is inserted in case neither $008179 == $5C nor $008176 == $5C."
4116,33148,46,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #44 : +, skips over original NMI audio code that's already handled in AMK's routines. This is inserted in case $008176 is $5C (JML), to make it compatible with a LevelNMI (UberASM) hijack."
4117,33149,45,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #43 : +, skips over original NMI audio code that's already handled in AMK's routines. This is inserted in case $008179 is $5C (JML), to make it compatible with PowerTool."
4118,33167,18,Code,"Hijacked by the No Title SFX patch.

A piece of code that mutes every SFX in the title screen."
4119,33194,8,Jump (JML/JSL),Modified by Ice Man's 'HDMA v3.5' patch. Hijacks NMI and calls the main routine. [JSL : BRA : NOP #2]
4120,33194,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it jumps to the code that turns off HDMA during level transitions (including room respawning)."
4121,33237,4,Jump (JML/JSL),"Modified by ""Mode 7 Game Over Screen"" patch. Check for game over game mode and update mode 7 image."
4122,33250,4,Jump (JML/JSL),Modified by Lunar Magic.
4123,33260,4,Jump (JML/JSL),"Hijacked by multiple patches.
Overworld Counters hijacks this to upload the various counters during NMI.
Overworld Border Plus hijacks this to upload the border tiles during NMI."
4124,33268,3,Hex Edit,"Modified by ""Remove Status Bar"" patch. Remove routine call that draws status bar during normal levels."
4125,33289,4,Jump (JML/JSL),"Modified by Lunar Magic.


Part of Lunar Magic's VRAM modification patch."
4126,33341,6,Jump (JML/JSL),"Dynamic Z Main Hijack 1.


Is used for the main features of Dynamic Z since V3.5 (dynamic sprites, graphics change and palette changes).


This hijack points to a call where is called the routine ""LoadScrnImage"" and happend after MarioGFXDMA Routine (the dma routine of mario, yoshi and podoboos)."
4127,33397,3,Jump (JMP/JSR),"Modified by ""Remove Status Bar"" patch. Jump to code that disables IRQ."
4128,33397,4,Jump (JML/JSL),Hijacked by Lui37's 'Move Layer 3 to Subscreen Fix' patch. It changes part of NMI. [JML]
4129,33426,1,Code,Modified by the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the scanline at which the status bar IRQ will fire in normal levels.
4130,33456,6,Jump (JML/JSL),Modified by VWF Level Intros. Modifies brightness ($2100) store at NMI by aligning it to h-blank.
4131,33498,5,Jump (JML/JSL),"Dynamic Z Main Hijack 2.


Is used for the main features of Dynamic Z since V3.5 (dynamic sprites, graphics change and palette changes).


This hijack points to a place is detected if the current escene is the bowser stage or reznor stage and happend after MarioGFXDMA Routine (the dma routine of mario, yoshi and podoboos)."
4132,33512,3,Hex Edit,"Modified by ""Remove Status Bar"" patch. Remove routine call that draws status bar during Mode 7 boss battles."
4133,33628,1,Code,Modified by the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the scanline at which the status bar IRQ will fire in mode 7 boss levels.
4134,33679,2,Code,Modified by Lui37's 'Move Layer 3 to Subscreen Fix' patch. [LDY #$1E]
4135,33684,4,Jump (JML/JSL),Hijacked by Lui37's 'Move Layer 3 to Subscreen Fix' patch. It modifies IRQ. [JML]
4136,33773,2,Code,"(BCC $04)

Modified by Minimalist Course Clear so it always branches, thus layers won't get disabled after you beat a boss."
4137,34258,4,Hex Edit,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

It writes the original data [$A4, $12, $B9, $D0] in case the first byte is $5C (JML). This specifically restores the changes made by the Strip Image Uploader Hack patch by imamelia."
4138,34370,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4139,34522,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F812E with a JSL to the OAM clear routine in freespace."
4140,34641,4,Jump (JML/JSL),"Modified by Lunar Magic.


Lunar Magic's stripe image upload routine. It only gets executed during gamemodes 05, 07, 13 and 14."
4141,35406,5,Code,Modified by Lunar Magic.
4142,35969,964,Hex Edit,"Modified by Remove Status Bar patch by Lui.


Removes status bar functionality, including initialization, drawing, timer, score, coins, lives, stars (partially) and dragon coins, marking it as freespace. This freespace can be used by other patches (including Remove Status Bar itself)."
4143,35969,46,Code,"Modified by ""Remove Status Bar"" patch. Disable IRQ. Written on top of freespace that was freed by another hijack (Non-SA-1, !enable_coins is disabled)."
4144,35969,68,Code,"Modified by ""Remove Status Bar"" patch. Disable IRQ and place coin handling routine. Written on top of freespace that was freed by another hijack (SA-1 ROM, !enable_coins is enabled)."
4145,35969,43,Code,"Modified by ""Remove Status Bar"" patch. Disable IRQ. Written on top of freespace that was freed by another hijack (SA-1 ROM, !enable_coins is disabled)."
4146,35969,71,Code,"Modified by ""Remove Status Bar"" patch. Disable IRQ and place coin handling routine. Written on top of freespace that was freed by another hijack (Non-SA-1, !enable_coins is enabled)."
4147,35977,12,Table,"Modified by the Death Counter Version 1.2 patch by Thomas.


Table values for the ""DEATHS"" text."
4148,36009,20,Hex Edit,"Modified by the SMB3 P-Meter Patch, by Ersanio.


Sets the status bar to draw the P-meter."
4149,36011,6,Table,Modified by Play as Yoshi: Replaces TIME with a clock on the status bar
4150,36041,12,Table,Modified by Play as Yoshi: Changes the status bar tilemap to make space for the powerup display.
4151,36045,4,Data,"Modified by Course Clear Coins, by MarioFanGamer.


Changes the bonus star ""★x"" tiles on the status bar into blank tiles. Conditionally enabled."
4152,36045,2,Hex Edit,"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


Changes the red star icon on the status bar to a yellow coin."
4153,36063,1,Hex Edit,"Hijacked by the SMB3 P-Meter Patch, by Ersanio.


A simple hex edit that places a clock tile before the timer in the status bar."
4154,36234,5,Jump (JML/JSL),Modified by the Super Status Bar patch by GreenHammerBro and Kaijyuu. Jumps to a status bar initialization routine during level load.
4155,36278,2,Code,Modified by the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is an unconditional branch which skips over DrawStatusBar ($008DAC) and calls the main patch code at $008DE2.
4156,36322,5,Jump (JML/JSL),"Modified by the Super Status Bar patch by GreenHammerBro and Kaijyuu. Calls the main patch code and returns from DrawStatusBar ($008DAC). Branched to from $008DB6.


In the vanilla game, this address is not aligned to an instruction and is instead in the middle of an LDA at $008DE1."
4157,36378,5,Jump (JML/JSL),"Modified by the SMB3 P-Meter Patch, by Ersanio.


A JML that jumps to the main routine of creating the P-meter."
4158,36378,5,Jump (JML/JSL),"Modified by Spin Jump to Super Jump, by HuFlungDu.


JSL : NOP, hijacks a portion of the status bar routine to run spinjump-altering code every frame."
4159,36378,5,Jump (JML/JSL),"Hijacked by UberASMTool.

JML : NOP, jumps to the code that executes custom status bar code inserted by the tool."
4160,36383,4,Jump (JML/JSL),Modified by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. Repoints the status bar update routine to freespace.
4161,36385,4,Jump (JML/JSL),"Modified by Time Up Fix, by Alcaro.


JML, prevents the timer frame counter from ticking down if set to a special ""death from time up"" value."
4162,36431,2,Code,"Modified by Time Up Fix, by Alcaro.


BNE $1E, skips past the ""check if timer ran out"" routine if the timer hundreds digit is nonzero."
4163,36443,5,Jump (JML/JSL),Modified by Speed up Music Fix. Jumps to the main code.
4164,36443,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it sets a flag when the music is sped up because the timer dropped under 100 seconds."
4165,36448,15,Jump (JML/JSL),"Modified by Time Up Fix, by Alcaro.


Sets the timer frame counter to a special ""death from time up"" value and calls the death routine if 1) the timer is now zero and 2) the timer was not zero initially. Note that this hijack uses a JSL to custom code that ends with a JML to the death routine; the corresponding RTL utilized is thus that of the death routine, at $00F628."
4166,36459,4,Jump (JML/JSL),"Hijacked by the Time Up Anti-Kill Patch, by Chdata.


JSL, jumps to the code that prevents the time up to kill the player in a certain level."
4167,36459,4,Jump (JML/JSL),"Modified by Time Up Flag patch by DiscoTheBat.


JML, Modifies time up to execute custom code depending on a freeRAM flag."
4168,36469,6,Jump (JML/JSL),"Modified by the Punching System patch, by wiiqwertyuiop.


JSL : NOP #2, hijacks the status bar routine to run the main code every frame."
4169,36501,139,Code,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the routine that sets the status bar addresses to adapt to the new score system."
4170,36516,3,Code,"Modified by the Score+9 patch, by Alcaro.


SBC #$4240, tweaks maximum score calculation to allow detection of ""over 9999990 points"" state."
4171,36528,2,Code,"Modified by the Score+9 patch, by Alcaro.


LDA #$10, tweaks maximum score calculation to allow detection of ""over 9999990 points"" state."
4172,36550,5,Jump (JML/JSL),"Modified by the Score+9 patch, by Alcaro.


JSL : NOP, checks for ""Mario's score greater than 9999990 points"" state and switches the final digit to 9 if so."
4173,36574,5,Jump (JML/JSL),"Hijacked by the Red Coin Counter Patch, by Iceguy and Major Flare.

JSL : NOP, hijacks the status bar so that the red coin count can be properly displayed there."
4174,36596,5,Jump (JML/JSL),"Modified by the Score+9 patch, by Alcaro.


JSL : NOP, checks for ""Luigi's score greater than 9999990 points"" state and switches the final digit to 9 if so."
4175,36655,6,Jump (JML/JSL),"Modified by 100 Coin Prize, by wiiqwertyuiop.


JSL : BRA $06, bypasses the default life-gain at 100 coins to implement custom rewards."
4176,36667,4,Jump (JML/JSL),"Modified by 999 lives, handles the lives' code during the level (status bar included)."
4177,36667,6,Jump (JML/JSL),"Modified by the Death Counter Version 1.2 patch by Thomas.


JSL, jumps to a custom routine that draws the counter tiles to the status bar, then branches forward to a label inserted at $008F5B."
4178,36681,4,Jump (JML/JSL),"Hijacked by the Speed Testing Patch by Pseudonym.

It jumps to the main code of the patch."
4179,36681,6,Jump (JML/JSL),"Hijack for the left aligned life counter.


Modified also by the ""Press R to switch characters"" patch (4 bytes). It jumps to the main patch code."
4180,36681,4,Jump (JML/JSL),"Modified by the Duck Walking patch, by Pseudonym.

Allows moving left or right when ducking."
4181,36681,4,Jump (JML/JSL),Hijacked by Play as Yoshi: Runs the main code every frame.
4182,36693,6,Jump (JML/JSL),"Modified by the Numerical Dragon Counter patch, by Neosz. Writes the number of Dragon Coins collected to the status bar."
4183,36699,6,Jump (JML/JSL),"Modified by Power Jumps, by HuFlungDu/Major Flare.


JSL : NOP #2, hijacks a portion of the status bar routine to run gravity-altering code every frame."
4184,36702,3,Code,"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


Replaces a read of the bonus stars counter with a read of the ""number of levels in which all Yoshi coins were found"" counter in the status bar routine."
4185,36711,12,Code,"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


Disables the bonus stars bonus game and prevents the ""number of levels in which all Yoshi coins were found"" counter from exceeding 99 (decimal).Code"
4186,36720,20,Code,Modified by Nimono's '3 digit coin counter' patch. Gets rid of part of the code that writes coins to the status bar. [BRA : NOP #18]
4187,36723,6,Jump (JML/JSL),Hijack for the left aligned coin counter.
4188,36742,3,Jump (JMP/JSR),"Modified by Course Clear Coins, by MarioFanGamer.


JMP, bypasses the routine that draws the large bonus star numbers on the status bar. Conditionally enabled."
4189,36751,3,Code,"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


Modifies the status bar number drawing routine to draw the number of levels in which all Yoshi coins were found instead of bonus stars."
4190,36824,5,Jump (JML/JSL),"Modified by Fire Power Timer patch. Handles fire power timer.


Modified also by Nimono's '3 digit coin counter' patch (5 bytes). Jumps to the main routine. [JSL : NOP]"
4191,36836,14,Code,"Modified by the Numerical Dragon Counter patch, by Neosz. This hijack clears the ""Draws Yoshi Coins in the status bar"" routine."
4192,36857,1,Opcode,"Used by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. Not modified, but the patch expects an RTS opcode at this location."
4193,36882,51,Code,"Modified by the 8 Digits Score patch by Isikoro.

Replaces the original ""6 digits Hex-Dec"" routine with an ""Add points routine"" (ends in RTL), which adds the 16-bit value in A to the score, and returns with A in 8-bit mode. To add score when using this patch, you can call this routine with a JSL."
4194,36945,128,Hex Edit,"Modified by ""Remove Status Bar"" patch. Removes status bar functionality, including stars and reserve item, marking it as freespace."
4195,36986,1,Data,Modified by $02xx OAM Remapper. This is the table with the OAM index for the item box's sprite.
4196,37013,4,Jump (JML/JSL),"Modified by Item Box GFX Fix, by Kenny3900.


JML, bypasses the default ""draw item box GFX"" routine to utilize expanded properties table."
4197,37038,1,Hex Edit,"Modified by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the X position of the item in the item box. It's set according to the !ITEM_X define in the patch, whose default value is the vanilla X position."
4198,37043,1,Hex Edit,"Modified by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the Y position of the item in the item box. It's set according to the !ITEM_Y define in the patch, whose default value is the vanilla Y position."
4199,37048,1,Hex Edit,"Modified by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the YXPPCCCT property byte of the item in the item box. It's set according to the !ITEM_PRIORITY define in the patch, whose default value is the vanilla property byte."
4200,37068,1,Hex Edit,"Modified by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the size of the item in the item box. It's set according to the !ITEM_SIZE define in the patch, whose default value is the vanilla size."
4201,37072,1,Opcode,"Modified by the Advanced version of the Super Status Bar patch by GreenHammerBro and Kaijyuu. This is the return instruction of the status bar item drawing routine, which is converted to a JSL routine."
4202,37286,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it jumps to an initialization routine."
4203,37398,9,Jump (JML/JSL),"Modified by undefinied3's New Super Mario Bros Wii - Level Intro patch. It calls the main code through JSL, NOP once, then jumps to a conditional check through JML."
4204,37666,4,Jump (JML/JSL),"Hijacked by UberASMTool.

JML, jumps to the routine that executes both ""init"" and ""main"" labels for gamemode specific codes. The init will be executed for the first frame of the gamemode, then the main will be executed for every frame after."
4205,37666,4,Jump (JML/JSL),UberASM tool and patch's Game Mode hijack.
4206,37780,4,Jump (JML/JSL),"Hijacked by the Intro Logo Patch, by Roy.


JML, handles the Nintendo Logo drawing via DMA."
4207,37786,8,Jump (JML/JSL),First hijack of Roy & ghettoyouth's 'Nintendo Presents Logo Expansion' patch (LDY #$3C : LDX #$0F before the JML).
4208,37812,12,Code,Second hijack of Roy & ghettoyouth's 'Nintendo Presents Logo Expansion' patch. Handles an OAM loop before the JML.
4209,37824,5,Code,"Modified by AddmusicK.

Changes the ""Nintendo Presents"" song number, and changes ""STA $1DFC"" to ""STA $1DFB"" (since it's changed from SFX to song)."
4210,37847,9,Jump (JML/JSL),"Modified by Nintendo Presents Custom Palette, by Roy.


JSL : NOP #5, replaces the palette load and background color settings for the ""Nintendo Presents"" object.


Hijacked also by undefinied3's New Super Mario Bros Wii Level Intro. It calls a routine that determines when to upload custom palettes for the level intro preview. Two NOPs are written after the JSL. [JSL : NOP #2]"
4211,37862,4,Jump (JML/JSL),"Modified by ""Mode 7 Game Over Screen"" patch. Upload palette for mode 7 image."
4212,37879,5,Code,Modified by Lunar Magic.
4213,37903,4,Jump (JML/JSL),"Hijacked by the Intro Logo Patch, by Roy.


JML, handles the fade-in and fade-out of the Nintendo logo."
4214,38001,5,Code,Modified by Lunar Magic.
4215,38006,5,Jump (JML/JSL),"Modified by ""Mario + Animated Tile ExGFX"" patch. Load default Mario and Animation graphics for credits."
4216,38048,3,Hex Edit,"Modified by AddmusicK.

BRA + : NOP : +, skips over the JSR to the vanilla routine that uploads the credits music data."
4217,38067,1,Hex Edit,"Modified by AddmusicK.

Changes the song number of the castle destruction cutscene."
4218,38141,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4219,38315,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4220,38326,3,Code,Modified by Lunar Magic.
4221,38377,13,Code,Modified by Lunar Magic.
4222,38450,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4223,38561,7,Code,"Modified by VWF Level Intros. Gets rid of the Yoshi's House check for ""MARIO START!"" since the patch can handle that now."
4224,38561,4,Jump (JML/JSL),Modified by undefinied3's New Super Mario Bros Wii - Level Intro patch. Jumps to a Yoshi's house check to determine if the intro screen should appear or not.
4225,38580,4,Jump (JML/JSL),"Hijacked by the Individual Dragon Coin Save patch by worldpeace, JackTheSpades and LX5.

JML, it jumps to a routine that initializes the ram tables used by the patch."
4226,38590,4,Jump (JML/JSL),Modified by the Overworld Indicators patch. A hijack is placed here to clear the SRAM/BW-RAM entries the patch uses. [JML]
4227,38595,3,Hex Edit,"Modified by AddmusicK.

BRA + : NOP : +, skips over the JSR to the vanilla routine that uploads the overworld music data."
4228,38599,1,Hex Edit,"Modified by AddmusicK.

Changes the title screen song number."
4229,38603,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it jumps to a routine that initializes all the checkpoint flags ram."
4230,38633,6,Jump (JML/JSL),Hijacked by NSMB Star Coins: This one transfers the star coins into a local backup when loading a level (either from overworld or from a different level)
4231,38658,3,Hex Edit,"Modified by AddmusicK.

NOP #3, skips over the JSR to the vanilla routine that uploads the level music data."
4232,38664,4,Jump (JML/JSL),Modified by Lunar Magic. Points to the Horizontal Scroll Fix patch.
4233,38665,3,Miscellaneous,"Not modified, but read by Center Scroll, by HammerBrother and Thomas.

org read3($009709)+$1D, inserts a JSL : NOP #2 into Lunar Magic code in freespace to execute custom scroll code."
4234,38674,4,Jump (JML/JSL),"Modified by undefinied3's New Super Mario Bros Wii - Level Intro patch. Calls a ""time waste"" loop that is used to keep the intro preview on screen for longer."
4235,38674,4,Jump (JML/JSL),Modified by Horizontal Scroll Fix v1.1. Jumps to the main code.
4236,38691,5,Hex Edit,"Modified by AddmusicK.

Changes the intro screen music number, and stores it to $1DFB rather than $0DDA."
4237,38696,24,Code,"Modified by AddmusicK.

Modifies part of the code that sets the current level music by removing the check for bit 6 in $0DDA. It also replaces the original ""Bowser fight"" song number at $009737."
4238,38708,2,Hex Edit,"Modified by AddmusicK.

Changes ""BNE $02"" to ""BNE $05"" to skip over ""STA $1DFB""."
4239,38712,4,Jump (JML/JSL),"Hijacked by the patch included in the Music Playlist uberASM by binavik.

JML, jumps to code that prevents the music from resetting back to the song set in Lunar Magic if the current song is different."
4240,38715,5,Code,"Modified by AddmusicK.

Replaces the original ""AND #$BF"" with NOPs, and then stores to $0DDA."
4241,38736,4,Jump (JML/JSL),"Modified by ""Mode 7 Game Over Screen"" patch. Upload mode 7 image."
4242,38745,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4243,38745,4,Jump (JML/JSL),"Modified by the Skip Game Over/Time Up Sequence with a Button Press patch, by RussianMan.


JML, modifies game mode 17 (Game Over / Time Up) to skip immediately to game mode 0B (Fade to Overworld) on any button press."
4244,38745,4,Jump (JML/JSL),"Modified by ""Mode 7 Game Over Screen"" patch. Check mode 7 image size and display puff of smoke."
4245,38780,3,Opcode,"Modified by ""Mode 7 Game Over Screen"" (SA-1 only). Fixes an oversight in SA-1 Pack which causes garbage to appear on the game over screen with this patch applied."
4246,39002,3,Hex Edit,"Modified by ""Remove Status Bar"" patch. Remove Status bar initialization."
4247,39024,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4248,39048,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4249,39535,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4250,39609,4,Jump (JML/JSL),Hijacked by SMA2 Yoshi blocks: Unlocks all colours of Yoshi for the title screen.
4251,39708,3,Code,Modified by Lunar Magic.
4252,39743,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the sram expansion patch included in retry. If !midway_sram = 1, it jumps to a routine that erases the current save file data. Otherwise, it restores the original code ([D0 2C A0 02])."
4253,39747,4,Jump (JML/JSL),"Modified by the Overworld Indicators patch. This hijacks the ""Erase Game"" routine to also clear the SRAM/BW-RAM addresses the patch uses. [JML]"
4254,39881,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the sram expansion patch included in retry. If !midway_sram = 1, it's a JML which jumps to a routine to save the new data. Otherwise, it writes the original code ([8B 4B AB AE])."
4255,39884,7,Jump (JML/JSL),Modified by the Overworld Indicators patch. Modifies a load of 010A and then hacks the save game routine to synchronize the values from SRAM to their backup. [JSL]Hijack
4256,39890,4,Jump (JML/JSL),Modified by the BW-RAM Plus patch. Jumps to the save handling routine.
4257,40047,17,Code,"Modified by Lunar Magic. 


Handles the custom title screen movement."
4258,40095,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace."
4259,40147,3,Code,Modified by Lunar Magic.
4260,40181,6,Jump (JML/JSL),Modified by the BW-RAM Plus patch. Jumps to the init save files routine.
4261,40187,4,Jump (JML/JSL),"Modified by the Overworld Indicators patch. Modifies the load game routine to restore the SRAM backup. [JML]


NOTE: this hijacks read3($009CF8)+33 instead if using Ragey's Overworld Expansion.Hijack"
4262,40300,4,Jump (JML/JSL),"Hijacked by the Exit Percentage on File Select Patch, by KevinM.

JML, hijacks the exit number loader in order to compute a percentage instead."
4263,40300,8,Code,"Modified by Alcaro's '100 Exits' patch - it changes the amount of exits required for displaying the *96 at the title screen, as well as what tiles form the *96."
4264,40316,4,Code,"Hijacked by the Exit Percentage on File Select Patch, by KevinM.

Code, hijacks the stripe image loader to load a decimal percentage instead of an integer."
4265,40316,4,Code,Modified by Alcaro's '100 Exits' patch - it remaps the position of ones digit of the number of exits gotten in the title screen stripe image.
4266,40325,4,Jump (JML/JSL),"Hijacked by the Exit Percentage on File Select Patch, by KevinM.

JML, hijacks the stripe image loader on the file select screen."
4267,40326,4,Jump (JML/JSL),Main hijack of Alcaro's '100 Exits' patch. [JML]
4268,40342,2,Code,"Hijacked by the Exit Percentage on File Select Patch, by KevinM.

Code, hijacks the stripe image loader to load a decimal percentage instead of an integer."
4269,40342,2,Code,Modified by Alcaro's '100 Exits' patch - it changes the amount of blank tiles to be written to the title screen stripe image.
4270,40347,4,Code,"Hijacked by the Exit Percentage on File Select Patch, by KevinM.

Code, hijacks the stripe image loader on the file select screen."
4271,40347,4,Code,Modified by Alcaro's '100 Exits' patch - it remaps the position of a blank tile used in the title screen stripe image.
4272,40467,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the sram expansion patch included in retry. If SRAM plus is not installed in the rom, it jumps to the code that loads the custom data from sram. Otherwise, it restores the original code ([22 AD DA 84])."
4273,40471,5,Hex Edit,"Hijacked by AddmusicK.

BRA + : NOP #3 : +, skips the code that makes the music fade out after a game over."
4274,40485,1,Hex Edit,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

It writes the initial lives count as set by the user."
4275,40485,1,Hex Edit,"Modified by ""Start with ..."" by DiscoTheBat.


Set initial amount of lives."
4276,40498,6,Jump (JML/JSL),"Modified by ""Start with ..."" by DiscoTheBat.


Initialize lives, power-ups, items for the item box and yoshi for both players (part 1)."
4277,40501,5,Jump (JML/JSL),Modified by Yoshi Player Patch: This one initialises values on the overworld (Yoshi's power up and the sprite in Yoshi's mouth).
4278,40514,6,Jump (JML/JSL),"Modified by ""Start with ..."" by DiscoTheBat.


Initialize lives, power-ups, items for the item box and yoshi for both players (part 2)."
4279,40534,4,Jump (JML/JSL),Hijacked by SMA2 Yoshi blocks: Green Yoshis are already unlocked on new files.
4280,40543,2,Opcode,"Modified by ""Start with ..."" by DiscoTheBat.


Don't reset initial player."
4281,40729,4,Jump (JML/JSL),Modified by Lunar Magic.
4282,40729,4,Jump (JML/JSL),"Modified by Lunar Magic.

JSL, it jumps to the routine at $05DD80."
4283,40991,6,Code,"Modified by Lunar Magic.


Jumps to a routine that handles Layer 3 movement."
4284,41029,5,Code,"Modified by Lunar Magic, for a jump to code that handles changing the acts-like setting of the Layer 3 tide.


Also modified by the Per-level Layer 3 Tides Act-like Settings patch for a jump to its main routine."
4285,41120,3,Code,Modified by Lunar Magic.
4286,41139,3,Hex Edit,"Modified by AddmusicK.

BRA + : NOP : +, skips over the JSR to the vanilla routine that uploads the overworld music data."
4287,41151,4,Jump (JML/JSL),Modified by the Free $7F0000 patch. Main hijack of the patch; forces event restore when beating a level in game mode 0C. [JML]
4288,41151,4,Jump (JML/JSL),"Modified by ""Mario + Animated Tile ExGFX"" patch. Load default Mario and Animation graphics for overworld."
4289,41162,39,Code,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the counterbreak code included in retry. It resets various counters if the respective define is set (!counterbreak_powerup, !counterbreak_coin, !counterbreak_yoshi), otherwise it restores the original code."
4290,41176,8,Code,"Modified by Leave Yoshi in Level by JackTheSpades and Katrina.


Remove yoshi when going to the overworld."
4291,41217,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the sram expansion patch included in retry. If SRAM plus is not installed in the rom, it jumps to the routine that loads the custom data from sram. Otherwise, it restores the original code ([22 AD DA 84])."
4292,41280,4,Jump (JML/JSL),Modified by Lunar Magic.
4293,41289,4,Code,Modified by Lunar Magic.
4294,41299,4,Jump (JML/JSL),Modified by Lunar Magic.
4295,41321,4,Jump (JML/JSL),Modified by the Reserve Item OW Display patch. Jumps to the main code.
4296,41321,4,Code,"Modified by 32x32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


LDA #$F0 : STA $3F, replicates original code in order to ensure expected setting of OAM address mirror."
4297,41359,6,Jump (JML/JSL),"Hijacked by UberASMTool.

JML : NOP #2, jumps to the routine that executes the ""init"" label for overworld specific codes."
4298,41411,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace. This hijack is only applied when !UberASMTool = 0."
4299,41411,4,Jump (JML/JSL),"Hijacked by UberASMTool.

JML, jumps to the routine that executes the ""main"" label for overworld specific codes."
4300,41415,4,Jump (JML/JSL),Hijacked by NSMB Star Coins: This one loads the current translevel number and stores the current level's star coins into the star coin counter.
4301,41434,10,Code,Modified by Lunar Magic.
4302,41434,10,Jump (JML/JSL),"Modified by the Message Box Expansion patch. Checks the message box state and sets a branch, followed by a jump to the main code."
4303,41439,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JSL, modifies the start of gamemode 14's code to execute the retry prompt code when $1426 has particular values (if not, the original message box routine is executed instead)."
4304,41499,4,Jump (JML/JSL),Modified by Running SFX patch. Jumps to the main code.
4305,41503,4,Jump (JML/JSL),Modified by Disable Throwing Items Upwards patch. Disable Up when carrying an item.
4306,41521,2,Hex Edit,"Modified by AddmusicK.

Changes the ""Unpause"" sfx number to $08 (in bank $1DFA)."
4307,41533,5,Code,"Modified by AddmusicK.

Changes the ""Pause"" sfx number to $07 (in bank $1DFA), and changes the STY $1DF9 to STY $1DFA."
4308,41538,5,Jump (JML/JSL),"Hijacked by UberASMTool.

JML : NOP, jumps to the routine that executes the ""main"" label for level specific codes."
4309,41569,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it makes so exiting with start+select is always possible when using the ""fast retry"" setting."
4310,41572,4,Jump (JML/JSL),"Modified by the Start + Select Advanced patch, by MarioFanGamer.


JML, modifies the ""Select pressed while paused"" routine to add in per-level checks and custom behaviors."
4311,41575,1,Opcode,Modified by Lunar Magic.
4312,41577,11,Jump (JML/JSL),Hijacked by NSMB Star Coins: This one saves all collected coins through Start+Select.
4313,41604,5,Jump (JML/JSL),"Modified by the Lower Volume When Pausing patch, by KevinM.


JML : NOP, modifies the Start + Select routine to return the game volume to it's proper value when leaving a level."
4314,41604,4,Jump (JML/JSL),"Modified by Start+Select SFX, jumps to main code (plays SFX, changes game mode and returns)."
4315,41604,5,Jump (JML/JSL),"Modified by the Better Music Pause patch by KevinM.


JML : NOP, modifies the Start + Select routine to return the game volume to its proper value when leaving a level."
4316,41610,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it requests the correct retry type if Mario is currently in the death animation."
4317,41614,1,Hex Edit,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

It changes the offset the BPL (at $00A28D) jumps to, depending on other patches installed in the rom that use nmi (specifically, the Mario DMA patches)."
4318,41621,4,Jump (JML/JSL),"Hijacked by the Free up RAM $7F:8000 patch by DiscoTheBat and Ersanio.

Replaces JSL $7F8000 with a JSL to the OAM clear routine in freespace. This hijack is only applied if !UberASMTool = 0."
4319,41621,4,Hex Edit,"Modified by UberASMTool.

Inserts 4 NOPs to remove ""JSL $7F8000"", since that routine is already called earlier in the main level code."
4320,41625,4,Jump (JML/JSL),Hijacked by No running patch. Adds speed limit.
4321,41633,4,Jump (JML/JSL),"Modified by the Wall Kick patch, by MarioE.


JSL, jumps to the main patch code."
4322,41637,4,Jump (JML/JSL),"The patch known as ""Allow mario to pass his gas"" made by SMWCentral user shao, has it's main and only hijack spot here. This hijack installs the function that the patch realizes, which is allow the player, whoever it might be, to realize the process of expelling a flatulence. [JSL]"
4323,41637,4,Jump (JML/JSL),"Modified by Lunar Magic.

Replaces the original JSL to $05BB39 to a JSL to code in freespace to handle LM's ExAnimations (along with the original game animations). You can JSL to that routine in cases where animations don't usually run to have them run like normal (for example, during the file select gamemode). To do so, use ""JSL read3($00A2A6)"" (if the animations still don't run, add a ""INC $14"" before the JSL)."
4324,41647,38,Code,"Modified by Lunar Magic ($00A2AF-$00A2D4 modified, on version 3.00 when adjusting the level dimensions via “Change Properties in Header”).


This is originally the code that displaces layer 1 during a shaking effect when $1887 is a nonzero value. It is modified for how layer 1 tiles are loaded.Modified code"
4325,41685,3,Jump (JMP/JSR),"Modified by ""Remove Status Bar"" patch. Enables coin functionality (!enable_coins is enabled)."
4326,41685,3,Hex Edit,"Modified by ""Remove Status Bar"" patch. Disable call for coin functionality (!enable_coins is disabled)."
4327,41688,4,Jump (JML/JSL),"Modified by Yoshi Player Patch: This one handles all of Yoshi's abilities (e.g. throwing eggs, flutter, ground pound)."
4328,41688,4,Jump (JML/JSL),"Modified by the (Specter of Torment-Styled) Wallclimb and Walljump patch, by Erik/Maarfy.


JSL, overwrites the player graphics drawing routine to run the main code every frame. Note that the code ends with a JML to said routine ($00E2BD), and the latter's RTL is ultimately used to return."
4329,41698,4,Jump (JML/JSL),"Modified by the patch included in the Carryable Pipe sprite by WhiteYoshiEgg.

It makes so when !FreezeTimeWhenTeleporting is set to 1, all sprites properly freeze while teleporting using the pipe."
4330,41698,4,Jump (JML/JSL),"Modified by the patch included in the Portable Orb of Teleportation sprite by algae and WhiteYoshiEgg.

It makes so when !FreezeTimeWhenTeleporting is set to 1, all sprites properly freeze while teleporting using the orb.

(Note: this sprite is based on the Carryable Pipe, and they use the same hijacked code, so they can be used together)."
4331,41710,5,Jump (JML/JSL),"Modified by SMA2 Slide Kill Chain patch by HammerBrother.


Reset consecutive kill counter if player stops sliding."
4332,41728,5,Jump (JML/JSL),"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


JML : RTS, modifies the player graphics DMA routine."
4333,41728,2,Code,"Dynamic Z hijack used for features related to Mario graphics change or palette change, Since V3.5.


On the original game is used for the dma routine for mario, yoshi and podoboos, but when you use Dynamic Z V3.5 or more with mario features activated, this is only a RTS (basically do nothing)."
4334,41728,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it hijacks the MarioGFXDMA routine to transfer the retry prompt's letters through DMA when requested (only if no custom Mario DMA patches are used, otherwise the hijack is placed at $00A304+read1($00A28E))."
4335,41728,4,Jump (JML/JSL),"Mario's 8x8 Tiles DMA-er hijack.


Uploads Mario's palette, Mario, Yoshi and Podoboo graphics. Basically a rewrite of the original $00A300 plus the upload of the 8x8 tiles to VRAM."
4336,41754,4,Jump (JML/JSL),Modified by Custom Mario Palettes. Jumps to a routine that makes the bank used in a DMA transfer to depend on a FreeRAM.
4337,41785,4,Jump (JML/JSL),"Hijacked by the Alternate Mario ExGFX patch, by Alcaro, MarioFanGamer, and Thomas.


JML, jumps to code that handles swapping out the bank byte of the ExGFX depending on the value of a freeRAM address. It's stored to scratch RAM, which is later used to write the bank byte of the DMA source address."
4338,41813,4,Jump (JML/JSL),"Hijacked by the Alternate Mario ExGFX patch, by Alcaro, MarioFanGamer, and Thomas.


JML, jumps to code that handles DMA'ing the top half of Mario's tiles."
4339,41845,4,Jump (JML/JSL),"Hijacked by the Alternate Mario ExGFX patch, by Alcaro, MarioFanGamer, and Thomas.


JML, jumps to code that handles DMA'ing the bottom half of Mario's tiles."
4340,41872,5,Code,Modified by Lunar Magic.
4341,42008,4,Jump (JML/JSL),Modified by Lunar Magic. Obsolete in LM 1.70+
4342,42041,1,Opcode,Modified by Lunar Magic.
4343,42193,3,Jump (JMP/JSR),Hijacked by the Fixed Color Data NMI Optimizer patch to change the destination of the routine to store the background color in $2132.
4344,42211,5,Code,Modified by Lunar Magic.
4345,42219,2,Code,Modified by Lunar Magic.
4346,42402,4,Jump (JML/JSL),Modified by Lunar Magic.
4347,42408,3,Hex Edit,"Modified by ""Remove Status Bar"" patch. Remove routine call that initializes status bar."
4348,42411,4,Jump (JML/JSL),"Modified by various patches such as Yoshi Player Patch and sprite status bar patches, to initialize their respective RAM adresses (i.e. counter positions, carried sprites, eggs, etc.)."
4349,42431,4,Jump (JML/JSL),"Modified by Lunar Magic.


Loads the custom palette of a level depending on the value of $FE. That RAM address is immediately cleared after that, possibly to avoid a custom palette from being uploaded twice."
4350,42453,3,Jump (JMP/JSR),"Modified by ""Remove Status Bar"" patch. Enables coin functionality (!enable_coins is enabled)."
4351,42453,3,Hex Edit,"Modified by ""Remove Status Bar"" patch. Removes call coin funtionality (!enable_coins is disabled)."
4352,42453,5,Jump (JML/JSL),"Modified by ""Mario + Animated Tile ExGFX"" patch. Load  Mario and Animation graphics on per-level basis."
4353,42465,6,Code,Modified by Lunar Magic.
4354,42478,4,Jump (JML/JSL),"Hijacked by UberASMTool.

JML, jumps to the routine that executes the ""init"" label for level specific codes."
4355,42494,3,Code,Modified by Lunar Magic.
4356,42549,31,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #29 : +, skips over code that manipulates $0DDA."
4357,42565,15,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #13 +, skips over code that manipulates $0DDA."
4358,42589,3,Code,"Hijacked by the Power Surge Patch, by Glyph Phoenix.


NOP #3, disables the zero-ing of the Star Counter on level load."
4359,42627,3,Hex Edit,"Modified by the Goal Type-Dependent Behavior (No Goal Sphere Walk) patch, by Koopster.


Changes an ASL to a STZ, so that $13CB is always cleared when a level is loaded."
4360,42630,7,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the code that prepares cluster sprites. After it there's a pointer to custom cluster sprite data."
4361,42680,4,Jump (JML/JSL),Modified by Lunar Magic.
4362,42700,4,Jump (JML/JSL),Modified by Lunar Magic.
4363,42700,4,Jump (JML/JSL),"Modified by Lunar Magic.

JSL, it jumps to the routine at $05DD00."
4364,42733,8,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #6 +, skips over code that manipulates $0DDA."
4365,42937,8,Jump (JML/JSL),"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

JSL : NOP #4, jumps to the code that sets initial scroll line positions."
4366,43123,4,Code,Modified by Lunar Magic.
4367,43526,2,Code,Modified by Lunar Magic.
4368,43591,2,Code,Modified by Lunar Magic.
4369,43600,5,Code,Modified by Lunar Magic.
4370,43627,4,Jump (JML/JSL),Modified by Lunar Magic.
4371,43636,2,Code,Modified by Lunar Magic.
4372,43661,1,Code,Modified by Lunar Magic.
4373,43665,1,Code,Modified by Lunar Magic.
4374,43725,21,Code,Modified by Lunar Magic.
4375,43778,64,Code,Modified by Lunar Magic.
4376,44331,2,Code,Modified by Lunar Magic.
4377,44338,5,Code,Modified by Lunar Magic.
4378,44609,26,Code,"The Fixed Color Data NMI Optimizer patch entirely rewrites this routine, which stores the background color to $2132."
4379,44845,63,Code,"Modified by Minimalist Course Clear.


From 00AF2D to 00AF34, if !enable_scorecard is clear, then it will skip SMW's card tilemap drawing code. Else SMW's code is written. The rest of code is SMW's code ending early so it gives freespace for fixing a bug related to Reznors and hijack the ""after peace pose"" routine."
4380,44876,1,Code,Modified by Lunar Magic.
4381,44879,1,Code,Modified by Lunar Magic.
4382,44908,1,Code,Modified by Lunar Magic.
4383,44913,6,Code,Modified by Lunar Magic.
4384,45128,4,Jump (JML/JSL),Modified by Custom Mario Palettes. Saves the Free RAM used into a scratch RAM.
4385,47243,2,Code,Modified by Lunar Magic.
4386,47248,1,Code,Modified by Lunar Magic.
4387,47251,22,Code,Modified by Lunar Magic.
4388,47320,2,Code,Modified by Lunar Magic.
4389,47326,5,Code,Modified by Lunar Magic.
4390,47331,5,Code,Modified by Lunar Magic.
4391,48552,256,Table,"Modified by Lunar Magic. Level mode indexing tables for Layer 1 low byte, Layer 2 low byte, Layer 1 high byte and Layer 2 high byte, each entry 2 bytes big, total 32 entries per item.


Not all of the table is modified, but all of the horizontal level ones are remapped to the RAM addresses, to make it possible to dynamically modify the table depending on the level height. See implementation for full details.Implementation"
4392,48872,4,Jump (JML/JSL),Hijacked by Lunar Magic. Adds a bypass for always checking Y against #$0200 instead of $13D7-8 for vertical levels.
4393,48876,3,Opcode,"Modified by Lunar Magic. Changes CPY #$0200 to CPY $13D7, where $13D7-8 is the current level height in pixels."
4394,48949,2,Opcode,"Modified by Lunar Magic. Changes ""BEQ CODE_00BF41"" to ""BEQ CODE_00BF3F"""
4395,48956,13,Code,Modified by Lunar Magic. Adjusts the VRAM offset calculation for working with dynamic levels as well.Implementation
4396,49025,26,Code,Modified by Lunar Magic. This section is rewritten so the stripe image uploader always checks both tilemap directions instead of only the x-axis for horizontal levels.Implementation
4397,49240,5,Code,Modified by Lunar Magic.
4398,49275,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
4399,49303,1,Code,Modified by Lunar Magic.
4400,49352,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
4401,49383,1,Code,Modified by Lunar Magic.
4402,49430,2,Opcode,"Modified by Lunar Magic. Changes ""BEQ CODE_00C13E"" to ""BEQ CODE_00C127"", for checking both tilemap directions instead of just horizontal when deciding or not to upload a tile to VRAM after changing a map16 tile on horizontal levels."
4403,49442,2,Opcode,"Modified by Lunar Magic. Changes ""BCS CODE_00C13E"" to ""BCS CODE_00C127"", for checking both tilemap directions instead of just horizontal when deciding or not to upload a tile to VRAM after changing a map16 tile on horizontal levels."
4404,49530,5,Code,Modified by Lunar Magic.
4405,49587,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
4406,49756,5,Code,Modified by Lunar Magic.
4407,50133,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
4408,50307,1,Hex Edit,"Modified by the Goal Type-Dependent Behavior (No Goal Sphere Walk) patch, by Koopster.


Changes a BPL to a BRA so that $13CB's star power code never runs."
4409,50350,4,Jump (JML/JSL),Hijacked by NSMB Star Coins: This one saves all collected coins through beating a level with a key hole.
4410,50424,5,Jump (JML/JSL),Modified by $13FB Game Crash Fix. Jumps to the main code.
4411,50470,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Bonus game end"" song number."
4412,50494,5,Code,"Modified by AddmusicK.

Changes ""LDA $0DDA"" to ""LDA !MusicBackup"" (although !MusicBackup = $0DDA so it's kind of pointless) and replaces ""BMI $0C"" with two NOPs."
4413,50540,4,Jump (JML/JSL),"Hijacked by the Item Box Hack Patch, by andrew789. 

JML, hijacks the item box routine so the button that makes the reserve item drop is dependent on the level the player is in."
4414,50585,2,16-bit Pointer,"Modified by the (Specter of Torment-Styled) Wallclimb and Walljump patch, by Erik/Maarfy.


dw $CC86, repoints the start of animation state $00 ($71 = #$00) to part of a debug routine in order to copy the contents of RAM address $77 before it is updated.


The UberASM version of this patch includes a helper patch that applies this exact code."
4415,50638,8,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

JSL : NOP #4, it fixes HDMA issues that happen when setting $7E0071 to #$0B while outside of Bowser's fight (since the pipes use it to freeze the player and disable interactions)."
4416,51489,5,Code,"Modified by the Goal Type-Dependent Behavior (No Goal Sphere Walk) patch, by Koopster.


Replaces the vertical level check with a ""$13CB non-zero"" check, so that when $13CB is set, the Goal Point Question Sphere will always have vertical level behavior (like Sunken Ghost Ship), even in horizontal levels.


This also fixes the bug where a standard goal tape will behave like a Goal Point Question Sphere in vertical levels."
4417,51524,6,Code,"Modified by Minimalist Course Clear.


Handles showing (or not) the card tilemap drawing and freezing sprites, all after beating a boss."
4418,51575,1,Opcode,"Modified by Lunar Magic.


Lunar Magic 2.53+ changes this to 0x38 in non-SA-1 ROMs to fix the timing on the victory animation during the goal walk so it matches up with the original goal music."
4419,51639,5,Jump (JMP/JSR),Modified by Minimalist Course Clear. This jump handles the circle effect after the peace sign pose.
4420,51639,5,Jump (JML/JSL),"Modified by Leave Yoshi in Level by JackTheSpades and Katrina.


Initialize zoom in after yoshi is ditched."
4421,51645,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Iris out"" song number."
4422,51650,3,Opcode,"Modified by Minimalist Course Clear.


If !enable_circle is set, it calls the ""Level Ending Circle"" routine. Else it just decrements the timer after going to the overworld."
4423,51650,10,Jump (JML/JSL),"Modified by Leave Yoshi in Level by JackTheSpades and Katrina.


Handles yoshi ditching when ending the level."
4424,51671,1,Opcode,Modified by Lunar Magic.
4425,51679,2,Opcode,"Modified by Minimalist Course Clear to make the screen after beating a level fade out, THEN load overworld."
4426,51704,6,Code,Modified by Minimalist Course Clear. Skips handling the mosaic/brightness settings when beating a level.
4427,51724,1,Code,Modified by Lunar Magic.
4428,51731,1,Code,Modified by Lunar Magic.
4429,51755,4,Jump (JML/JSL),"Hijacked by the Midway Point Timer Reset patch by WhiteYoshiEgg.

JML, it jumps to a routine to reset the timer when the midway is touched."
4430,51755,5,Jump (JML/JSL),"Hijacked by the Individual Dragon Coin Save patch by worldpeace, JackTheSpades and LX5.

JSL : NOP, it jumps to a routine that copies the collected Dragon Coins buffer to the tables, when !Midpoint = 1. If !Midpoint = 0, the original code (LDA #$01 : STA $13CE) is written instead, to restore it in case of patching it after changing !Midpoint from 1 to 0."
4431,52358,19,Code,"Modified by the (Specter of Torment-Styled) Wallclimb and Walljump patch, by Erik/Maarfy.


Part of the free-roaming debug routine. Overwritten in order to copy the contents of RAM address $77 before it is updated. See details for code. Note that 19 bytes is the maximum size - !RAM_77BU is 16-bit by default, and size becomes 17 bytes if changed to 8-bit (long addresses not supported).


The UberASM version of this patch includes a helper patch that applies this exact code.Code"
4432,52419,3,Jump (JMP/JSR),"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

JSR, jumps to $00CDDD. Re-enables L/R Scrolling when the option is enabled."
4433,52419,3,Code,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

NOP #3, disables L/R Scrolling when the option is enabled."
4434,52426,6,Jump (JML/JSL),"Hijacked by the ControllerHamper patch included in the SMB3 Goomba Family, by Sonikku.


JML : NOP #2, jumps to code that disables A,B,X,Y,L and R if a FreeRAM flag is non-zero."
4435,52726,4,Code,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

Snippet of code that re-enables L/R Scrolling when the option is enabled."
4436,52726,4,Jump (JML/JSL),"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

JML, jumps to $00CE78. Disables L/R Scrolling when the option is enabled."
4437,53053,2,Opcode,Modified by Yoshi Player Patch: Spin jumps don't change Yoshi's direction.
4438,53059,2,Hex Edit,"Modified by the Replace Cape with Double Jump patch. It skips the cape interaction while spinning, if the appropriate defines are set in the code."
4439,53064,6,Jump (JML/JSL),"Hijacked by the Big Mario -> Small Mario GFX patch, by K3fka.


JML, jumps to code that decrements the X register when Mario's powerup status is 1 (big Mario), that serves as an index for Mario's spinjumping GFX. 2 leftover bytes are NOP'd out."
4440,53090,4,Jump (JML/JSL),"Hijacked by the Expanded Carrying v0.15 patch, by Sonikku.


JML, jumps to code that handles Mario's animation frames while crouching."
4441,53135,4,Jump (JML/JSL),"Hijacked by the Expanded Carrying v0.15 patch, by Sonikku.


JML, jumps to code that handles Mario's animation frames while turning around."
4442,53158,4,Jump (JML/JSL),"Hijacked by the Expanded Carrying v0.15 patch, by Sonikku.


JML, jumps to code that handles Mario's animation frames while jumping with an item."
4443,53197,5,Jump (JML/JSL),"Modified by Disable Looking Up Via RAM Flag, by GreenHammerBro.


JSL : NOP, jumps to code to check a custom RAM flag to variably disable the player's ability to look up."
4444,53258,4,Jump (JML/JSL),"Hijacked by the Expanded Carrying v0.15 patch, by Sonikku.


JML, jumps to code that handles Mario's animation frames while walking."
4445,53336,4,Jump (JML/JSL),Modified by Reverse Gravity. Fixes cape interaction when in reversed gravity mode.
4446,53346,4,Jump (JML/JSL),Hijacked by the SMB2 Holding patch: This one disables shooting fireballs and spinning the cape when carrying a sprite.
4447,53346,4,Jump (JML/JSL),Modified by the Replace Cape with Double Jump patch. It jumps to the main code of the patch.
4448,53348,4,Jump (JML/JSL),"Hijacked by the Charged Fireball patch by Ladida and SuperMariaSis.

It makes so the charged fireball timer is reset when getting the cape powerup."
4449,53356,5,Jump (JML/JSL),"Modified by No shooting fireballs/cape spin when carrying something, by GreenHammerBro.


JSL : NOP, modifies the cape spin routine to deny cape-spinning with either X or Y when carrying an item."
4450,53366,5,Jump (JML/JSL),"Modified by the No Capespin In Water patch, by Ersanio.

Disables capespinning when in water."
4451,53381,4,Jump (JML/JSL),"Hijacked by the Charged Fireball patch by Ladida and SuperMariaSis.

It jumps to the main code of the patch."
4452,53381,5,Jump (JML/JSL),"Modified by No shooting fireballs/cape spin when carrying something, by GreenHammerBro.


JSL : NOP, modifies the fire spit routine to deny spitting fireballs with either X or Y when carrying an item."
4453,53388,4,Jump (JML/JSL),Modified by Yoshi Fireball Ability Patch. It jumps to the main function of the patch.
4454,53430,7,Code,Modified by Yoshi Player Patch: This one changes the death animation.New Death Animation
4455,53464,3,Hex Edit,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

It NOPs out the code that decrements the player's lives, if !lose_lives = 1. Otherwise, it restores the original code (DEC $0DBE)."
4456,53470,1,Hex Edit,"Modified by AddmusicK.

Changes the game over song number."
4457,53478,4,Jump (JML/JSL),"Hijacked by the Time-Up + SFX Patch.

JML, jumps to the main code."
4458,53478,5,Jump (JML/JSL),"Modified by Time Up Fix, by Alcaro.


JSL : NOP, hijacks the end of the non-game-over death sequence to bypass the ""TIME UP"" message unless the timer frame counter is set to a special ""death from time up"" value."
4459,53511,1,Opcode,"Modified by Yoshi Player Patch: The death animation ends with a RTL, not a RTS."
4460,53532,1,Opcode,"Modified by Yoshi Player Patch: The death animation ends with a RTL, not a RTS."
4461,53620,2,Hex Edit,"Modified by the Replace Cape with Double Jump patch. It prevents $1407 to be used as part of a branch condition, since its purpose has been changed by the patch."
4462,53625,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It prevents $1407 to be reset when touching a Fire Flower.
4463,53838,4,Jump (JML/JSL),"Hijacked by the Horizontal Pipe Exiting Sound Fix Patch, by RussianMan.


JSL, A jump to a routine that handles Mario's exiting from a horizontal pipe, adding the sound it missed in the original code."
4464,53938,4,Jump (JML/JSL),Modified by Lunar Magic.
4465,54770,4,Jump (JML/JSL),Modified by Super Mario Land 2-Styled Spinjump. Jumps to SML2 spin jump code.
4466,54784,4,Jump (JML/JSL),"Modified by Disable Ducking, by Iceguy/Meirdent.


JSL, modifies the normal check for holding Down to duck to either factor in powerup status, or always disregard the ducking input."
4467,54832,4,Jump (JML/JSL),Hijacked by Super Mario 64 Long & U-Jump patch. Adds Long and U-Jump abilities.
4468,54846,1,Opcode,Modified by Super Mario Land 2-Styled Spinjump. Prevents spin jumping.
4469,54853,1,Hex Edit,Modified by Yoshi Player Patch: This edit prevents you to perform a spin jump.
4470,54857,5,Jump (JML/JSL),"Modified by the Separate Jump SFX patch, by Lui.


JSL : NOP, changes the SFX of a regular spin jump to a custom sound that varies with current powerup if set to do so. Reverts the hijack to the original values otherwise."
4471,54878,5,Jump (JML/JSL),"Modified by the Separate Jump SFX patch, by Lui.


JSL : NOP, changes the SFX of a regular jump to a custom sound that varies with current powerup if set to do so. Reverts the hijack to the original values otherwise."
4472,54878,5,Code,"Hijacked by AddmusicK.

Changes the jump SFX number, and remaps it to either $1DFC or $1DF9.

If !JumpSFXOn1DFC == !true, it writes ""LDA #$35 : STA $1DFC"", otherwise it writes ""LDA #$2B : STA $1DF9""."
4473,54883,5,Jump (JML/JSL),Modified by GreenHammerBro's 'Player X Speed Fix' patch. It hijacks the jump speed table depending on the player's X speed. [JML : NOP]
4474,54883,5,Jump (JML/JSL),Modified by Expensive Jump. Jumps to the main code.
4475,54969,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables part of the cape's gliding physics.
4476,55046,5,Jump (JML/JSL),Modified by Turning SFX. Plays sound effect when turning.
4477,55064,1,Code,Modified by Yoshi Player Patch: Yoshi is always running.
4478,55106,4,Jump (JML/JSL),"Hijacked by the Remove Speed Oscillation Patch, by tjb0607. 

JML, hijacks the acceleration routine to clamp speed so it doesn't oscillate."
4479,55106,4,Jump (JML/JSL),Modified by GreenHammerBro's 'Player X Speed Fix' patch. Jumps to the main acceleration fix routine. [JML]
4480,55271,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables part of the cape's gliding physics.
4481,55302,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables the cape's flying physics.
4482,55364,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables part of the cape's gliding physics.
4483,55393,3,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables part of the cape's gliding physics.
4484,55405,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables part of the cape's gliding physics.
4485,55428,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables part of the cape's gliding physics.
4486,55522,3,Hex Edit,"Modified by the Replace Cape with Double Jump patch. It allows for the ""continuous Yoshi flight"" feature, depending on a define set in the patch code."
4487,55531,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It disables cape flight.
4488,55556,4,Jump (JML/JSL),"Modified by the Limited Yoshi Flying patch, by SkywinDragoon.


JML, hijacks a portion of the player gravity routine to disable Yoshi flight after a custom counter has reached a certain limit."
4489,55560,5,Jump (JML/JSL),Hijacked by the Cape float sound routine. It jumps to the routine's main code.
4490,55693,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It prevents $1407 to be reset when Mario is in water.
4491,55789,2,Code,Modified by Yoshi Player Patch: This one disables swimming by pressing A (pressing A allows you to throw an egg).
4492,55859,4,Jump (JML/JSL),"Modified by Disable Ducking, by Iceguy/Meirdent.


JSL, modifies the underwater check for holding Down to duck to either factor in powerup status, or always disregard the ducking input."
4493,55916,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It makes the pipes compatible with Layer 3 tides."
4494,55977,5,Jump (JML/JSL),"Modified by Spike Swim Fix, by yoshifanatic. Jumps to the hurt-fix routine when big Mario swims down to a muncher/spike."
4495,56229,5,Jump (JML/JSL),"Modified by the Separate Jump SFX patch, by Lui.


JSL : NOP, changes the ""jump off vine/net"" SFX from the normal jump sound to a custom sound that varies with current powerup if set to do so. Reverts the hijack to the original values otherwise."
4496,56229,5,Code,"Hijacked by AddmusicK.

Changes the jump SFX number, and remaps it to either $1DFC or $1DF9.

If !JumpSFXOn1DFC == !true, it writes ""LDA #$35 : STA $1DFC"", otherwise it writes ""LDA #$2B : STA $1DF9""."
4497,56266,6,Jump (JML/JSL),"Modified by the No 1-UPS While Climbing patch, by wiiqwertyuiop.

Resets the consecutive kill counter when climbing."
4498,56389,5,Jump (JML/JSL),Modified by Reverse Gravity. Inverts the player's Y speed.
4499,56556,554,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file hexedits.asm.


Replaces player sprite tile positioning tables to accommodate the expanded tilemap."
4500,57111,1,Hex Edit,"Modified by the Big Mario -> Small Mario GFX patch, by K3fka.


Changes big Mario's tileset to be that of small Mario."
4501,57114,182,Table,Modified by Yoshi Player Patch: Fixes the tile expansion table (8x8 tile index) for Yoshi's graphics.
4502,57306,4,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file hexedits.asm.


Replaces part of the player graphics tilemap table to accommodate the expanded tilemap."
4503,57356,384,Table,Modified by Yoshi Player Patch: Fixes the tilemap table for Yoshi's graphics.
4504,57742,70,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file hexedits.asm.


Replaces tile properties index table to accommodate the expanded tilemap."
4505,58083,4,Jump (JML/JSL),"Hijacked by the Star Time Low SFX patch by StackDino.

JSL, jumps to the code that plays the ""P-Switch running out"" SFX when the star timer reaches the value $1E (30)."
4506,58094,9,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #7 +, skips over code that manipulates $0DDA."
4507,58115,5,Code,"Hijacked by the Power Surge Patch, by Glyph Phoenix.


NOP #5, disables music changing with P-Switch/directional coins."
4508,58116,1,Hex Edit,"Modified by AddmusicK.

Changes the P-Switch song number."
4509,58139,4,Jump (JML/JSL),"Modified by Custom Mario Palettes, handles the patch's main functions."
4510,58182,6,Jump (JML/JSL),Modified by Reverse Gravity. Seems to fix an interaction bug.
4511,58224,2,Code,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


BEQ $19, modifies a branch to skip over code that adjusts player sprite tile size when displaying the big Mario P-balloon pose."
4512,58241,2,Code,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


BNE $08, modifies a branch to skip over code that adjusts player sprite tile size when displaying the big Mario P-balloon pose."
4513,58245,8,Code,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


NOP #6 : LDA #$F8, preps the player sprite drawing routine to always draw four 16x16 tiles."
4514,58288,16,Code,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


See details for code. Modifies the player sprite drawing routine setup to read from the expanded tilemap.Code"
4515,58317,5,Jump (JML/JSL),Modified by Invincible Mario Palette Changer. Jumps to the main code.
4516,58340,2,Code,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


BRA $06, modifies the player sprite OAM configuration routine to bypass flipping one of the player's 16x16 tiles when displaying the big Mario P-balloon pose."
4517,58367,2,Hex Edit,"Modified by the Replace Cape with Double Jump patch. If a flag is set in the code, it prevents the cape image from being shown."
4518,58477,4,Jump (JML/JSL),Modified by Reverse Gravity. Controls how the player's graphics should flip.
4519,58522,4,Jump (JML/JSL),"Modified by the Victory Pose Fix Patch, by TheBiob.


A JSL that jumps to a code that fixes small Mario's head position in his victory pose."
4520,59788,4,Jump (JML/JSL),"Modified by the patch included in the Single Screen UberASM by TheBiob.

It makes so Mario doesn't trigger a side exit when crossing the borders of the screen."
4521,59793,4,Jump (JML/JSL),"Modified by the patch included in the Horizontal/Vertical Level Wrap UberASM by Thomas.

It makes so, when using the vertical wrap, Mario doesn't trigger a side exit when he crosses the borders of the screen."
4522,59804,4,Jump (JML/JSL),"Modified by the Side Exit Triggers Goal patch, by RussianMan.


JSL, modifies the ""side exit enabled"" state to decide whether to activate an event."
4523,59894,5,Jump (JML/JSL),Modified bt Walljump/Note Block Glitch Fix. Avoids clipping glitches at both sides of the screen/level's solid limits.
4524,59926,12,Code,Modified by Walljump/Note Block Glitch Fix. It NOPs out the entire SMW anti-clipping code to run the patch's one later.
4525,60034,1,Hex Edit,Modified by Yoshi Player Patch: Yoshi can't perform a spin jump out of water.
4526,60045,5,Jump (JML/JSL),"Modified by the Separate Jump SFX patch, by Lui.


JSL : NOP, changes the ""spin jump out of water"" SFX from the spin jump sound to a custom sound that varies with current powerup if set to do so. Reverts the hijack to the original values otherwise."
4527,60073,5,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

JSL : NOP, backups Mario's blocked status ($7E0077) before the custom block code is executed, otherwise it'd always be 0 when loaded during the block's code."
4528,60129,4,Jump (JML/JSL),Modified by Layer 2+3 Wallrun Triangle Fix patch. Checks which layers are enabled/if triangle is on layer 2 and applies it's intended mechanics.
4529,60279,4,Jump (JML/JSL),"Modified by the ""Freeram Controlled Hitbox"" patch. Jumps to the first section of the main code."
4530,60281,2,Hex Edit,"Modified by Yoshi Player Patch: Due to the lack of collectable powerups, ""small"" Yoshi uses the same hitbox as big Yoshi."
4531,60432,5,Jump (JML/JSL),"Hijacked by NSMB Star Coins: This tells the game that we're entering a level from a sublevel, not from the overworld (doors)."
4532,60542,5,Jump (JML/JSL),Modified by Walljump/Note Block Glitch Fix. Runs the patch's anti-clipping routine (fixes wall-jumping/clipping with note blocks included).
4533,60542,4,Jump (JML/JSL),"Hijacked by the Layer2InteractionFlag patch included in the Wall Stick & Jump UberASM, by RussianMan.


If !Uninstall is 0 it jumps to code (JSL) that ensures Mario's positions are updated correctly with moving Layer 2 when sticking to a wall, before restoring the hijacked code. Otherwise, if !Uninstall is set to 1, restores the original code."
4534,60692,4,Jump (JML/JSL),Modified by Reverse Gravity. Fixes interaction with ceilings when in reversed gravity mode.
4535,60700,8,Jump (JML/JSL),Modified by Walljump/Note Block Glitch Fix. Runs a clipping fix for Super Mario (big Mario) getting inside one-block high spaces.
4536,60951,4,Jump (JML/JSL),Modified by Reverse Gravity. It's a check placed before the interaction with ground fix.
4537,60981,4,Jump (JML/JSL),Modified by Layer 2+3 Wallrun Triangle Fix patch. Checks enabled layers and applies player sliding with cape on triangle.
4538,61033,2,Hex Edit,"Modified by Yoshi Player Patch: Due to the lack of collectable powerups, ""small"" Yoshi can also break Turn Blocks and not just big Yoshi."
4539,61123,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Stage clear"" song number."
4540,61132,4,Jump (JML/JSL),"Hijacked by the Yump Reward / No-Yump Penalty Patch, by JamesD28. 

JML, hijacks the display message routine so that if the prize gives coins, the message doesn't display until all of the coins are done being collected."
4541,61140,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes the interaction with ground when in reversed gravity mode.
4542,61280,2,Hex Edit,Modified by SFX on Landing. Makes it so falling speed will trigger landing sound.
4543,61291,4,Jump (JML/JSL),Modified by Sound on Landing. Check for falling speed to play sound effect on landing.
4544,61308,2,Hex Edit,"Modified by the Replace Cape with Double Jump patch. It prevents the code from branching after reading $1407, since its purpose has been changed by the patch."
4545,61319,4,Jump (JML/JSL),"Hijacked by the Red Yoshi's Fire Stomp patch, by RussianMan.


JML, jumps to code that allows Red Yoshi to produce fireballs when stomping the ground, when he has a yellow or disco Shell in his mouth."
4546,61512,4,Jump (JML/JSL),Modified by Layer 2+3 Wallrun Triangle Fix patch. Saves layer information for triangle check.
4547,61837,6,Jump (JML/JSL),Modified by Reverse Gravity. Fixes bounce sprites.
4548,62157,7,Jump (JML/JSL),"Modified by Midway Cutoff Fix by StackDino.


Changes tiles for midway bar object after crossing it."
4549,62171,2,Hex Edit,"Modified by Lunar Magic.

NOPs out the original code (BEQ $F2E0) which disables the (unused) effect that $7E13CD has in the original game."
4550,62178,1,Hex Edit,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

If !midway_powerup = 1, it writes $D0 (vanilla), otherwise it writes $80 (which makes midways never give a powerup)."
4551,62184,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it hijacks the midway bar routine to handle the checkpoint (mainly, calculate the new entrance to set)."
4552,62184,6,Jump (JML/JSL),Hijacked by NSMB Star Coins: This one transfers the currently collected coins into the midway point buffer.
4553,62258,53,Code,"Modified by Yoshi Coin Fix, by imamelia.


Restructures the Yoshi coin collection routine. Ends with a JML to custom code."
4554,62271,7,Jump (JML/JSL),"Modified by Yoshi Coin Score Fix. Swaps JSL and INC's places and turns INC $1422 to LDA $1420, so it's used for check in JSL routine."
4555,62278,4,Jump (JML/JSL),"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


JML, modifies the ""all Yoshi coins collected"" routine to also increment the ""number of levels in which all Yoshi coins were found"" counter."
4556,62296,5,Jump (JML/JSL),"Modified by the Dragon/Yoshi Coin Explanation Message patch, by Telinc1.


JSL : NOP, hijacks playing the Yoshi coin collection sound effect to add message display functionality."
4557,62301,4,Jump (JML/JSL),"Hijacked by the Individual Dragon Coin Save patch by worldpeace, JackTheSpades and LX5.

JML, it modifies the code of the Dragon Coin tiles to mark the coin as collected and to spawn custom map16 tiles to replace the coin."
4558,62311,4,Jump (JML/JSL),"Modified by the ""Beat level by collecting all of the coins"" patch. Checks how many coins have been collected when a coin is picked up."
4559,62327,15,Code,"Modified by Yoshi Coin Score Fix. Replaces original Yoshi Coin's score giving routine, so it now checks number of yoshi coins being collected before increasing score value and necessary addresses."
4560,62333,13,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from the Yoshi Coins."
4561,62521,5,Jump (JML/JSL),"Hijacked by NSMB Star Coins: This tells the game that we're entering a level from a sublevel, not from the overworld (pipes)."
4562,62541,4,Jump (JML/JSL),Modified by Reverse Gravity. Fixes interaction points for reversed gravity mode.
4563,62545,4,Jump (JML/JSL),Hijacked by the Level Constrain v3.4 patch by HammerBrother: This constrains Mario's interaction points for blocks within the level borders.
4564,62584,3,Opcode,Modified by Lunar Magic. Remaps CMP.W #$01B0 to CMP.W $13D7.
4565,62590,1,Code,Modified by Lunar Magic.
4566,62600,1,Code,Modified by Lunar Magic.
4567,62610,4,Opcode,"Modified by Lunar Magic. Remaps ADC.L $00BA60,X to ADC.L $000CB6,X."
4568,62618,4,Opcode,"Modified by Lunar Magic. Remaps ADC.L $00BA9C,X to ADC.L $000CD6,X."
4569,62624,3,Code,Modified by Lunar Magic.
4570,62686,3,Miscellaneous,"Modified by Lunar Magic.


A modification of a JSL's address to jump to $06f660 (was originally JSL $00F545) handle custom map 16 for Mario's interaction with the blocks.Hijacked Code"
4571,62699,1,Code,Modified by Lunar Magic.
4572,62707,3,Opcode,Modified by Lunar Magic. Remaps CMP.W #$01B0 to CMP.W $13D7.
4573,62733,4,Opcode,"Modified by Lunar Magic. Remaps ADC.L $00BA70,X to ADC.L $000CC6,X."
4574,62741,4,Opcode,"Modified by Lunar Magic. Remaps ADC.L $00BAAC,X to ADC.L $000CE6,X."
4575,62883,7,Jump (JML/JSL),Modified by Reverse Gravity. Moves the death pit to above when in reverse gravity mode.
4576,62898,5,Jump (JML/JSL),Modified by Yoshi Player Patch: Yoshi takes 5 damage and is thrown upwards instead of getting killed when falling into a bottomless pit.
4577,62898,4,Jump (JML/JSL),Modified by Disable Death Flag patch. Disables death from pits and adds bounce on flag.
4578,62898,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JSL, it makes so the retry code is executed when Mario falls in a pit."
4579,62903,5,Jump (JML/JSL),Modified by Yoshi Player Patch: A custom hurt routine is implemented.
4580,62918,6,Jump (JML/JSL),"Modified by Reset Coins on Hurt, by MovementThruPortals.


JSL : BRA $00, modifies the hurt routine to reset current player coin count."
4581,62933,4,Jump (JML/JSL),"Modified by Invincible Mario with KnockBack, by Kevinskie555.


JML, modifies the hurt routine to avoid setting a powerdown state (or death if small) while giving speed to the player."
4582,62939,2,Hex Edit,"Modified by the Replace Cape with Double Jump patch. It prevents the glide state to be reset when hurt, since the glide physics are disabled by the patch."
4583,62963,5,Jump (JML/JSL),"Hijacked by Better Powerdown to change the powerdown animation.

(It also puts an RTL behind the JSL, therefore turning the rest of the hurt code obsolete.)"
4584,62968,4,Hex Edit,"Modified by ""Remove Status Bar"" patch. Disables item box drop on hurt."
4585,62968,2,Code,"Modified by the Instant Item Box v1.4 patch. BRA $02, branches ahead to skip over code that triggers reserve item auto-dropping when hurt."
4586,62982,5,Jump (JML/JSL),Modified by Yoshi Player Patch: A custom death routine is implemented.
4587,62982,4,Jump (JML/JSL),"Modified by Disable Death Flag patch. Modifies death routine to depend on flag, if set, player can't die on sprite contact and etc."
4588,62982,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it makes so the retry code is executed when Mario dies."
4589,62986,4,Jump (JML/JSL),"Hijacked by the Warp When Dying patch by wiiqwertyuiop.

It jumps to the main code of the patch."
4590,62986,5,Jump (JML/JSL),"Modified by Alternate Death Music for Luigi patch. Jumps to the main code in order to decide which death music will be played, according to the active player."
4591,62987,1,Hex Edit,"Modified by AddmusicK.

Changes the death song number."
4592,62996,4,Jump (JML/JSL),Hijacked by NSMB Star Coins: Mario loses all collected star coins unless they're backed up.
4593,62996,4,Jump (JML/JSL),"Modified by the Death Counter Version 1.2 patch by Thomas.


JSL, hijacks the death routine and jumps to a custom routine that increments the death counter."
4594,63010,4,Jump (JML/JSL),"Modified by Reset Coins on Hurt, by MovementThruPortals.


JML, modifies the death routine to reset current player coin count."
4595,63010,2,Hex Edit,Modified by the Replace Cape with Double Jump patch. It prevents $1407 to be reset when Mario is killed.
4596,63030,4,Jump (JML/JSL),"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


JML, modifies setting of player graphics upload pointers to account for the expanded tilemap."
4597,63030,6,Jump (JML/JSL),"Dynamic Z hijack, used only if features related to mario gfx and palettes changes is activate.


On the original game this section of the code is used to know the current graphic of yoshi or podoboos (basically select graphic pointers), on dynamic z, its change some things of the code to use custom graphic pointers (basically change the Bank and the start source position of the pointers)."
4598,63155,4,Table,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

Scroll table values. The values stored here change depending on the Scroll Type used."
4599,63203,1,Code,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

NOP #1, partially disables Lunar Magic code."
4600,63204,4,Jump (JML/JSL),"Modified by Lunar Magic.


This is the VRAM optimization patch."
4601,63205,3,Miscellaneous,"Not modified, but read by Center Scroll, by HammerBrother and Thomas.

org read3($00F6E5), NOPs out 6 bytes of Lunar Magic code in freespace."
4602,63210,7,Code,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

NOP #7, disables Lunar Magic code that sets the scroll line positions."
4603,63245,4,Jump (JML/JSL),Hijacked by Lunar Magic (JML). Adjusts the maximum vertical scroll for horizontal levels depending on the level height and the “allow viewing bottom tiles” setting.Freespace code
4604,63251,5,Jump (JML/JSL),"Modified by the Sprite Scroll Fix patch. JML : NOP, this makes it properly detect which direction the screen is moving (left or right)."
4605,63272,4,Hex Edit,"Modified by the Sprite Scroll Fix patch. Nops out the code that writes $55 (vertical levels), so that instead of checking of Mario's position relative to screen border, checks the direction where the screen moves."
4606,63276,4,Jump (JML/JSL),"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

JML, jumps to the new horizontal scroll routine for horizontal levels."
4607,63355,4,Jump (JML/JSL),Modified by Lunar Magic.
4608,63356,3,Miscellaneous,"Not modified, but read by Center Scroll 3.3, by HammerBrother and Thomas.

org read3($00F77C)+1, modifies Lunar Magic code in freespace in order to alter vertical level horizontal scrolling."
4609,63369,5,Jump (JML/JSL),"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

JML : NOP #1, jumps to the new horizontal scroll routine for vertical levels."
4610,63389,4,Jump (JML/JSL),Modified by Lunar Magic.
4611,63464,4,Jump (JML/JSL),Modified by Lunar Magic.
4612,63476,5,Jump (JML/JSL),"Modified by the Sprite Scroll Fix patch. JML : NOP, this makes it properly detect which direction the screen is moving (up or down)."
4613,63484,175,Jump (JML/JSL),"Modified by Vertical Scroll Reprogrammed. Jumps to main code, and the rest is filled with NOPs."
4614,63493,5,Jump (JML/JSL),"Hijacked by Better Vertical Camera Scrolling, by Nowieso.


JML BetterVertCam : NOP, it sets the boundary, where Mario is relative to the camera, when to scroll the camera upwards and downwards."
4615,63500,4,Hex Edit,"Modified by the Sprite Scroll Fix patch. Nops out the code that writes $55 (horizontal levels), so that instead of checking of Mario's position relative to screen border, checks the direction where the screen moves."
4616,63504,4,Jump (JML/JSL),"Hijacked by Better Vertical Camera Scrolling, by Nowieso.


JSL PosStopScroll, it sets the position, where Mario is located relative to the camera, to scroll the camera"
4617,63504,4,Code,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

Restores the game's default vertical scrolling code if the Scroll Type is set to Normal."
4618,63504,4,Jump (JML/JSL),"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

JML, jumps to the new vertical scroll routine if the Scroll Type is set to Adjustable Scroll Line Positions mode."
4619,63601,4,Jump (JML/JSL),Modified by Lunar Magic.
4620,63605,4,Jump (JML/JSL),"Modified by the (Specter of Torment-Styled) Wallclimb and Walljump patch, by Erik/Maarfy.


JML, hijacks a portion of the screen scrolling routine to add ""is wall climbing"" as a screen scrolling trigger.


The UberASM version of this patch includes a helper patch that applies this exact code."
4621,63608,1,Hex Edit,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

Restores a BNE statement if Free Vertical Scroll is disabled."
4622,63608,1,Hex Edit,"Modified by Center Scroll 3.3, by HammerBrother and Thomas.

Replaces a BNE with a BRA statement if Free Vertical Scroll is enabled."
4623,63989,15,Code,Modified by Disable Score: The new code only allow to run 1-up sprites in its code but removes score sprites.New HTML
4624,64041,4,Jump (JML/JSL),"Modified by Fireball Conveyor Fix, by Thomas. Jumps to a routine that fixes the Fireball teleport glitch when in contact with the castle moving stairs."
4625,64069,4,Jump (JML/JSL),"Hijacked by the Yump Reward / No-Yump Penalty Patch, by JamesD28. 

JML, hijacks the flat switch routine to either reward if a yump is performed, or penalize if a yump is missed. For those unaware, a yump is the frame perfect jump you can make off of the palace switches."
4626,64153,1,Hex Edit,"Hex edit included in the Goal Roulette sprite by Iceguy.

It makes so items carried into the goal don't turn into powerups."
4627,64526,4,Jump (JML/JSL),"Hijacked by the Goal Point Sprite Reward Fix, by Ragey and optimization by Major Flare.


A JML that jumps to the code which handles the limitation on the values passed to the routine at $02ACEF so garbage tiles won't appear."
4628,64772,4,Code,"Not modified, however referenced by Lunar Magic to set the high byte of the Y position in hijacks related to off-screen routines."
4629,64842,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes Water Bubble's spawn position during reversed gravity mode.
4630,64963,6,Jump (JML/JSL),Modified by Reverse Gravity. Fixes Water Splash's spawn position during reversed gravity mode.
4631,65150,4,Jump (JML/JSL),Modified by Reverse Gravity. Fixes Floor Dust's spawn position during reversed gravity mode.
4632,65174,16,Code,Modified by Fireball Bounce Limit patch. Check if reached bounce count.
4633,65192,4,Jump (JML/JSL),Hijacked by the fireball ammo patch to add an ammo counter for fireballs.
4634,65192,5,Jump (JML/JSL),Modified by No Fireballs in Water patch. Jumps to the main code.
4635,65201,1,Data,Modified by Yoshi Player Patch: The amount of fireballs (which have been retooled into melon seeds) allowed is increased to 5.
4636,65220,5,Jump (JML/JSL),Modified by Upwards arc fireball patch. Jumps to the main code.
4637,65225,5,Jump (JML/JSL),"Hijacked by the Fireball Direction Fix patch, by Aerithos.


JSL : NOP, jumps to code that uses the left/right button held as an index for fireball shooting directions, and defaults to the vanilla shooting mechanic if neither left nor right are held."
4638,65233,53,Code,Modified by Fireball Bounce Limit patch. Initialize bounce counter.
4639,65496,1,Data,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the sram expansion patch included in retry. It modifies the SRAM size byte in the ROM header, if !midway_sram = 1. Otherwise it writes the original value ($01)."
4640,65496,1,Hex Edit,"Modified by the Overworld Indicators patch. This value is the SRAM size in the original game, and it's changed to $02 to expand to 4KB of SRAM in case Ragey's Overworld Expansion is enabled. (Only does this if SRAM is 2KB, e.g. default value)Edit"
4641,65510,2,16-bit Pointer,Modified by BRK Exception Handler: The native mode BRK vector is repointed into freespace in bank $00.
4642,65520,4,Jump (JML/JSL),Modified by BRK Exception Handler: Adds a debug code.
4643,98506,1,Opcode,"Not modified, however is used by Lunar Magic as an RTL for calling routines that end in RTS in bank 1 with stack magic. So don't modify it."
4644,98514,19,Jump (JML/JSL),Modified by No More Sprite Tile Limits. Replaces the old OAM slot search with the new one.
4645,98599,4,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to routine to handle custom sprite states that are not 8."
4646,98641,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to a routine that clears the init bit when changing sprites, works with $07F785."
4647,98674,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to custom sprite initialization routine."
4648,98685,2,16-bit Pointer,"Modified by PIXI's poison mushroom patch.

Pointers to sprite init routines. Note that the actual hijack location depends on the sprite slot chosen*2. For example, if the sprite is inserted in slot $85, then the hijack location is ($01817D + ($85*2) = $018287). The poiner is relocated to the power-up routine."
4649,98849,2,16-bit Pointer,"Modified by Lunar Magic.


Lunar Magic 2.53+ changes sprite 52's (moving ledge hole) init pointer to $85B7 (part of the piranha plant's init routine) to fix an issue in the original SMW where this sprite would spawn in the wrong position if placed at the top of a subscreen."
4650,98851,2,Hex Edit,"Modified by the Placeable (Kicked) Throw Block patch by KevinM.

It makes so throw block sprites run the Key/Baby Yoshi init routine when directly placed in Lunar Magic."
4651,98961,2,16-bit Pointer,Modified by Bird from Yoshi's House Fix. Changes Yoshi's House birds' pointer to Yoshi's egg's.
4652,98995,4,16-bit Pointer,"Modified by Hammer Bro Fix patch.

This remaps both sprite 9B and 9C's init routine pointers to $01AD54."
4653,98995,2,Hex Edit,"Hijacked by Pixi.

Changes the pointer of the init Hammer Bro routine, in case it's the original one ($87A7), to $85C2 (which points to an RTS)."
4654,99110,13,Jump (JML/JSL),Hijacked by Roy's 'All Second Timed Lift' patch. Gets and checks the sprite's X-pos before doing a JSL to the main routine.
4655,99112,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the Timed Lift init routine to start at 1 or 4 seconds based on the extra bit instead of X position."
4656,99222,4,Jump (JML/JSL),"Hijacked by the Ball n' Chain and Yoshi Interaction Fix patch by KevinM.

It jumps to the code that backs up the Ball n' Chain center coordinates to unused sprite tables, during the sprite's init routine."
4657,99264,6,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL : NOP #2, modifies the scale platform init routine to set close spacing / wide spacing state based on the extra bit instead of X position."
4658,99296,6,Jump (JML/JSL),"Hijacked by the Yoshi Color Depending on Initial X Position patch, by KevinM.


If !YoshiColor is set, jumps (JSL) to code in freespace that restores the original code then sets Yoshi's colour based on the X position he spawned at, and overwrites leftover bytes with a BRA $00. Otherwise, if the byte at $0183E0 is $22 (JSL), it restores the original code (DEC $160E,x : INC $157C,x)."
4659,99324,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JML, repairs the portion of the Spike Top init routine shared with the Urchin and overwritten elsewhere."
4660,99327,4,Jump (JML/JSL),"Modified by Spike Top Ceiling Cling, by imamelia.


Hijacks the Spike Top init routine to alter its movement following a ceiling contact check."
4661,99355,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JML, modifies the shared Urchins / Sparky / Hothead / Wall-following Fuzzy init routine to set movement direction based on the extra bit instead of X position."
4662,99381,4,Jump (JML/JSL),"Hijacked by the Placeable (Kicked) Throw Block patch by KevinM.

It jumps to the code that makes throw block sprites spawn in the kicked state when their extra bit is set."
4663,99381,5,Jump (JML/JSL),"Hijacked by the Yoshi Color Depending on Initial X Position patch, by KevinM.


If !BabyYoshiColor is set, jumps (JSL) to code in freespace that restores the original code and checks if the sprite is Baby Yoshi (the init routine is shared with other sprites). If it's a Baby Yoshi, it branches to code that sets Baby Yoshi's colour based on the X position he spawned at. A leftover byte is NOP'd out. If !BabyYoshiColor is 0 and the byte at $018435 is $22 (JSL), it restores the original code (LDA #$09 : STA $14C8,x)."
4664,99406,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the P-Switch init routine to set blue / grey color based on the extra bit instead of X position."
4665,99534,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the shared Lakitu / Monty Mole / Wooden Spike / Creating/Eating Block / Flying Grey Turnblocks init routine to differentiate behavior based on the extra bit instead of X position."
4666,99538,4,Jump (JML/JSL),"Hijacked by the Hiding Monty Mole Fix by Isikoro.

JML, hijacks the Monty Mole's init routine to disable interaction with sprites, cape, fireballs, etc. through the tweaker bytes."
4667,99542,5,Jump (JML/JSL),Modified by Creating Block Sprite Path Expander. Jump to Creating Block Sprite's init routine.
4668,99555,5,Jump (JML/JSL),"Modified by No Silent Bullet Bill, by Ramp202.


JSL : NOP, modifies the Bullet Bill init routine to add a sound effect."
4669,99633,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the ground Super Koopa init routine to set flashing cape / yellow cape based on the extra bit instead of X position."
4670,99694,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the green bouncing Parakoopa init routine to set bouncing behavior based on the extra bit instead of Y position."
4671,99779,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the call for custom sprite code."
4672,99788,2,16-bit Pointer,"Modified by PIXI's poison mushroom patch.

Pointers to sprite main routines. Note that the actual hijack location depends on the sprite slot chosen*2. For example, if the sprite is inserted in slot $85, then the hijack location is ($0185CC + ($85*2) = $0186D6). The poiner is relocated to the power-up routine."
4673,99912,2,16-bit Pointer,"Modified by Item Box Sprite Fix, by Davros/Romi.


Overwrites the pointer to the P-Switch Main routine to run custom blink-fall code."
4674,99954,2,16-bit Pointer,"Modified by Item Box Sprite Fix, by Davros/Romi.


Overwrites the pointer to the Throw Block sprite Main routine to run custom blink-fall code."
4675,100044,2,16-bit Pointer,"Modified by Item Box Sprite Fix, by Davros/Romi.


Overwrites the pointer to the Key sprite Main routine to run custom blink-fall code."
4676,100219,5,Jump (JML/JSL),"Modified by the Goal Type-Dependent Behavior (No Goal Sphere Walk) patch, by Koopster.


JML : NOP, modifies the Goal Point Question Sphere routine to increment $13CB when touched, using it as a flag to indicate whether the goal touched was a tape or a question sphere. Also restores the hijacked code (LDA #$FF : STA $1493)."
4677,100228,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Boss clear"" song number."
4678,100263,4,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the code that sets the sprite tables for normal and custom sprites."
4679,100263,4,Jump (JML/JSL),Hijacked by sprite tool. This then jumps to freespace to initalize custom sprite tables.
4680,101116,4,Jump (JML/JSL),"Hijacked by the Placeable Kicked Shell patch by KevinM.

It jumps to the code that turns Shell Koopas into kicked shells."
4681,101453,4,Jump (JML/JSL),"Hijacked by the Placeable Kicked Shell patch by KevinM.

It jumps to the code that turns Parakoopas into kicked special shells."
4682,102096,10,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces upsidedown/classic piranha plant's horizontal proximity check to 16-bit one for if it should come out of pipe.
4683,102157,4,Jump (JML/JSL),"Modified by No Sprite Interaction Fix, by chillyfox.


JML, modifies the Hopping Flame main sprite routine to add a proper sprite interaction check."
4684,102375,5,Jump (JML/JSL),"Modified by Bullet Bill Object Interaction by JamesD28.


Enables object interaction and flipping for bullet bills."
4685,102423,6,Jump (JML/JSL),Modified by Vertical Despawn Fix: Changes the despawn range of Bullet Bills from relative to the camera to the level boundary.
4686,102720,6,Jump (JML/JSL),"Modified by the No block interaction if sprite is falling off screen patch, by GreenHammerBro.


JML : BRA $00, modifies the sprite/block interaction routine to terminate immediately if the processed sprite is in state $14C8 = #$02."
4687,102754,4,Jump (JML/JSL),Modified by the Tide Sprite Interaction Fix patch. Handles a part of the patch's functions.
4688,102787,4,Jump (JML/JSL),Modified by the Tide Sprite Interaction Fix patch. Handles a part of the patch's functions.
4689,102854,4,Jump (JML/JSL),"Hijacked by the Don't Get Stuck In Walls Fix patch by RussianMan.

It hijacks the routine that handles carryable sprites inside walls, to make sprites that are stuck get ejected based on the direction that was earlier set by the patch."
4690,102934,4,Jump (JML/JSL),Modified by Sprite Underwater Flag patch. Adds additional check for new flag to set sprites to act like they're underwater.
4691,103048,4,Jump (JML/JSL),"Modified by Bullet Bill Object Interaction by JamesD28.


Make bullet bill interact with objects every other frame horizontally."
4692,103115,4,Jump (JML/JSL),"Modified by Bullet Bill Object Interaction by JamesD28.


Make bullet bill interact with objects every other frame vertically."
4693,103184,6,Jump (JML/JSL),"Modified by the Lava Fix patch, by Roy.

Changes the way lava slopes work to kill sprites on contact."
4694,103434,4,Jump (JML/JSL),"Modified by Bullet Bill Object Interaction by JamesD28.


Fix clipping issues with slopes for bullet bills."
4695,103526,4,Hex Edit,Hijacked by the Level Constrain v3.4 patch by HammerBrother: Writes 4 NOPs so sprites still interact with the level if outside of the level vertically (vertical levels only).
4696,103532,4,Jump (JML/JSL),Hijacked by the Level Constrain v3.4 patch by HammerBrother: This constrains SpriteV and SpriteH to the level borders in vertical levels.
4697,103606,5,Code,Modified by Lunar Magic for a jump to the code for the setting that makes sprites outside the level boundaries interact with air instead of water.
4698,103636,4,Jump (JML/JSL),Hijacked by the Level Constrain v3.4 patch by HammerBrother: This constrains SpriteV to the level borders in horizontal levels.
4699,103638,3,Opcode,Modified by Lunar Magic. Remaps CMP.W #$01B0 to CMP.W $13D7.
4700,103662,4,Jump (JML/JSL),Hijacked by the Level Constrain v3.4 patch by HammerBrother: This constrains SpriteH to the level borders in horizontal levels.
4701,103680,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA60,X to LDA.L $000CB6,X."
4702,103689,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA70,X to LDA.L $000CC6,X."
4703,103698,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
4704,103707,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BAAC,X to LDA.L $000CE6,X."
4705,103732,3,Miscellaneous,"Modified by Lunar Magic.


A modification of a JSL's address to jump to $06f700 (was originally JSL $00F545) handle custom map 16 for sprite's interaction with the blocks.Hijacked Code"
4706,103740,4,Jump (JML/JSL),"Modified by Shell-Collectable Coins and Yoshi/Dragon Coins. Allows for sprites that were thrown without being kicked, to collect coins and Yoshi/dragon coins."
4707,104014,4,Jump (JML/JSL),"Hijacked by the Stunned Bob-Omb SFX patch by JamesD28.

JML, hijacks Bob-Omb's code to play a sound effect every so often when its stun timer goes down a certain threshold."
4708,104078,4,Jump (JML/JSL),"Hijacked by the Disco Shell SFX patch, by KevinM.


JML, jumps to code that plays a sound effect when a yellow shell-less Koopa turns a normal Shell into a Disco Shell. Also restores the hijacked code."
4709,104486,2,Code,Modified by Lunar Magic.
4710,104777,4,Jump (JML/JSL),Modified by Shell-Collectable Coins and Yoshi/Dragon Coins. Allows for kicked sprites to collect coins and Yoshi/dragon coins.
4711,106347,6,Table,Modified by Yoshi Player Patch: This one increments the speed of kicked shells to fix a bug where you can hurt yourself.
4712,106359,2,Opcode,Hijacked by the SMB2 Holding patch: This one puts carried sprites always above Mario.
4713,106386,3,Code,Modified by Yoshi Player Patch: Carried sprites (which are retooled into the eaten state) don't draw their graphics anymore.
4714,106432,2,Hex Edit,"Modified by the P-Balloon Acceleration + Extras patch by Erik.

Getting hurt while having a P-Balloon won't make you lose the balloon."
4715,106467,4,Jump (JML/JSL),"Hijacked by the Don't Get Stuck In Walls Fix patch by RussianMan.

It hijacks the routine that handles carried sprites to store the inverse direction a sprite was thrown by the player, for later use."
4716,106467,4,Jump (JML/JSL),"Hijacked by the Disable Carrying Items Underwater Patch, by RussianMan.


JML, A jump that points to a routine handling Mario carrying items to disable this ability while underwater."
4717,106484,9,Jump (JML/JSL),"Hijacked by the Expanded Carrying v0.15 patch, by Sonikku.


JML, jumps to code that enables a SMB2-style carrying mechanic, and puts the carried sprite's slot index + 1 into $148F. If the sprite is carried SMB2 style, bit 7 of $148F is also set.


Also inserts a return label and RTS, and a subroutine that is accessed by JSL from within the freespace code, that handles stunned sprites."
4718,106509,4,Jump (JML/JSL),Hijacked by the SMB2 Holding patch: This one controls how sprites a released.
4719,106567,4,Jump (JML/JSL),Modified by Item Release Bulk Patch: Changes the position where a carried item is dropped when spinning.
4720,106600,4,Jump (JML/JSL),Modified by Item Release Bulk Patch: Changes the position where a carried item is thrown upwards when spinning.
4721,106617,4,Jump (JML/JSL),Modified by Item Release Bulk Patch: Changes the position where a carried item is thrown upwards when spinning.
4722,106669,4,Jump (JML/JSL),Modified by Item Release Bulk Patch: Puts dropped items next to Mario instead of clipping them inside the ground.
4723,106742,4,Jump (JML/JSL),"JML, hijacked by the SMB2 Holding patch: This one controls the position of the carried sprite."
4724,106742,4,Jump (JML/JSL),"JML, hijacked by the Fix Jank With Holding Items While Spin Jumping patch. Jumps to code that keeps the carried sprite centered on Mario while spinjumping, and raises it's Y offset."
4725,106778,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes items being carried during reversed gravity mode.
4726,107010,4,Jump (JML/JSL),"Modified by the P-Switch Duplication with Yoshi Fix patch, by KevinM.


JML, modifies the stunned P-Switch routine to make it inedible when in the ""pressed"" state."
4727,107052,4,Jump (JML/JSL),"Modified by the Baby Yoshi & Yoshi Egg Fix patch, by Davros.


JML, modifies the main baby Yoshi sprite routine to execute several fixes."
4728,107189,4,Jump (JML/JSL),Main hijack of TheBiob's 'Baby Yoshi grow flag' patch.
4729,107238,5,Jump (JML/JSL),Hijacked by SMA2 Yoshi blocks: Unlocks the Yoshi colour from ?-blocks if you grow a baby Yoshi of that colour into an adult.
4730,107255,5,Jump (JML/JSL),Modified by Configurable amount of Baby Yoshi eat sprites. Runs comparison of custom per-level values with how many sprites Baby Yoshi has eaten to determine whether to become adult.
4731,108106,33,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from shell kills."
4732,108165,4,Jump (JML/JSL),Hijacked by the SMB2 Holding patch: This one hijacks the interaction between two sprites. Any goomba and a sprite acting like one (e.g. the SMB2 sprites) behave like a thrown sprite in SMB2.
4733,108594,4,Jump (JML/JSL),"Hijacked by the CustomDefaultInteraction patch included in the SMB3 Goomba Family, by Sonikku.


JML, jumps to code that ensures 4 custom sprites use the default interaction if the ""don't use default interaction with Mario"" and ""can be stomped"" bits are set. It will also increment $1594,x if those sprites are stomped."
4734,108619,32,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from star kills."
4735,108651,4,Jump (JML/JSL),"Hijacked by the Spawn a Coin On Star Kill Patch, by RussianMan.


JML, Jumps to the main ""Turn into a coin if star"" routine."
4736,108670,6,Jump (JML/JSL),"Modified by SMA2 Slide Kill Chain patch by HammerBrother.


Check for slide state and increment consecutive kill counter when colliding with an enemy."
4737,108670,3,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


Disables $18D2's incrementing so consecutive awards from external codes are disabled as well."
4738,108720,4,Jump (JML/JSL),"Modified by Jump clip fix. Makes it so when stomping, the player's Y speed is compared with the sprite's Y speed instead of checking just the highest bit."
4739,109002,2,Hex Edit,"Modified by the Replace Cape with Double Jump patch. It prevents sprites being smushed when $1407 is set, since its purpose has been changed by the patch."
4740,109026,5,Jump (JML/JSL),"Hijacked by the CustomDefaultInteraction patch included in the SMB3 Goomba Family, by Sonikku.


JML : NOP, jumps to code that ensures 4 custom sprites use the default interaction if the ""don't use default interaction with Mario"" and ""can be stomped"" bits are set. It will also increment $1594,x if those sprites are stomped."
4741,109092,4,Jump (JML/JSL),"Hijacked by the Bob-omb Kicked Palette Fix patch, by Koopster.


JML, jumps to code that resets the Bob-omb's palette when kicked, so that it doesn't get stuck on it's flashing cycle palette if kicked on one of those flashing frames."
4742,109107,4,Jump (JML/JSL),"Modified by the Update Vertical Scroll on Enemy Bounce patch by CliffTheCrafter.


JML, jumps to code that sets the ""screen should scroll up to the player"" flag when Mario bounces off an enemy."
4743,109111,10,Jump (JML/JSL),"Modified by Jump clip fix. Jumps to new stomp/spin jump Y speed code, and NOPs out the vanilla version of the routine (which used a fixed value instead of relative)."
4744,109144,4,Jump (JML/JSL),Hijacked by the SMB2 Holding patch: This one is for picking up a sprite.
4745,109148,1,Hex Edit,Modified by Yoshi Player Patch: Yoshi can't carry things in his hands.
4746,109150,6,Jump (JML/JSL),Hijacked by the Can't Pick Up Items When Small patch. It jumps to the code that makes Mario not pick up the item if he's small.
4747,109150,6,Jump (JML/JSL),Modified by No Pressed P-Switch Carry patch. Extends checks for if p-switch can be carried to include check if it was pressed.
4748,109150,6,Jump (JML/JSL),"Hijacked by the Disable Carrying Items Underwater Patch, by RussianMan.


JSL, A jump that points to a routine handling Mario picking up items to disable this ability while underwater."
4749,109272,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It makes so Keys and P-Switches don't set Mario's Y position when he's entering a pipe while touching them."
4750,109314,5,Hex Edit,"Modified by AddmusicK.

BRA + : NOP #3 +, skips over code that uses $0DDA."
4751,109319,5,Jump (JML/JSL),Modified by No P-Switch Music Reset. Jumps to the main code.
4752,109320,1,Hex Edit,"Modified by AddmusicK.

Changes the P-Switch song number."
4753,109382,35,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from consecutive stomp kills."
4754,109632,3,Opcode,"Modified by Lunar Magic. Changes to ""NOP : NOP : XBA"" for holding the Y low byte."
4755,109638,4,Jump (JML/JSL),"Modified by Lunar Magic.


A modification to “SubOffscreen_Bank01” routine that handles despawning sprites when they go offscreen. It is modified to despawn sprites in horizontal levels when going off screen vertically (in the original game, it only erases most sprites when going below the level far enough for most sprites besides Bullet Bills, Spike Tops, Magikoopa's magic, etc.)Freespace code"
4756,109724,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
4757,109908,4,Code,Modified by Hammer Bro Fix patch. It's the new Hammer Bro init routine.
4758,110260,5,Jump (JML/JSL),"Modified by No Sprite Interaction Fix, by chillyfox.


JSL : NOP, modifies the Thwomp main sprite routine to add a proper sprite interaction check."
4759,110283,5,Jump (JML/JSL),"Modified by Proximity Wraparound fix. Changes Thwomp's first SubHorzPos to 16-bit one, when it should change expression."
4760,110295,9,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Thwomp's horizontal proximity check with 16-bit one if player's close enough to show glaring expression.
4761,110309,9,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Thwomp's horizontal proximity check with 16-bit one for if it should fall.
4762,110392,4,Jump (JML/JSL),Modified by Thwomp Ceiling Interaction patch. Adds ceiling interaction for thwomp.
4763,110495,5,Jump (JML/JSL),"Modified by No Sprite Interaction Fix, by chillyfox.


JSL : NOP, modifies the Thwimp main sprite routine to add a proper sprite interaction check."
4764,110569,4,Jump (JML/JSL),Modified by Thwimp + SFX Patch. Jump to code that handles sound effect when thwimp jumps (and Y-speed that is replaced with this hijack).
4765,110834,10,Code,"Hijacked by the Spawn a Coin On Star Kill Patch, by RussianMan.


Code that handles Mario's interaction with fishes while invincible, including a JML to freespace. Depending on the options of the patch, restores old code."
4766,111132,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the Floating Spike Ball init routine to set slow / fast movement speed based on the extra bit instead of X position."
4767,111743,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It prevents many solid sprites from setting Mario's Y position when he enters a pipe while standing on them."
4768,111802,4,Jump (JML/JSL),"Modified by the ""Freeram Controlled Hitbox"" patch. Jumps to the second section of the main code."
4769,111808,2,Hex Edit,"Modified by Yoshi Player Patch: Due to the lack of collectable powerups, ""small"" Yoshi uses the same hitbox as big Yoshi."
4770,111832,4,Jump (JML/JSL),Modified by Yoshi Player Patch: This one sets the ground flag when Yoshi stands on a solid sprite (e.g. the flying ?-block or a platform).
4771,111949,4,Jump (JML/JSL),"Modified by the Platform-Dependent Fast BG Scroll patch, by JamesD28.


JML, modifies the Orange Platform (sprite 5E) to set arbitrary horizontal movement speed, and to interact with a custom fast BG scroll routine."
4772,112770,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It makes so Turnblock Bridges don't set Mario's Y position when he enters a pipe while touching them."
4773,112976,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JML, modifies the climbing net Koopa init routine to set spawn in front of net / spawn behind net state based on the extra bit instead of X position."
4774,113101,2,Code,Modified by Lunar Magic.
4775,113459,5,Jump (JML/JSL),Modified by No More Sprite Tile Limits. Disables net door from setting its own hardcoded OAM slot.
4776,113661,2,Opcode,Modified by No More Sprite Tile Limits. Makes use of scratch ram that contains the OAM slot of the net door.
4777,113875,5,Jump (JML/JSL),Modified by Vertical Despawn Fix: Changes the despawn range of Magikoopa Magic from relative to the camera to the level boundary.
4778,114742,4,Jump (JML/JSL),Modified by Magikoopa Palette Editor patch. Changes the way palette is loaded for Magikoopa and allows per-level palettes.
4779,114825,11,Code,"Hijacked by Pixi.

Code run in the goal tape init to get the extra bit in $187B,x."
4780,114828,8,Code,"Modified by Lunar Magic. Entire region is filled with NOP.

This is made so the Y high byte of the Goal Tape ($14D4,x) is copied directly to $1534,x.


Most sprite tools hijack this for storing extra bits and is expected to not change anymore, otherwise goal tapes will not work correctly.Expected final code"
4781,114913,2,Opcode,"Modified by Lunar Magic. Changes ""AND #$01"" to ""AND #$FF"".

This fixes the Goal Tape Point interaction (because $1534 no longer holds extra bits but the complete Y high byte)."
4782,114928,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Stage clear"" song number."
4783,114951,2,Hex Edit,"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


BRA $1C, modifies the goal tape to never award bonus stars."
4784,114981,3,Opcode,Modified by Goal Tape Gives Score patch. Disables coin if goal tape wasn't hit.
4785,114989,48,Code,Rewritten by the 16x16 Goal Tape patch. This is the graphics routine of the goal tape.
4786,115061,3,Code,Modified by Goal Tape Gives Score patch. Disables bonus stars showing when goal tape is hit.
4787,115243,4,Jump (JML/JSL),Modified by the Runaway Wing Patch. Handles the wings' movement if the coin/mushroom is collected.
4788,115370,5,Jump (JML/JSL),"Modified by Flying Yellow 1-up Value Change, by Zeldara109


JML : NOP, overwrites JSR to 1-up routine to set up custom reward."
4789,115471,4,Jump (JML/JSL),"Modified by the Runaway Wing Patch. Hijacks' the ""golden 1-up mushroom collected"" routine."
4790,115529,4,Jump (JML/JSL),"Hijacked by the Item Drop Location Fix Patch. JSL, handles the Flower falling from the item box."
4791,115539,5,Jump (JML/JSL),"Hijacked by the Item Drop Location Fix Patch. JML : NOP, handles the Mushroom falling from the item box."
4792,115544,8,Jump (JML/JSL),"Modified by the Edible Blocks patch, by Thomas.


JSR GetDrawInfo : JSL : RTS, hijacks the routine that draws an eaten berry-sprite to allow variable customized sprite tiles and properties."
4793,115551,1,Data,Modified by Yoshi Player Patch: Berries sprites are remapped to tile $EC.
4794,115612,4,Jump (JML/JSL),Modified by Item Block Priority Mask. Jumps to the main code.
4795,116024,4,Jump (JML/JSL),"Modified by the Custom ""Shooting"" Power-ups, by 1524 and RussianMan.


JML, jumps to the new power-up contact routine."
4796,116024,4,Jump (JML/JSL),"Hijacked by the Classic Powerup Rule patch by Koopster.

JML, jumps to the code that changes the grabbed powerup to a mushroom if Mario is small."
4797,116032,13,Hex Edit,"Modified by ""Remove Status Bar"" patch. Disable item storage."
4798,116037,5,Jump (JML/JSL),Modified by Item Box Mushroom Priority Fix. Jumps to the main code.
4799,116065,4,Jump (JML/JSL),Modified by Invulnerability on power-up. Makes mushroom give invulnerability on contact.
4800,116070,1,Hex Edit,"Modified by the Big Mario -> Small Mario GFX patch, by K3fka.


Sets Mario's powerup animation timer to 0 when collecting a mushroom, effectively removing the animation."
4801,116086,4,Jump (JML/JSL),"Modified by Enhanced Powerup Grab by Maxx.


Trigger common effect upon any power-up collection (shake screen)."
4802,116096,18,Jump (JML/JSL),"Hijacked by the Star Music Fix Patch


Jumps to the main code."
4803,116101,6,Code,"Modified by AddmusicK.

Changes the starman song number, and returns from the routine before it modifies $0DDA."
4804,116101,5,Jump (JML/JSL),"Hijacked by the Multiple Star Songs patch by Iceguy.

JSL : NOP, it jumps to the code that sets the star song depending on the current submap."
4805,116103,3,Code,"Hijacked by the Power Surge Patch, by Glyph Phoenix.


NOP #3, disables the music changing due to star power."
4806,116120,4,Jump (JML/JSL),Modified by Invulnerability on power-up. Makes feather give invulnerability on contact.
4807,116124,5,Jump (JML/JSL),"Modified by Feather Score Fix, by RussianMan.


JML : NOP, modifies the feather collection routine to check for ""dropped from item box"" state and deny score award if set."
4808,116135,4,Jump (JML/JSL),"Modified by Enhanced Powerup Grab by Maxx.


Give feather unique effect upon collection."
4809,116142,15,Code,Hijacked by Romi's Feather Autoscroll Freeze Fix patch. The whole code gets written at this position.
4810,116204,5,Jump (JML/JSL),Modified by Fire Power Timer patch. Modifies fireflower to set timer for fire power.
4811,116204,4,Jump (JML/JSL),Modified by Yoshi Fireball Ability Patch. This jumps to a piece of code that resets the cooldown timer for Yoshi Fireball shooting when the player gets a Fire Flower.
4812,116211,4,Jump (JML/JSL),"Modified by Enhanced Powerup Grab by Maxx.


Give fire flower unique effect upon collection."
4813,116211,4,Jump (JML/JSL),Modified by Invulnerability on power-up. Makes fireflower give invulnerability on contact.
4814,116278,4,Jump (JML/JSL),"Modified by the Runaway Wing Patch. Hijacks the ""powerup graphics"" routine."
4815,116461,4,Jump (JML/JSL),"Hijacked by the Item Drop Location Fix Patch. JML, handles the Feather falling from the item box."
4816,117219,4,Code,Modified by Yoshi Player Patch: This one prevents drawing a Yoshi duplicate when standing on a Brown Chained Platform.
4817,117308,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It prevents Chained Platforms from setting Mario's Y position when he enters a pipe while standing on them."
4818,117365,4,Code,Modified by Yoshi Player Patch: This one prevents hiding Yoshi when standing on a Brown Chained Platform.
4819,118729,5,Jump (JML/JSL),Modified by Custom Boss HP. Set Roy's/Morton's/Ludwig's HP on per-level basis.
4820,118863,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Boss clear"" song number."
4821,119870,4,Code,"Hijacked by Pixi.

JSR $8133 : RTL, jumps to the routine that executes code based on the current sprite status.

You can JSL to this in a custom sprite to execute the original code for a certain sprite status (just make sure A contains the status you want before calling it)."
4822,120286,4,Jump (JML/JSL),"Modified by the Multicolored Parachute patch, by Isikoro.


JML, modifies the shared Para-Bomb and Para-Goomba parachute graphics routine to set the palette based on the sprite's X position."
4823,120516,7,Code,"Modified by Line-Guided Rope Length Fix, by imamelia.


Modifies the line-guided rope sprite init routine to set a custom table with even/odd X position data."
4824,120530,6,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL : NOP #2, modifies the Line-Guided Platform init routine to set platform size/appearance based on the extra bit instead of X position."
4825,120560,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the shared Line-Guided enemy sprites init routine (Fuzzy, Grinder, Chainsaws) to set movement direction based on the extra bit instead of X position."
4826,120645,5,Code,"Hijacked by AddmusicK.

Changes the grinder SFX number (here used by the line-guided grinder), and remaps it to $1DF9."
4827,121211,4,Opcode,"Modified by Lunar Magic. Remaps ADC.L $00BA60,X to ADC.L $000CB6,X."
4828,121217,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
4829,121244,4,Jump (JML/JSL),"Hijacked by the Line Guide Acts-Like Fix, by imamelia and worldpeace.


JML, jumps to code that makes the line guide routine use the ""acts like"" setting instead of the Map16 tile number. Also fixes vanilla line guide glitches to various degrees depending on the value set in the !glitch_level define."
4830,121313,4,Jump (JML/JSL),Modified by Rope Fix. Jumps to the code that applies the line-guide fix.
4831,121367,5,Jump (JML/JSL),Modified by Rope Fix. Jumps to the code that applies the ground fix.
4832,121712,5,Code,"Hijacked by AddmusicK.

Changes the grinder SFX number (here used by the ground grinder), and remaps it to $1DF9."
4833,121971,7,Code,"Modified by Line-Guided Rope Length Fix, by imamelia.


Modifies the line-guided rope graphics routine to draw the long or short rope based on a custom table rather than slot/sprite memory settings."
4834,122051,7,Code,"Modified by Line-Guided Rope Length Fix, by imamelia.


Modifies the line-guided rope graphics routine to draw the long or short rope based on a custom table rather than slot/sprite memory settings."
4835,123039,7,Jump (JML/JSL),"Hijacked by the Podoboo in Layer 2 Lava Fix patch, by Isikoro.


JML : NOP #3, jumps to code that moves the Podoboo's initial jump position based on how much layer 2's Y position has changed. Also inserts a label to jump to at $01E0A6."
4836,123336,5,Jump (JML/JSL),Modified by Yoshi Player Patch: enables a custom main routine for the Keyhole sprite that checks for the custom key sprite instead of SMW's keys.
4837,123355,5,Jump (JML/JSL),"Modified by Keyhole Fix, by Davros.


JML : NOP, modifies the Keyhole sprite routine to run ""sprites locked"" and ""offscreen"" checks."
4838,123373,4,Jump (JML/JSL),"Modified by the Trigger Keyhole While Dying With Yoshi Fix Patch, by KevinM.


A JML that jumps to the ""fix keyhole activating after death with Yoshi"" routine."
4839,123414,1,Hex Edit,"Modified by AddmusicK.

Changes the keyhole song number."
4840,123616,10,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces monty moles' horizontal proximity check with 16-bit one.
4841,123635,4,Jump (JML/JSL),Modified by Level specific speeds for Monty Moles and Hammers. Points to the monty mole routine.
4842,123643,1,Data,"Modified by Level specific speeds for Monty Moles and Hammers. Monty Mole's timer, slow mode."
4843,123649,1,Data,"Modified by Level specific speeds for Monty Moles and Hammers. Monty Mole's timer, fast mode."
4844,123667,4,Jump (JML/JSL),"Hijacked by the Hiding Monty Mole Fix by Isikoro.

JML, hijacks the Monty Mole's main routine to restore the original tweaker bytes once it pops out of the ground."
4845,123971,4,Jump (JML/JSL),"Modified by the patch included in the Net Dry Bones sprite by Darolac.

Together with the hijack at $01E5BF, it makes so Dry Bones spawned by the sprite with the ""is behind the nets"" flag set are drawn correctly."
4846,123987,8,Code,"Modified by the Crumbled Tiles Split patch, by Darolac.


Writes a JML followed by a four byte table; modifies the dry bones/bony beetle shared collapsed-state graphics routine to select different tiles based on sprite number."
4847,124351,4,Jump (JML/JSL),"Modified by the patch included in the Net Dry Bones sprite by Darolac.

Together with the hijack at $01E443, it makes so Dry Bones spawned by the sprite with the ""is behind the nets"" flag set are drawn correctly."
4848,124496,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It makes so Springboards don't keep bouncing the player up after he exits a pipe."
4849,124518,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It makes so Springboards don't set Mario's Y position while he enters a pipe."
4850,124561,1,Hex Edit,Modified by Yoshi Player Patch: Prevents spin jumping from a springboard.
4851,124592,5,Jump (JML/JSL),"Modified by the Springboard Fixes patch by MiracleWater.


JML : NOP, modifies the spring's interaction routine to honor the ""disable interaction with player"" timer to prevent re-grabs."
4852,124597,4,Jump (JML/JSL),"Hijacked by the SMB2 Holding patch: This one enables the function of $154C,x to the spring board so that it gets intangible after dropping or throwing it."
4853,124622,4,Jump (JML/JSL),Hijacked by the SMB2 Holding patch: This one is for picking up a springboard.
4854,124626,6,Jump (JML/JSL),Hijacked by the Can't Pick Up Items When Small patch. It jumps to the code that makes Mario not pick up the Springboard if he's small.
4855,124626,6,Jump (JML/JSL),"Hijacked by the Disable Carrying Items Underwater Patch, by RussianMan.


JSL, A jump that points to a routine handling Mario picking up springboards to disable this ability while underwater."
4856,124634,5,Jump (JML/JSL),"Modified by the Springboard Fixes patch by MiracleWater.


JML : NOP, modifies the spring's ""set carried state"" routine to bypass the ""clear X speed and push player to side of sprite"" routine as shared with the Key and P-Switch."
4857,124656,6,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

JSL : NOP #2, it makes so Springboards will return to their normal state when entering a pipe while they're in the ""pressed"" state."
4858,124763,5,Jump (JMP/JSR),"Modified by Item Box Sprite Fix, by Davros/Romi.


JML : NOP, hijacks shared P-Switch/Display Text sprite main routine to execute custom blink-fall code for various sprites."
4859,124770,6,Code,"Modified by Lunar Magic.

Part of the Sprite 19 fix. If that isn't installed, this is instead replaced with a JSL to $03BCA0, where the correct starting submap is set."
4860,124776,4,Jump (JML/JSL),Modified by the Message Box Expansion patch. Jumps to new code that handles messages for the Display Message 1 sprite.
4861,124848,4,Jump (JML/JSL),"Modified by Cloud Timer Indication patch. Makes use of misc. sprite ram to see if sprite should not display graphics for blinking, and handle blinking timer."
4862,124880,4,Jump (JML/JSL),"Modified by Lakitu Cloud Timer, by Erik.


JML, modifies the ""Lakitu cloud dissipates"" routine to bypass resummoning a Lakitu if the cloud's extra bit = 1."
4863,124985,4,Jump (JML/JSL),"Modified by Lakitu Cloud Timer, by Erik.


JSL, modifies the ""boarding Lakitu cloud"" routine to set a time limit if the extra bit = 1."
4864,125133,5,Jump (JML/JSL),Modified by Cloud Timer Indication. Checks if cloud should display graphics or not.
4865,125718,4,Jump (JML/JSL),Modified by Perfect Disable Ducking. Fix ducking on yoshi.
4866,125718,4,Jump (JML/JSL),"Modified by Disable Ducking, by Iceguy/Meirdent.


JSL, modifies the on-Yoshi check for holding Down to duck to either factor in powerup status, or always disregard the ducking input."
4867,125910,6,Jump (JML/JSL),"Hijacked by the Standalone Yoshi Abilities patch, by RussianMan.


JSL : BRA $00, jumps to code that saves Yoshi's blue shell and yellow shell flags to freeRAM, so Yoshi can keep those abilities when dismounted. The original code is also restored, and leftover bytes are overwritten with the BRA $00."
4868,125993,4,Jump (JML/JSL),"Modified by ""Customized Yoshi Messages Patch"". Changes the way yoshi's rescue message works so it can display any message."
4869,126011,4,Jump (JML/JSL),Modified by the Message Box Expansion patch. Jumps to new code that handles Yoshi's rescue message.
4870,126189,4,Jump (JML/JSL),"Hijacked by the Standalone Yoshi Abilities patch, by RussianMan.


JML, jumps to code that handles Yoshi's stomping and flying abilities when dismounted."
4871,126276,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

Makes so entering a pipe horizontally while in contact with Yoshi's saddle doesn't make Mario get on Yoshi automatically."
4872,126605,5,Jump (JML/JSL),"Modified by Yoshi Sparkles patch, by leod.


JSL : NOP, hijacks a portion of Yoshi's run-every-frame code to generate cosmetic sparkles."
4873,127187,42,Code,"Modified by the Edible Blocks patch, by Thomas.


Overwrites the default ""eaten berry"" routines with custom code. Contains a JSL to code that runs one of up to 255 custom eaten block routines. Overwrites and recreates the routine that awards a coin for eating a normal non-berry sprite."
4874,127716,5,Jump (JML/JSL),"Hijacked by the Don't Get Stuck In Walls Fix patch by RussianMan.

(JSL : NOP) It hijacks Yoshi's ""spit item"" routine to store the inverse direction the sprite was spit by Yoshi, for later use."
4875,127753,10,Jump (JML/JSL),"Hijacked by the No Yoshi Tongue patch, by Ice Man.


JSL : NOP #6, jumps to the code that decides when Yoshi should or should not use its tongue in a per-level basis."
4876,127958,1,Opcode,"Modified by the Edible Blocks patch, by Thomas.


RTS, bypass running the Yoshi tongue drawing and processing routines in situations in which neither should exert any effect. Optionally enabled."
4877,127988,1,Opcode,"Modified by the Edible Blocks patch, by Thomas.


RTS, bypass running the Yoshi tongue drawing and processing routines in situations in which neither should exert any effect. Optionally enabled."
4878,127994,1,Opcode,"Modified by the Edible Blocks patch, by Thomas.


RTS, bypass running the Yoshi tongue drawing and processing routines in situations in which neither should exert any effect. Optionally enabled."
4879,128051,4,Jump (JML/JSL),"Hijacked by the Yoshi Tongue Cutoff Fix Patch, by KevinM.


Jumps to a routine that initializes an ""offscreen to the left"" flag. It also prevents the routine from return preemtively in case the first tile is already offscreen to the left."
4880,128105,1,Data,"Modified by $02xx OAM Remapper. Remaps Yoshi tongue's OAM slots: it uses 5 slots in a row, starting from the one defined in the patch."
4881,128111,2,Code,"Hijacked by the Yoshi Tongue Cutoff Fix Patch, by KevinM.


A small hijack that skip the vanilla code checking for Yoshi's tongue last tile."
4882,128163,4,Jump (JML/JSL),"Hijacked by the Yoshi Tongue Cutoff Fix Patch, by KevinM.


Jumps to the actual routine that fixes the Yoshi's tongue cutoff."
4883,128593,4,Jump (JML/JSL),"Modified by the Yoshi Sprites Interaction Fix patch by KevinM.


JML, jumps to code that prevents certain sprites from harming Yoshi under conditions where they shouldn't."
4884,128797,5,Jump (JML/JSL),"Hijacked by Play as Yoshi: Changes Yoshi's interaction so that sprites hurt the player, not that Yoshi runs away."
4885,128868,5,Jump (JML/JSL),"Modified by the Baby Yoshi & Yoshi Egg Fix patch, by Davros.


JML : NOP, modifies the main Yoshi egg sprite routine to execute several fixes."
4886,128878,12,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Yoshi Egg's horizontal proximity check with 16-bit one.
4887,129085,5,Jump (JML/JSL),"Modified by the Yoshi Egg Block Fix patch, by yoshifanatic. Jumps to the main routine of the patch."
4888,129132,4,Jump (JMP/JSR),"Modified by the Yoshi Color Depending on Initial X Position patch, by KevinM.


If !BlockYoshiColor is set, jumps (JSR) to the init subroutine for Baby Yoshi's hatching to preserve the palette, and NOPs out a leftover byte. Otherwise, if the byte at $0289FB is $22 (JSL), it restores the original code (JSL $07F7D2)."
4889,129132,7,Jump (JML/JSL),Hijacked by SMA2 Yoshi blocks: Preserves the colour when a Yoshi is spawned from an egg from a block.
4890,129294,4,Jump (JML/JSL),"Modified by the Anti Boo Patch, by StackDino.


A JML that makes Boos, Big Boos and Boo Blocks chase the player when faced and the extra bit is active (Extra bit 1)."
4891,129442,24,Code,"Modified by the Boo Chase Fix patch, by Isikoro.


Inserts code that, along with a JML into freespace, makes the Boo and Boo Block track Mario accurately."
4892,129564,8,Code,"Hijacked by the Stealth Boos by Extra bit patch, by Isikoro.


Inserts code that, along with a JML into freespace, makes the Boo Block invisible when chasing Mario."
4893,129832,2,Opcode,Modified by Minimalist Course Clear so it loads a custom waiting value that determines when to fade back to the overworld after beating a boss.
4894,129838,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Boss clear"" song number."
4895,131007,17,Code,"Hijacked by the Power Surge Patch, by Glyph Phoenix. 


A piece of code that converts any earned Bonus Stars to star timer."
4896,163848,106,Jump (JML/JSL),Modified by the Instant Item Box v1.4 patch. Jumps to the main code and pads to address $028072.
4897,163921,14,Jump (JML/JSL),"Hijacked by the Item Drop Location Fix Patch. JSL : NOP #10, jumps to a code that sets the falling sprite from item box's X position to constantly match with Mario's."
4898,163981,4,Jump (JML/JSL),Modified by Bob-omb Cape Fix. Jumps to the main code.
4899,165423,4,Jump (JML/JSL),Hijacked by the Can't Pick Up Items When Small patch. It jumps to the code that makes Mario not pick up a throw block if he's small.
4900,165423,4,Jump (JML/JSL),"Hijacked by the Disable Carrying Items Underwater Patch, by RussianMan.


JSL, A jump that points to a routine handling Mario picking up and carrying throw blocks to disable this ability while underwater."
4901,165720,28,Code,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the code that adds 50 points when breaking a turnblock with a spinjump to adapt to the new score system."
4902,165936,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes bounce sprites.
4903,166035,10,Jump (JML/JSL),"Modified by ""Multi Coin Block Reward"" patch. Modifies multi coin blocks to give set reward after hit set amount of times."
4904,166248,1,Hex Edit,"Modified by AddmusicK.

Changes the P-Switch song number."
4905,166395,6,Jump (JML/JSL),"Hijacked by the Yoshi Color Depending on Initial X Position patch, by KevinM.


If !BlockYoshiColor is set, jumps (JSL) to code in freespace that restores the original code then sets Yoshi's (and his hatching egg) colour based on the X position of the block he spawned from, and overwrites leftover bytes with a BRA $0C (the next instruction is BRA $0A). Otherwise, if the byte at $0289FB is $22 (JSL), it restores the original code (LDA.W $0288A1,y : STA $151C,x)."
4906,166424,4,Jump (JML/JSL),Modified by SMB3 Power-up Facing patch. Makes power-ups face away from player when spawned from block.
4907,166424,4,Jump (JML/JSL),Hijacked by SMA2 Yoshi blocks: ?-blocks with yoshi eggs spawn one randomly with an unlocked colour (if spawned from blocks).
4908,166685,3,Jump (JMP/JSR),"Hijacked by Pixi.

(LoROM only) Jumps to the routine that loads the 16-bit sprite data pointer during the level."
4909,166753,4,Jump (JML/JSL),"Modified by the patch included in the Celeste - Controllable Platform sprite by Erik.

It allows the sprite to respawn after a set amount of time after exploding."
4910,166776,12,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for the minor extended sprites.
4911,168165,4,Jump (JML/JSL),Modified by Reverse Gravity. Fixes bounce sprites.
4912,168185,9,Code,Modified by Reverse Gravity. Fixes bounce sprites.
4913,168235,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes bounce sprites.
4914,168291,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes bounce sprites.
4915,168300,4,Jump (JML/JSL),"Modified by the Spin Jump from Noteblocks patch, by KevinM.


JML, modifies the noteblock bounce routine to set a new bounce height and set spin jump state if the A button is held."
4916,168429,4,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for the block bounce sprites.
4917,168697,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA60,X to LDA.L $000CB6,X."
4918,168705,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA70,X to LDA.L $000CC6,X."
4919,168714,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
4920,168722,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BAAC,X to LDA.L $000CE6,X."
4921,169158,3,Opcode,Modified by Yoshi Fireball Ability Patch [BRA $01 : NOP]. This piece of code frees $14A9 so it can be used as a cooldown timer.
4922,169166,4,Jump (JML/JSL),"Hijacked by the Sprite Whitelist for Cape Ground Pound patch by Nowieso.

It jumps to the main code of the patch during the Ground Pound routine to check if the current sprite being processed is in the whitelist."
4923,169217,3,Code,Modified by Yoshi Player Patch: This one disables cape interaction (the cape is retooled into the tongue) with sprites as the tongue interaction is now handled in the main routine.
4924,169227,5,Jump (JML/JSL),Hijacked by Lunar Magic (JML : NOP). Fixes cape interaction on Iggy/Larry battle.
4925,169406,4,Jump (JML/JSL),Hijacked by Lunar Magic. Corrects cape interaction to work with dynamic levels.
4926,169452,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA60,X to LDA.L $000CB6,X."
4927,169460,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA70,X to LDA.L $000CC6,X."
4928,169469,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
4929,169477,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BAAC,X to LDA.L $000CE6,X."
4930,169494,4,Jump (JML/JSL),Modified by Yoshi Player Patch: Turn blocks are not triggered by the cape (which has been retooled into Yoshi's tongue) anymore.
4931,169499,3,Code,Modified by Lunar Magic.
4932,169499,3,Miscellaneous,"Modified by Lunar Magic.


A modification of a JSL's address to jump to $06f760 (was originally JSL $00F545) handle custom map 16 for cape's interaction with the blocks.Hijacked Code"
4933,169516,4,Jump (JML/JSL),"Modified by Yoshi Player Patch: This one adds block detection (more specifically, whether a block is solid or not) to Yoshi's tongue (uses otherwise cape interaction)."
4934,169523,7,Jump (JML/JSL),"Hijacked by Pixi (since v1.3).

Jumps to the code that fixes interaction between cape and custom extended sprites. After it there's a pointer to custom extended sprite data."
4935,169530,1,Code,Modified by Yoshi Player Patch: This one changes which extended sprites don't get destroyed by the cape (now retooled for the tongue).
4936,169656,4,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for the smoke sprite 01 (puff of smoke).
4937,169907,1,Data,Modified by $02xx OAM Remapper. Determines the starting slot (it uses 4 in a row) for the contact sprite (smoke sprite 2) during non-mode 7 boss levels.
4938,170041,1,Data,Modified by $02xx OAM Remapper. Determines the starting slot (it uses 4 in a row) for the contact sprite (smoke sprite 2) during mode 7 boss levels.
4939,170473,4,Table,Modified by $02xx OAM Remapper. Remaps coin sprites from blocks' OAM slots.
4940,170774,4,Jump (JML/JSL),"Modified by Reznor Fireball Flag. Initializes the extended sprite table used by the patch ($1765,x) for every extended sprite."
4941,170774,4,Jump (JML/JSL),"Used by the Reznor Fireball Fix patch to force non-existing Extended Sprites to clear the flag used by the fireballs, to maximize compatibility with existing sprites."
4942,170779,7,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the code that executes custom extended sprites main code. After it there's a pointer to custom extended sprite data."
4943,171421,5,Jump (JML/JSL),Modified by Yoshi Player Patch: This one changes an unused extended sprite's code into a star which fills your HP.
4944,171426,10,Table,Modified by Yoshi Player Patch: Contains the OAM index table for fireballs (which are repurposed into melon seeds).
4945,171880,4,Jump (JML/JSL),"Modified by the Yoshi Fireball Block Interaction patch, by LX5.


JML, modifies the Yoshi fireball extended sprite to detect Layer 1 tiles when the game is not locked."
4946,171947,2,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for the player's fireballs.
4947,171988,1,Data,Modified by Yoshi Player Patch: Fireballs (which are retooled into melon seeds) have less gravity.
4948,172025,2,Code,Modified by Yoshi Player Patch: Fireballs (which are retooled into melon seeds) don't bounce when they hit the ground.
4949,172031,3,Jump (JML/JSL),Modified by Fireball Bounce Limit patch. Increase bounce counter every bounce.
4950,172092,2,16-bit Pointer,Modified by Yoshi Player Patch: Relocates the fireball OAM indices (which are repurposed into melon seeds) into a bigger table.
4951,172094,4,Jump (JML/JSL),Modified by Yoshi Player Patch: Fireballs (which are retooled into melon seeds) use a custom graphics routine.
4952,172270,5,Jump (JML/JSL),"Modified by Bob-omb explodes on fireball patch. Changes fireball contact checks, so it checks for (para-)bomb before anything else."
4953,172284,8,Jump (JML/JSL),"Modified by the ""Takes 5 fireballs to kill"" Work-around Patch.


This hijacks the ""fireball hit counter"" code that checks if a sprite with the tweak bit ""takes 5 fireballs to kill"" should be killed; instead of $1528,x, this hijack moves the sprite table containing the ""fireball hit counter"" to a freeRAM, 12 (or 22 if a SA-1 ROM) bytes of length (by default, $7F8900).Code"
4954,172287,7,Jump (JML/JSL),Hijacked by the FireBall HP patch. It jumps to the main code of the patch.
4955,172329,4,Jump (JML/JSL),"Modified by Fireball Kill Enemy Respawn Fix, by Erik.


JSL, modifies the player and Yoshi fireball shared ""turn sprite to coin"" routine to also set the ""do not respawn"" flag."
4956,172329,9,Code,Modified by Yoshi Player Patch: This one actually kills sprites instead of turning them into coins when hit with a fireball or melon.Melon Sprite Interaction
4957,172329,13,Code,"Modified by Classic Fireball patch. Sets the sprite hit by a fireball to die by star, then jumps to the main code and sets the score."
4958,172329,4,Jump (JML/JSL),Modified by the Prize by Fire Kills patch. Jumps to the main code.
4959,172371,8,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for extended sprites.
4960,172408,5,Opcode,"Modified by Reznor Fireball Flag. Sets the Reznor/Spitting Jumping Piranha Plant's fireball to read a extended sprite table to determine if being big or not, instead of Mode 7 status."
4961,172567,2,Hex Edit,Modified by the 16x16 Hopping Flame Trail patch. Stores new tile data.
4962,172608,6,Jump (JML/JSL),Modified by the 16x16 Hopping Flame Trail patch. Jumps to main code. JSL : RTS : NOP.
4963,172635,7,Jump (JML/JSL),"Hijacked by the Baseballs and Bones Vertical Movement Patch, by KevinM. 

JML, hijacks the extended sprite routine to update Y position based on Y speed, then restores the original code."
4964,172809,2,Hex Edit,"Modified by Reznor Fireball Flag. Removes an INC $1765,x in the hammer/Piranha Plant's fireball code that would otherwise cause conflicts."
4965,172829,4,Jump (JML/JSL),"Modified by Reznor Fireball Flag. Since $1765,x won't get incremented anymore due to being removed in the hammer/fireball shared code for other purposes, increment it through this hijack."
4966,172829,4,Jump (JML/JSL),"Used by the Reznor Fireball Fix patch to move the increment of $1765,x to the Hammer's animation routine."
4967,173185,5,Jump (JML/JSL),"Hijacked by Play as Yoshi: Changes Yoshi's interaction so that extended sprites hurt the player, not that Yoshi runs away."
4968,173337,4,Jump (JML/JSL),Modified by Reznor Fireball Flag. Gives the big (Reznor's) fireball proper clipping.
4969,173337,4,Jump (JML/JSL),Used by the Reznor Fireball Fix patch to update the clipping for the Reznor and Piranha fireball extended sprites when they are marked as 16x16.
4970,173689,28,Code,"Modified by Lunar Magic (v3.03 and later). This fixes a game freeze bug with the player bubble sprite's object interaction that would load invalid data as tile data outside the level boundaries (such as when the player swims above screen 0 in horizontal water levels).


Its done by checking if the sprite is outside the level (if Ypos >= RAM_13D7), then don't search for blocks."
4971,173754,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA60,X to LDA.L $000CB6,X."
4972,173762,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA70,X to LDA.L $000CC6,X."
4973,173771,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
4974,173779,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BAAC,X to LDA.L $000CE6,X."
4975,173804,3,Miscellaneous,"Modified by Lunar Magic.


A modification of a JSL's address to jump to $06f7a0 (was originally JSL $00F545) handle custom map 16 for the player fireball's interaction with the blocks.Hijacked Code"
4976,173928,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it adds an alternate condition for not spawning Yoshi in the room: when Mario is respawning after dying (so if the level has a ""No Yoshi Intro"", its effect applies also after dying and respawning)."
4977,173947,1,Miscellaneous,Modified by No More Sprite Tile Limits. Highest sprite slot to spawn normal sprites in for the selected sprite memory index (only if !OldSpriteHeader is not enabled).
4978,173966,1,Miscellaneous,Modified by No More Sprite Tile Limits. Highest sprite slot for reserved sprite 1 in for the selected sprite memory index (only if !OldSpriteHeader is not enabled).
4979,173985,1,Miscellaneous,Modified by No More Sprite Tile Limits. Highest sprite slot for reserved sprite 2 in for the selected sprite memory index (only if !OldSpriteHeader is not enabled).
4980,174118,6,Jump (JML/JSL),"Hijacked by Lunar Magic. Main hijack of the Enhanced Sprite Loader. Changes to ""JML start_load : NOP #2""."
4981,174128,4,Jump (JML/JSL),Hijacked by Lunar Magic. Used by Enhanced Sprite Loader to check for additional options when the loaded byte is #$FF.
4982,174132,4,Jump (JML/JSL),"Modified by Lunar Magic. Jumps to the sprite loader ending.


Not a actual hijack because this section of code in particular is now unused by the $02A830 hijack."
4983,174136,4,Jump (JML/JSL),"Modified by Lunar Magic. Jumps to the goal tape point extra bit hack (jumps from $02A9D7). 


Not a actual hijack because this section of code in particular is now unused by the $02A830 hijack."
4984,174150,4,Jump (JML/JSL),"Hijacked by Lunar Magic. Used by Enhanced Sprite Loader to check if Sprite Table needs to be adjusted, for allowing more than 84 sprites per level.


If a Sprite Tool hijacks this address, the job for checking for a ""page cross"" is up to them, for allowing more than 84 sprites."
4985,174150,5,Jump (JML/JSL),Hijacked by Pixi.
4986,174156,2,Code,"Modified by Lunar Magic. Changes branch from ""BNE Return02A84B"" to ""BNE CODE_02A834"", which points to JML."
4987,174166,10,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
4988,174182,4,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the custom generator sprites loading routine."
4989,174267,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
4990,174296,3,Jump (JMP/JSR),"Hijacked by Pixi.

Replaces a JSR with a JMP to fix a softlock related to shooters."
4991,174296,1,Opcode,"Modified by Lunar Magic, changing the JSR opcode into a JMP."
4992,174390,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
4993,174411,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the second Pixi sprite data loading routine."
4994,174427,4,Jump (JML/JSL),Hijacked by Lunar Magic. Sets upper bits of Y position for normal sprites.
4995,174435,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the Pixi sprite data loading routine."
4996,174440,1,Opcode,"Modified by Lunar Magic. A 'RTL' is placed there. The hijack at $02A95B calls $02A960, which then runs though whatever hijack a sprite tool does (or the original game itself) and then it stops here to capture the loaded Y high byte value and corrects out the high bits by the current vertical jump value."
4997,174470,2,Code,Modified by Lunar Magic (currently has special logic to detect and handle change by Vitor's SA-1 patch).
4998,174502,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the routine that makes the silver coin tweaker bit work for custom sprites."
4999,174537,4,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the routine that keeps the extra bits around when setting sprite tables during level loading."
5000,174546,5,Jump (JML/JSL),"Modified by the Placeable Disco Shell patch.


JML, hijacks the Shells so they spawn rainbow ones if Extra Bit is set to 1."
5001,174551,3,Jump (JMP/JSR),"Hijacked by Pixi.

(SA-1 only) Jumps to another hijack at $02B5EC."
5002,174551,3,Jump (JMP/JSR),"Hijacked by Lunar Magic. Inserts a special check for copying the extra bits to the goal point, since the Y position bits can't be used anymore as temporary storage.


Note that there was not enough space for putting a long jump, so this will jump to $02A838, which then contains the proper JML to verify to the goal tape point."
5003,174555,3,Jump (JMP/JSR),"Hijacked by Pixi.

(LoROM only) Jumps to a routine that displaces the sprite offset index for loading."
5004,174689,4,Jump (JML/JSL),Hijacked by Lunar Magic. Sets upper bits of Y position for cluster sprites.
5005,174932,5,Jump (JML/JSL),Hijacked by Lunar Magic (JML : NOP). Sets upper bits of Y position for boo ring.
5006,175001,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
5007,175008,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only) Jumps to custom shooter sprites loading routine."
5008,175010,6,Jump (JML/JSL),"Hijacked by Pixi.

(SA-1 only) Jumps to custom shooter sprites loading routine."
5009,175056,5,Jump (JML/JSL),Hijacked by Lunar Magic (JML : NOP). Sets upper bits of Y position for shooters.
5010,175087,3,Jump (JMP/JSR),"Hijacked by Pixi.

(LoROM only) Jumps to a routine that displaces the sprite offset index for loading."
5011,175090,4,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that clears the $7FAF00-$7FAFFF range."
5012,175091,1,Code,"Modified by Lunar Magic.


Changed from 3F to 7F to fix a bug where the sprite load (or permanently killed) status for sprite indexes 64 to 127 gets carried over to the next level."
5013,175091,1,Hex Edit,"Hijacked by Pixi.

(LoROM only, for roms that use Lunar Magic prior to v3.0) Writes $7F to fix the bug where half of the sprite load status indexes aren't reset on level transition."
5014,175204,4,Jump (JML/JSL),Hijacked by Lunar Magic. Calls the Sprite Cacher/Accelerator while loading a vertical level.
5015,175226,6,Jump (JMP/JSR),"Hijacked by Pixi.

(LoROM only) Jumps to the routine that loads the 16-bit sprite data pointer during initialization."
5016,175268,4,Jump (JML/JSL),Hijacked by Lunar Magic. Calls the Sprite Cacher/Accelerator while loading a horizontal level.
5017,175290,6,Jump (JMP/JSR),"Hijacked by Pixi.

(LoROM only) Jumps to the routine that loads the 16-bit sprite data pointer during initialization."
5018,175412,24,Code,Modified by Shell-Collectable Coins and Yoshi/Dragon Coins to fix some inconsistencies with the score sprite generation routine.
5019,175480,16,Table,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the table that holds the low byte of the score given by each score sprite to account for the new score system."
5020,175497,16,Table,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the table that holds the high byte of the score given by each score sprite to account for the new score system."
5021,175518,6,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for score sprites.
5022,175549,4,Jump (JML/JSL),Hijacked by Disable Score: The JML jumps to check whether the score sprite is an actual score sprite or a 1-up sprite.
5023,175634,35,Code,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the code that adds points for score sprites to adapt to the new score system."
5024,175927,4,Jump (JML/JSL),Modified by Triple Ball'n Chain patch. Makes use of extra bit for sprite spawn.
5025,175933,4,Jump (JML/JSL),Hijacked by Lunar Magic. Sets upper bits of Y position for run-once sprites.
5026,175937,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JML, modifies the parameter setup of sprite E0 (spawn 3 Rotating Grey Platforms) to determine whether to set or clear the extra bit of each platform spawned based on the extra bit of the spawner."
5027,175953,2,Opcode,Modified by Triple Ball'n Chain patch (Non SA-1 only). Makes use of scratch ram to store sprite number.
5028,175957,4,Jump (JML/JSL),Modified by Triple Ball'n Chain patch (SA-1 only). Makes use of scratch ram to store sprite number.
5029,175961,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JML, modifies the sprite spawn routine of sprite E0 (spawn 3 Rotating Grey Platforms) to set or clear the extra bit of each platform spawned based on the extra bit of the spawner."
5030,175961,4,Jump (JML/JSL),"Modified by the Triple Rotating Platform Vertical Level Fix patch, by Zeldara109.


JML, modifies the platform spawning routine of sprite E0 to swap the X and Y position data if generating platforms in a vertical level."
5031,176039,4,Jump (JML/JSL),Hijacked by Lunar Magic. Sets upper bits of Y position for run-once sprites.
5032,176126,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the custom generator sprites main routine."
5033,177045,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the custom shooter sprites main routine."
5034,177644,33,Code,"Hijacked by Pixi.

(LoROM only) Jumped to by $028B1D, $02AC7A, $02ACBA, $02ABEF and $02A9DB. Contains routines to load the 16-bit sprite data pointer during init and main and a routine to displace the sprite offset index."
5035,177644,15,Code,"Hijacked by Pixi.

(SA-1 only) Contains a routine that fixes a displacement in the sprite index."
5036,178179,5,Jump (JML/JSL),"Hijacked by the Pokey's Top Segment Interaction Fix patch, by RussianMan.


JSL : NOP, jumps to code that ensures the top segment of a Pokey is always removed when hit by a kicked sprite slightly above the Pokey, rather than a nonexistent segment being duplicated."
5037,178313,1,Opcode,"Not modified, however is used by Lunar Magic as an RTL for calling routines that end in RTS in bank 2 with stack magic. So don't modify it."
5038,178766,4,Jump (JML/JSL),"Hijacked by Lunar Magic. Used for adding berry compatibility with dynamic levels, when eaten by Yoshi's tongue."
5039,178801,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA60,X to LDA.L $000CB6,X."
5040,178809,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA70,X to LDA.L $000CC6,X."
5041,178818,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
5042,178826,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BAAC,X to LDA.L $000CE6,X."
5043,178846,4,Jump (JML/JSL),"Modified by the Edible Blocks patch, by Thomas.


JML, hijacks baby Yoshi/Yoshi tongue block detection routine to check for custom tiles."
5044,178945,5,Jump (JML/JSL),"Modified by the Edible Blocks patch, by Thomas.


JSL : PLX, hijacks the routine that replaces an eaten berry tile with a bush tile to allow replacement with empty tiles."
5045,179623,6,Jump (JML/JSL),Modified by Vertical Despawn Fix: Changes the despawn range of most wall following enemies from relative to the camera to the level boundary.
5046,180316,11,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Rip van fish's horizontal proximity check with 16-bit one for when it should wake up and chase player.
5047,180327,11,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Rip van fish's vertical proximity check with 16-bit one for when it should wake up and chase player.
5048,181088,12,Jump (JML/JSL),Modified by Proximity Wraparound fix. Changes Whistling Chuck's horizontal proximity check to 16-bit one.
5049,181153,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the Chuck sprite's whistling state routine to activate / not activate the Super Koopa generator based on the extra bit instead of X position."
5050,181374,4,Jump (JML/JSL),"Hijacked by the Baseballs and Bones Vertical Movement Patch, by KevinM. 

JML, hijacks the Pitchin' Chuck to make its spawned baseball Y speed #$00."
5051,181762,16,Jump (JML/JSL),Modified by Proximity Wraparound fix. Changes Splitting and bouncing chucks' horizontal proximity check to 16-bit one.
5052,181834,12,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Changing Chuck's vertical proximity check to 16-bit one for when it's searching for player.
5053,181946,12,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Charging chuck's vertical proximity check for when it's charging.
5054,182184,4,Jump (JML/JSL),"Hijacked by the Spawn a Coin On Star Kill Patch, by RussianMan.


JML, A jump to a routine that handles Mario's contact with Chucks while having a star. If the chucks option is disables, uses the old code."
5055,183765,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

Fixes a bug that happens when entering a pipe on a specific frame of the Wall Springboard animation (after bouncing on it)."
5056,184229,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It prevents Wall Springboards from setting Mario's Y position when he enters a pipe while touching them."
5057,184378,3,Opcode,"Modified by Lunar Magic. Changes to ""NOP : NOP : XBA"" for holding the Y low byte."
5058,184384,4,Jump (JML/JSL),Hijacked by Lunar Magic. Used to verify the Y range on the offscreen subroutine.
5059,184456,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
5060,184664,4,Jump (JML/JSL),"Hijacked by Lunar Magic. Used for adding berry compatibility with dynamic levels, when eaten by Yoshi's mouth."
5061,184716,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA60,X to LDA.L $000CB6,X."
5062,184724,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA70,X to LDA.L $000CC6,X."
5063,184733,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BA9C,X to LDA.L $000CD6,X."
5064,184741,4,Opcode,"Modified by Lunar Magic. Remaps LDA.L $00BAAC,X to LDA.L $000CE6,X."
5065,184761,4,Jump (JML/JSL),"Modified by the Edible Blocks patch, by Thomas.


JML, hijacks Yoshi head berry detection routine (eat berry by touching, as opposed to using the tongue) to check for custom tiles."
5066,184839,4,Jump (JML/JSL),"Modified by the Edible Blocks patch, by Thomas.


JSL, hijacks the routine that replaces an eaten berry tile with a bush tile to allow replacement with empty tiles."
5067,184852,4,Jump (JML/JSL),Modified by Balloon Direction Fix. Jumps to the main code.
5068,184852,4,Jump (JML/JSL),"Hijacked by the P-Balloon and Cloud Clipping Fix patch by lolcats439.

JSL, jumps to the code that checks if LR are pressed at the same time and makes the game treat it as a single R input instead."
5069,184873,4,Jump (JML/JSL),"Modified by the P-Balloon Acceleration + Extras patch by Erik.

Changes the speed so that there are two speed states and potentially fixing the bug of pressing left and right at the same time."
5070,185884,4,Jump (JML/JSL),"Hijacked by the Ball n' Chain and Yoshi Interaction Fix patch by KevinM.

It jumps to the code that restores the center coordinates of the Ball n' Chain, so they can be used to compute the ball and rings positions."
5071,185905,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JML, modifies the Ball 'n Chain and Rotating Grey Platform sprites to set clockwise / counterclockwise motion based on the extra bit instead of X position."
5072,186131,4,Jump (JML/JSL),"Hijacked by the Ball n' Chain and Yoshi Interaction Fix patch by KevinM.

It jumps to the code that backs up the ball's actual position to scratch ram, so it can be used later."
5073,186247,4,Jump (JML/JSL),"Hijacked by the Ball n' Chain and Yoshi Interaction Fix patch by KevinM.

It jumps to the code that saves the ball's actual position from scratch ram to the sprite tables."
5074,186264,2,Hex Edit,"Modified by the Ball n' Chain and Yoshi Interaction Fix patch by KevinM.

Inserts ""BRA $06"" to skip over some instructions that were already executed earlier in the patch code."
5075,186983,2,Data,Modified by Level specific speeds for Monty Moles and Hammers. Hammer Brother's hammer throwing rates.
5076,187001,4,Jump (JML/JSL),Modified by Level specific speeds for Monty Moles and Hammers. This handles the hammer brother's hammer throwing timer.
5077,187080,11,Jump (JML/JSL),"Modified by the Throw Hammer Fix patch, by Isikoro.


See details for code. Modifies the Hammer Bro. hammer generation routine to offset the hammer's X position one tile to the right if it is being thrown rightwards.Code"
5078,187231,4,Jump (JML/JSL),Modified by Hammer Bro Fix. Used to attach hammer bros to platforms correctly.
5079,187266,6,Jump (JML/JSL),Modified by No More Sprite Tile Limits. Corrects the Hammer Bro's OAM index.
5080,188739,12,Jump (JML/JSL),Modified by Proximity Wraparound fix. Changes jumping piranha plant's horizontal proximity check to 16-bit one for if it should jump out of pipe.
5081,188877,5,Jump (JML/JSL),"Modified by Fire-Spitting Jumping Piranha Plant SFX, by Ersanio. Plays a sound when the Fire-Spitting Piranha Plant spits fire."
5082,189047,3,Code,"Modified by AddmusicK.

Writes ""LDA $14AD"". Since that's what's originally at this address, this is probably meant to restore an edit done by some other patch."
5083,189055,5,Code,"Modified by AddmusicK.

Writes ""LDA $0DDA"", then replaces the original ""BMI $03"" with NOPs."
5084,189517,10,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Exploding Block's horizontal proximity check to 16-bit for if it should explode.
5085,189706,4,Jump (JML/JSL),Modified by Mushroom Scale Fix. Jumps to the main code.
5086,189928,4,Jump (JML/JSL),"Modified by Moving ledge hole sprite fix, by Tattletale.


JML, allows the moving ledge sprite to use a special GetSpriteClippingA routine customized for player interaction."
5087,189983,4,Jump (JML/JSL),"Modified by Moving ledge hole sprite fix, by Tattletale.


JML, allows the moving ledge sprite to use a special GetSpriteClippingA routine customized for interaction with sprites."
5088,190163,4,Jump (JML/JSL),Modified by Fishin' Lakitu bug fix. Jumps to the main code.
5089,190188,5,Jump (JML/JSL),Modified by No More Sprite Tile Limits. Disables the Fishing Lakitu from setting hardcoded OAM slots for its fishing line.
5090,190533,4,Jump (JML/JSL),"Hijacked by Growing/Shrinking Pipe Exit on Extra Bit Patch, by JamesD28.


JML, jumps to a routine that enables exit on the growing/shrinking pipe sprite when extra bit 1 is set."
5091,190725,4,Jump (JML/JSL),"Hijacked by Growing/Shrinking Pipe Exit on Extra Bit Patch, by JamesD28.


JML, jumps to a routine that sets the appropriate player priority when entering a growing/shrinking pipe sprite."
5092,191131,5,Jump (JML/JSL),"Hijacked by the Double Eat Glitch Fix patch, by Maarfy and Thomas.


JML, jumps to a bit of code that prevents baby Yoshi from eating a nonexistent sprite if eating two sprites in quick succession. A leftover byte is NOP'd out."
5093,191131,5,Jump (JML/JSL),"Modified by the Edible Blocks patch, by Thomas.


JML : NOP, hijacks the multi-sprite processing portion of the baby Yoshi sprite eating routine to check for and prevent the double-eat glitch. Optionally enabled."
5094,192119,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It prevents Skull Rafts from setting Mario's Y position when he enters a pipe while standing on them."
5095,193103,4,Jump (JML/JSL),"Hijacked by the Spawn a Coin On Star Kill Patch, by RussianMan.


JML, A jump to a routine that handles Mario's contact with Wiggler while having a star. If the Wigglers option is disabled, uses the old code."
5096,193152,10,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from stomping on Wigglers."
5097,193152,6,Jump (JML/JSL),Wiggler Score Glitch Fix hijack
5098,193190,32,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from star-killed Wigglers."
5099,193514,51,Code,Modified by Bird from Yoshi's House Fix. Fixes graphic wraparound and removes bird count limitation (LoROM).
5100,193514,52,Code,Modified by Bird from Yoshi's House Fix. Fixes graphic wraparound and removes bird count limitation (SA-1).
5101,193749,5,Jump (JML/JSL),"Modified by the Side Exit Triggers Goal patch, by RussianMan.


JSL : NOP, modifies the side exit sprite to check the extra bit and Y-position to conditionally prepare event triggers."
5102,193754,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the side exit sprite main routine to set display fireplace/smoke / don't display fireplace/smoke state based on the extra bit instead of X position."
5103,194581,4,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to the code that executes custom cluster sprites main code."
5104,195082,4,Table,"Modified by $02xx OAM Remapper. This is the table with the OAM indexes for the background candle flames. These are indexes into $0300, not $0200."
5105,195305,4,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
5106,196310,3,Opcode,"Modified by Lunar Magic. Changes to ""NOP : NOP : XBA"" for holding the Y low byte."
5107,196316,4,Jump (JML/JSL),Hijacked by Lunar Magic. Used to verify the Y range on the offscreen subroutine.
5108,196373,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
5109,196432,20,Table,"Modified by $02xx OAM Remapper. This is the table with the OAM indexes for cluster sprite Boos, Sumo Brothers' flame, and the unused Swoopers (Death Bat Ceiling)."
5110,196432,20,Table,Modified by No More Sprite Tile Limits. Changes the OAM slot table for cluster sprites.
5111,196452,8,Table,Modified by $02xx OAM Remapper. This is the table with the OAM indexes for the 1-up from bonus game.
5112,196578,30,Data,"Hijacked by Pixi.

The first 8 bytes are used to store Pixi's header, with the following format:

- The string ""STSD"".

- Version number (1.XX).

- 1 byte for flags (currently only LSB used to signal per-level sprites being used in the rom).

- 2 bytes, currently unused.


The next 22 bytes are used to store pointers to custom sprite data."
5113,196578,30,Data,"PIXI Header containing header string, version and pointer tables for sprite data."
5114,229390,4,Data,"Modified by Goodbye Football RNG, by Mandew.


Restructures the football sprite bounce speed table to be read as ""low value/mid value/high value"" in sequence."
5115,229468,4,Jump (JML/JSL),"Modified by Goodbye Football RNG, by Mandew.


JSL, modifies the index to the football sprite bounce speed table to cycle across three values in sequence. Overwrites the retrieval of a random number."
5116,229527,2,Opcode,Modified by Minimalist Course Clear so it loads a custom waiting value that determines when to fade back to the overworld after beating a boss.
5117,229533,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Boss clear"" song number."
5118,229790,5,Jump (JML/JSL),Modified by Custom Boss HP. Set Big Boo Boss' HP on per-level basis.
5119,229972,4,Jump (JML/JSL),Modified by Big Boo Boss Palette Editor. Changes the way palette is loaded for big boo boss and allows per-level palettes.
5120,230304,34,Code,"Hijacked by the Stealth Boos by Extra bit patch, by Isikoro.


(LoROM) Inserts code that, along with a JML into freespace, makes the Boo and Big Boo invisible when Mario is facing them. A conditional NOP is inserted when patched to a SA-1 ROM (not inserted here)."
5121,230304,35,Code,"Hijacked by the Stealth Boos by Extra bit patch, by Isikoro.


(SA-1) Inserts code that, along with a JML into freespace, makes the Boo and Big Boo invisible when Mario is facing them. A conditional NOP is inserted when patched to a SA-1 ROM (inserted here)."
5122,230909,3,Code,"Modified by the Platform-Dependent Fast BG Scroll patch, by JamesD28.


LDA $C2,x : NOP (or LDA $D8,x : NOP if SA-1), casts a new RAM address as the ""touched Flying Grey Turnblocks"" flag to prevent conflict with other code."
5123,230973,2,Opcode,"Modified by the Platform-Dependent Fast BG Scroll patch, by JamesD28.


BRA $0A, bypasses the Flying Grey Turnblocks' vanilla speed routine, which is moved into a custom routine."
5124,230989,4,Jump (JML/JSL),"Modified by the Platform-Dependent Fast BG Scroll patch, by JamesD28.


JML, modifies the Flying Grey Turnblocks (sprite C1) to set arbitrary horizontal movement speed, and to interact with a custom fast BG scroll routine."
5125,231186,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
5126,231414,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It prevents Mega Moles from setting Mario's Y position when he enters a pipe while standing on them."
5127,231657,10,Jump (JML/JSL),Modified by Proximity Wraparound fix. Changes Swooper Bat's horizontal proximity check to 16-bit one for if it should swoop at player.
5128,232110,4,Jump (JML/JSL),"Modified by Bowser Statue Jumping SFX, by Yan.


JML, modifies the routine that sets the golden Bowser statue's jumping speed to include a sound effect."
5129,232615,4,Jump (JML/JSL),"Modified by the patch included in GreenHammerBro's SMB3 screen scrolling pipes.

It prevents Carrot Lifts from setting Mario's Y position when he enters a pipe while standing on them."
5130,232815,4,Jump (JML/JSL),"Modified by Item Box Sprite Fix, by Davros/Romi.


JML, hijacks Info Box sprite Main routine to execute custom blink-fall + positioning code. Optionally disabled."
5131,232839,4,Jump (JML/JSL),"Optionally modified by the Sprite Properties Depending on the Extra Bit patch, by KevinM.


JSL, modifies the Info Box main routine to display message 1 or 2 based on the extra bit instead of X position."
5132,232839,12,Jump (JML/JSL),Modified by the Message Box Expansion patch. Jumps to new code that handles messages for the Message Box sprite. JSL : NOP #8.
5133,233114,9,Code,Modified by Moving Castle Block Offscreen Handling Fix. Calls SubOffScreen and then jumps to the main code.
5134,234062,12,Jump (JML/JSL),Modified by Proximity Wraparound fix. Replaces Falling Spike's horizontal proximity check with 16-bit one.
5135,234168,5,Code,"Hijacked by AddmusicK.

Changes the grinder SFX number (here used by the creating/eating block), and remaps it to $1DF9."
5136,234201,4,Jump (JML/JSL),"Hijacked by the Eating blocks detection fix patch by Darolac.

It jumps to the main code of the patch."
5137,234232,3,Jump (JMP/JSR),Modified by Creating Block Sprite Path Expander. Jump to Creating Block Sprite's main routine.
5138,234404,74,Code,Modified by Creating Block Sprite Path Expander. Rewrite Creating Block Sprite's code and use three unused bytes as a long pointer to movement data.
5139,234891,4,Jump (JML/JSL),"Hijacked by the Spawn a Coin On Star Kill Patch, by RussianMan.


JML, A jump to a routine that handles Mario's contact with Rexes while having a star. If the Rexes option is disabled, uses the old code."
5140,235011,32,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from star-killed Rexes."
5141,235048,35,Code,"Hijacked by the No Consecutive Awards Patch, by Koopster.


A piece of code that remove score award calculations from consecutively stomped Rexes."
5142,235664,3,Opcode,Modified by No More Sprite Tile Limits. Fixes a bug with the Reznor fight where sprite tiles can briefly disappear due to variable overflow.
5143,235742,13,Code,"Modified by Minimalist Course Clear.


When modified, this part of the ""Reznor defeated"" code handles freezing sprites if set in the patch's config, playing the SFX and fixing a bug if sprites aren't set to freeze (jumps to freespace made by hijack $00AF2D)."
5144,235751,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Boss clear"" song number."
5145,236291,4,Jump (JML/JSL),Modified by Reznor Fireball Flag. Initializes it to be big according to the changes made by the patch.
5146,236291,4,Jump (JML/JSL),Used by the Reznor Fireball Fix patch to make the fireballs fired by Reznor use the new flag.
5147,239362,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Bowser zoom out"" song number."
5148,239528,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Bowser interlude"" song number."
5149,239554,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Bowser zoom in"" song number."
5150,239682,9,Table,"Modified by AddmusicK.

Changes the table of SFX numbers of the Bowser's fires, and also the table of the songs used in the second and third phase of the Bowser fight (at $03A849)."
5151,239755,18,Code,"Modified by AddmusicK.

Restores the original game's code, probably meant to undo the effect of another patch."
5152,240628,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Bowser defeated"" song number."
5153,240723,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Princess Peach saved"" song number."
5154,243318,4,Jump (JML/JSL),"Modified by the ""Freeram Controlled Hitbox"" patch. Jumps to the third section of the main code."
5155,243324,2,Hex Edit,"Modified by Yoshi Player Patch: Due to the lack of collectable powerups, ""small"" Yoshi uses the same hitbox as big Yoshi."
5156,243344,5,Jump (JML/JSL),Modified by Reverse Gravity. Fixes interaction with sprites when in reversed gravity mode (doesn't fixes sprites damaging the player when stomping them from below).
5157,243370,4,Jump (JML/JSL),Part of 'Get Sprite A Clipping' routine hijacked by Custom Sprite Clipping patch so clippings 3C and 3D can be used.
5158,243440,4,Jump (JML/JSL),Part of 'Get Sprite B Clipping' routine hijacked by Custom Sprite Clipping patch so clippings 3C and 3D can be used.
5159,243820,3,Opcode,"Modified by Lunar Magic. Changes to ""NOP : NOP : XBA"" for holding the Y low byte."
5160,243826,4,Jump (JML/JSL),Hijacked by Lunar Magic. Used to verify the Y range on the offscreen subroutine.
5161,243898,5,Jump (JML/JSL),"Hijacked by Pixi.

(LoROM only, and if !Disable255SpritesPerLevel == 0) Jumps to a routine that remaps from $1938 to $7FAF00 to allow for 255 sprite per level instead of 128."
5162,243980,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5163,243996,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5164,244012,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5165,244028,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5166,244044,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5167,244060,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5168,244076,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5169,244092,2,Data,"Modified by Magikoopa Palette Correction Patch, corrects Magikoopa's fading in/out palette."
5170,244512,52,Code,"Modified by Lunar Magic.

Writes the level name data into the stripe table ($7F837D) to be uploaded during NMI. The table that contains this data can be found using read3($03BB57). Each level there receives 19 bytes for the level name."
5171,244512,17,Code,"Modified by the Extended ""Extended OW Level Names"" patch. It hijacks Lunar Magic's level names routine, by reserving 56 bytes for the level name (instead of 19)."
5172,244535,4,Jump (JML/JSL),"Modified by the Extended ""Extended OW Level Names"" patch. It hijacks Lunar Magic's level names routine to jump to the main code of the patch."
5173,244624,5,Code,"Modified by ""Customized Yoshi Messages Patch"". Check whether to display default yoshi message (level 0 message 2) or level message.


This is a modification of Lunar Magic's hijack."
5174,244624,255,Code,Modified by Lunar Magic. It's the code that handles the modified Message Box routine. For more info see $03BA02.
5175,244624,4,Jump (JML/JSL),"Hijacked by the ZSNES-detecting Message Boxes patch by WhiteYoshiEgg.

JML, it modifies LM's message routine to change the displayed message if the emulator used is ZSNES."
5176,244681,1,Opcode,Modified by the Message Box Expansion patch. Sets an RTL as part of an alteration to have Lunar Magic's message hack only set the switch palace number.Alteration
5177,244815,7,Code,Modified by the Message Box Expansion patch. Makes an alteration to Lunar Magic's message hack so that is only sets the switch palace number.Alteration
5178,244863,16,Table,"Used by Lunar Magic as a table of stripe headers (at least, the first two bytes of them) for each line of the message box."
5179,244896,11,Code,"Modified by Lunar Magic. It's a piece of code that sets the correct starting submap, as part of the sprite 19 fix. It's called from $01E762."
5180,244960,182,Code,Modified by Lunar Magic.
5181,245376,384,Table,"Used by Lunar Magic for its level names system. Specifically, this table contains 16-bit indices to the message data table at read3($03BC0B) for each message. This table is indexed as ((translevel number * 2) + message number) * 2.


If the overworld expansion hijack from LM v2.53 is applied, this table is moved to read3($03BBD9) and modified to contain direct 24-bit pointers for every message, while the index table at read3($03BC0B) is scrapped.

In its place, the first 256 bytes are used as the initial level flags (moved from $05DDA0), with the remaining bytes left unused."
5182,245852,1,Hex Edit,Modified by TheBiob's 'Baby Yoshi grow flag' patch. An RTS is written there because originally the game has two routines that do basically the same thing.
5183,245915,1,Hex Edit,Modified by TheBiob's 'Baby Yoshi grow flag' patch. An RTS is written there to fix the double eat glitch.
5184,245918,5,Jump (JML/JSL),Modified by Configurable amount of Baby Yoshi eat sprites. Runs comparison of custom per-level values with how many sprites Baby Yoshi has eaten to determine whether to become adult.
5185,246265,4,Jump (JML/JSL),"Modified by Item Box Sprite Fix, by Davros/Romi.


JML, hijacks Light Switch Box sprite Main routine to execute custom blink-fall + positioning code. Optionally disabled."
5186,246604,4,Jump (JML/JSL),Modified by Ninji Ceiling Fix. Jumps to the main code.
5187,246913,4,Jump (JML/JSL),"Hijacked by the Baseballs and Bones Vertical Movement Patch, by KevinM. 

JML, hijacks the Dry Bones to make its spawned bone Y speed #$00."
5188,247710,4,Jump (JML/JSL),"Hijacked by the Bowser Defeated Level Warp patch by Bensalot.

JML, it hijacks the part of Peach's code that marks the level as beaten to teleport the player instead."
5189,247713,2,Code,Modified by Minimalist Course Clear so it loads a custom waiting value that determines when to fade back to the overworld after beating a boss.
5190,249358,5,Jump (JML/JSL),"Hijacked by the Lemmy/Wendy Dummy Penalty patch by JamesD28.

If either !LemmyPenalty or !WendyPenalty is 1, it writes a JML : NOP to jump to the patch code in freespace.

Otherwise, in case the byte at $03CE0E is $5C (JML) it restores the original code (LDA $1540,x : BNE $17)."
5191,249366,5,Jump (JML/JSL),Modified by Custom Boss HP. Set Wendy's/Lemmy's HP on per-level basis.
5192,249492,2,Opcode,Modified by Minimalist Course Clear so it loads a custom waiting value that determines when to fade back to the overworld after beating a boss.
5193,249498,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Boss clear"" song number."
5194,249552,5,Jump (JML/JSL),Modified by Custom Boss HP. Erase other sprites on Wendy's/Lemmy's death by checking HP set on per-level basis.
5195,251795,3,Opcode,Modified by Lunar Magic. Remaps ADC.W #$01B0 to ADC.W $13D7.
5196,254044,300,Table,"Hijacked by Pixi.

This is where the pointers to the shared subroutines are stored (3 bytes per pointer). The total space used is 3*<number of routines>, with the limit being 300 bytes (since 100 routines is the maximum allowed)."
5197,254044,300,24-bit Pointer,"PIXI pointers to shared routines. Tool caps it at 100 routines but it really only takes up routines*3 bytes, so anything in this range is use at own risk."
5198,261632,512,Table,"Lunar Magic uses this as a table of the level animation settings for each level. Format: PTLG----

P = disable original game's palette animations

T = disable original game's tile animations

L = disable LM's level animations

G = disable LM's global animations

---- = unused"
5199,295046,5,Code,Modified by Lunar Magic.
5200,295101,1,Code,Modified by Lunar Magic.
5201,295120,1,Opcode,Modified by Lunar Magic.
5202,295136,5,Code,Modified by Lunar Magic.
5203,295170,1,Code,Modified by Lunar Magic.
5204,295181,1,Code,Modified by Lunar Magic.
5205,295227,1,Code,Modified by Lunar Magic.
5206,295489,4,Jump (JML/JSL),"Modified by Overworld Speed Changer by carol, Mellonpizza and WhiteYoshiEgg.


JML, modifies the overworld game mode to run the movement speed routine multiple times, enabling faster movement."
5207,295490,4,Jump (JML/JSL),Hijacked by carol & WhiteYoshiEgg's 'Overworld speed changer' patch. Jumps to the main routine.
5208,295565,1,Opcode,Modified by Lunar Magic.
5209,295790,1,Opcode,Modified by Lunar Magic.
5210,295808,1,Opcode,Modified by Lunar Magic.
5211,295890,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Valley of Bowser appears"" song number."
5212,295952,3,Jump (JMP/JSR),"Modified by Donkey Kong Country 2 Navigation Arrows patch by Alcaro, carol, lx5 and wiiqwertyuiop.


Jump to freespace in the same bank to execute arrow code."
5213,295956,1,Opcode,"Not modified, however is used by Lunar Magic as an RTL for calling routines that end in RTS in bank 4 with stack magic. So don't modify it."
5214,296201,5,Code,Modified by Lunar Magic.
5215,296294,4,Jump (JML/JSL),Modified by Lunar Magic. This handles star roads and pipes.
5216,296370,2,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file hexedits.asm.


Modifies Y position of the player sprite on the overworld border."
5217,296389,4,Jump (JML/JSL),Modified by the Overworld Indicators patch. Main hijack of the patch; draws the actual counter. [JML]
5218,296394,5,Jump (JML/JSL),Modified by Yoshi Player Patch: Initialises RAM used by the patch during overworld load.
5219,296399,4,Hex Edit,"Modified by the Extended ""Extended OW Level Names"" patch. It removes the player image from the overworld border."
5220,296450,5,Jump (JML/JSL),"Modified by the  Player's BG OW Tile/Palette Changer patch. It jumps to the main code of the patch, which then jumps back to $04860C."
5221,296907,384,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file ow_mario.asm.


Replaces the player overworld sprite tilemap."
5222,296907,384,Hex Edit,"Modified by Easier OW Mario Editor, by Ladida.


Replaces the player overworld sprite tilemap."
5223,297438,384,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file ow_mario.asm.


Replaces the yoshi + player overworld sprite tilemap."
5224,297438,384,Hex Edit,"Modified by Easier OW Mario Editor, by Ladida.


Replaces the yoshi + player overworld sprite tilemap."
5225,298378,7,Hex Edit,"Modified by AddmusicK.

Changes the table of overworld song numbers."
5226,298564,3,Hex Edit,"Modified by AddmusicK.

Inserts 3 NOPs to replace the original ""STA $1DFB""."
5227,298625,10,Code,"Modified by Lunar Magic. Jumps to a routine that handles level names, located at $03BB20."
5228,298868,4,Jump (JML/JSL),Kaijyuu's Multi Midway Points 1.7 Patch's part that hijacks the midway point reset code.
5229,298868,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it's the code that resets the midway point in the multiple midway points patch included in retry."
5230,298890,5,Code,Modified by Lunar Magic.
5231,299010,1,Code,Modified by Lunar Magic.
5232,299063,0,Code,"Modified by the Overworld Indicators patch. This one modifies the save routine so the game saves whenever you beat a level and doesn't rely on a safe prompt anymore if desired. (Actual size depends whether OW expansion is enabled or not)With Autosave
Without Autosave"
5233,299342,2,Code,Modified by Lunar Magic.
5234,299376,5,Code,Modified by Enter Level/Pipe/Star Road Sounds. Modifies the sound when entering a star tile on OW.
5235,299413,4,Jump (JML/JSL),Modified by Enter Level/Pipe/Star Road Sounds. Modifies the sound when entering a pipe tile on OW.
5236,299417,4,Jump (JML/JSL),Modified by Lunar Magic.
5237,299448,6,Code,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the counterbreak code included in retry. If !counterbreak_coin = 1, it resets the coin counter, otherwise it restores the original code."
5238,299460,5,Jump (JML/JSL),"Hijacked by the Power Surge Patch, by Glyph Phoenix. 


A JSL that jumps to the hijacked routine at $01FFBF whenever the player enters in a level."
5239,299460,23,Code,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

Part of the counterbreak code included in retry. It resets various counters based if the respective defines (!counterbreak_powerup, !counterbreak_yoshi) are set, otherwise it restores the original code."
5240,299465,12,Code,"Modified by Leave Yoshi in Level by JackTheSpades and Katrina.


Reset yoshi-related variables when entering a level from overworld."
5241,299483,5,Jump (JML/JSL),"Hijacked by the Red Coin Counter Patch, by Iceguy and Major Flare.

JML : NOP, hijacks the level load so that the necessary freeram can be cleared."
5242,299489,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Fade out music"" command, from $80 to $FF."
5243,299493,4,Jump (JML/JSL),Modified by Enter Level/Pipe/Star Road Sounds. Modifies the sound when entering a level tile on OW.
5244,299783,2,Code,Modified by Lunar Magic.
5245,300361,10,Code,Modified by Lunar Magic.
5246,301186,3,Jump (JMP/JSR),"Hijacked by AddmusicK.

Inserts a JMP to $04FFB1, which forces the music to play even when fading out from an exit tile on the overworld."
5247,301621,5,Code,Modified by Lunar Magic. This handles the red exit tiles.
5248,301762,3,Jump (JMP/JSR),"Hijacked by AddmusicK.

Inserts a JMP to $04FFB1, which forces the music to play even when fading out from an exit tile on the overworld."
5249,302590,3,Code,Modified by Lunar Magic.
5250,304432,1,Hex Edit,"Modified by the Extended ""Extended OW Level Names"" patch. It removes the 'x' character next to the overworld life counter."
5251,317433,64,Code,Modified by Lunar Magic.
5252,317529,1,Code,Modified by Lunar Magic.
5253,318068,3,Code,Modified by Lunar Magic.
5254,318104,1,Opcode,Modified by Lunar Magic.
5255,318393,6,Code,Modified by Lunar Magic.
5256,318408,7,Hex Edit,"Modified by AddmusicK.

Changes the table of overworld song numbers."
5257,318429,22,Hex Edit,"Hijacked by AddmusicK.

BRA + : NOP #20 : +, skips the code that checks whether Mario and Luigi are on the same submap."
5258,318523,2,Code,Modified by Lunar Magic.
5259,318564,3,Hex Edit,"Modified by No Overworld, by Brolencho: Disables the loading of layer 1 tiles on the overworld to prevent glitched graphics in No Yoshi intros."
5260,318570,5,Code,Modified by the Free $7F0000 patch. Replaces a JSR and a pair of useless processor flag switches for a JSL.Edit
5261,318578,2,Code,Modified by Lunar Magic.
5262,318585,1,Code,Modified by Lunar Magic.
5263,318605,2,Code,Modified by Lunar Magic.
5264,318629,4,Jump (JML/JSL),Modified by Lunar Magic.
5265,318634,1,Code,Modified by Lunar Magic.
5266,318652,2,Code,Modified by Lunar Magic.
5267,318657,1,Code,Modified by Lunar Magic.
5268,318714,4,Jump (JML/JSL),Modified by Lunar Magic.
5269,318789,2,Code,Modified by Lunar Magic.
5270,318794,1,Code,Modified by Lunar Magic.
5271,318806,1,Opcode,Modified by the Free $7F0000 patch. Changes an RTS to an RTL.
5272,320625,3,Code,Modified by Lunar Magic.
5273,320671,3,Code,Modified by Lunar Magic.
5274,320676,3,Code,Modified by Lunar Magic.
5275,320688,1,Code,Modified by Lunar Magic.
5276,320699,2,Code,Modified by Lunar Magic.
5277,320704,2,Code,Modified by Lunar Magic.
5278,321009,7,Jump (JML/JSL),Modified by Lunar Magic.
5279,321009,7,Jump (JML/JSL),"Modified by Lunar Magic.

JSL : NOP #3, it jumps to the routine at $05DCB0."
5280,321013,4,Jump (JML/JSL),Modified by the Overworld Indicators patch. Writes to the exit table SRAM synchronizing when a level is beaten. [JML]
5281,321058,1,Opcode,Modified by Lunar Magic.
5282,321120,1,Code,Modified by Lunar Magic.
5283,321148,3,Code,Modified by Lunar Magic.
5284,321180,3,Code,Modified by Lunar Magic.
5285,321221,4,Jump (JML/JSL),Modified by Lunar Magic.
5286,321246,3,Code,Modified by Lunar Magic.
5287,321274,2,Code,Modified by Lunar Magic.
5288,321289,3,Code,Modified by Lunar Magic.
5289,321296,3,Code,Modified by Lunar Magic.
5290,321342,1,Code,Modified by Lunar Magic.
5291,321349,2,Code,Modified by Lunar Magic.
5292,321374,3,Code,Modified by Lunar Magic.
5293,322034,1,Code,Modified by Lunar Magic.
5294,322036,3,Code,Modified by Lunar Magic.
5295,322039,5,Code,Modified by Lunar Magic.
5296,322087,3,Code,Modified by Lunar Magic.
5297,322098,3,Code,Modified by Lunar Magic.
5298,322104,3,Code,Modified by Lunar Magic.
5299,322222,2,Code,Modified by Lunar Magic.
5300,322252,10,Code,Modified by Lunar Magic.
5301,322252,11,Code,Modified by Lunar Magic.
5302,322252,4,Jump (JML/JSL),"Modified by the Event Path Reveal Speed Customizer patch, by Koopster.


JML, alters code inserted by Lunar Magic to set path reveal speed on a per-event basis. Only applies if Lunar Magic's ""Disable event path fade effect"" option has been enabled."
5303,322264,2,Code,Modified by Lunar Magic.
5304,322293,3,Code,Modified by Lunar Magic.
5305,322360,12,Jump (JML/JSL),"Modified by the Event Path Reveal Speed Customizer patch, by Koopster.


JML : NOP #8, modifies the ""submap with slow path reveal"" routine to apply a variable path reveal speed based on event number. Only applies if Lunar Magic's ""Disable event path fade effect"" option has NOT been enabled."
5306,322522,7,Hex Edit,"Modified by 32×32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by included file hexedits.asm.


Remaps overworld sparkle tiles to free space for the 32x32 player sprite on the overworld."
5307,322700,3,Code,Modified by Lunar Magic.
5308,322746,3,Code,Modified by Lunar Magic.
5309,322757,3,Code,Modified by Lunar Magic.
5310,322967,3,Code,Modified by Lunar Magic.
5311,323000,3,Code,Modified by Lunar Magic.
5312,323006,3,Code,Modified by Lunar Magic.
5313,323037,4,Jump (JML/JSL),Modified by Lunar Magic.
5314,323135,3,Code,Modified by Lunar Magic.
5315,323162,3,Code,Modified by Lunar Magic.
5316,323166,2,Code,Modified by Lunar Magic.
5317,323267,5,Jump (JML/JSL),Modified by Lunar Magic.
5318,323273,3,Code,Modified by Lunar Magic.
5319,323293,1,Code,Modified by Lunar Magic.
5320,323297,1,Opcode,Modified by Lunar Magic.
5321,323313,4,Jump (JML/JSL),Modified by Lunar Magic.
5322,323367,20,Code,Modified by Lunar Magic.
5323,324279,3,Code,Modified by Lunar Magic.
5324,324286,3,Code,Modified by Lunar Magic.
5325,324293,3,Code,Modified by Lunar Magic.
5326,324300,3,Code,Modified by Lunar Magic.
5327,324306,3,Code,Modified by Lunar Magic.
5328,324310,3,Code,Modified by Lunar Magic.
5329,324319,3,Code,Modified by Lunar Magic.
5330,324326,3,Code,Modified by Lunar Magic.
5331,324332,3,Code,Modified by Lunar Magic.
5332,324396,3,Code,Modified by Lunar Magic.
5333,324411,3,Code,Modified by Lunar Magic.
5334,324415,3,Code,Modified by Lunar Magic.
5335,324420,3,Code,Modified by Lunar Magic.
5336,324510,3,Code,Modified by Lunar Magic.
5337,324519,3,Code,Modified by Lunar Magic.
5338,324523,3,Code,Modified by Lunar Magic.
5339,324527,3,Code,Modified by Lunar Magic.
5340,324544,3,Code,Modified by Lunar Magic.
5341,324548,3,Code,Modified by Lunar Magic.
5342,324554,3,Code,Modified by Lunar Magic.
5343,324558,3,Code,Modified by Lunar Magic.
5344,324786,85,Data,"Modified by 999 lives, it's the stripe data for the edited ""Lives Exchange"" image."
5345,325012,2,Opcode,"[to LDY #$54] Modified by 999 lives. It's the length-1 of the ""Exchange Lives"" stripe image. The original one was 81 bytes long."
5346,325047,8,Code,"Modified by 999 lives to draw Mario's halo during the ""Lives Exchange"" system without glitching up."
5347,325063,8,Code,"Modified by 999 lives to draw Luigi's halo during the ""Lives Exhange"" system without glitching up."
5348,325090,3,Opcode,"Modified by 999 lives. Loads the relocated stripe image data for the arrow that shows up during the ""Exchange Lives"" system."
5349,325093,4,Opcode,"Modified by 999 lives, fixes where the direction during the ""Exchange Lives"" system gets stored."
5350,325100,4,Opcode,"Modified by 999 lives, fixes where the direction during the ""Exchange Lives"" system gets stored."
5351,325107,4,Opcode,"Modified by 999 lives, fixes where the direction during the ""Exchange Lives"" system gets stored."
5352,325114,4,Code,"Modified by 999 lives, fixes where the direction during the ""Exchange Lives"" system gets stored."
5353,325120,4,Jump (JML/JSL),"Modified by 999 lives. This jump draws the extended lives numbers in the ""Exchange Lives"" system."
5354,325124,1,Opcode,Modified by 999 lives. It writes a RTS here to return to the bank.
5355,325125,4,Jump (JMP/JSR),"Modified by 999 lives, it's the new table for the arrow that appears during the ""Lives Exchange"" system."
5356,325385,1,Code,"Modified by Lunar Magic; it changes which submaps have the thunder effect enabled, see the ROM Map for more info."
5357,325479,4,Jump (JML/JSL),Modified by Lunar Magic.
5358,326562,1,Code,Modified by Lunar Magic.
5359,327046,2,Code,Modified by Lunar Magic.
5360,327049,1,Code,Modified by Lunar Magic.
5361,327050,1,Opcode,Modified by Lunar Magic.
5362,327601,5,Code,"Hijacked by AddmusicK.

Inserts a ""SEP #$30 : JMP $04DBD7"". This is to restore overwritten code at $049AC2 and $049882, and to jump back to normal music changing code."
5363,327607,10,Jump (JML/JSL),"Modified by Donkey Kong Country 2 Navigation Arrows patch by Alcaro, carol, lx5 and wiiqwertyuiop.


Located in freespace area, execute arrow code."
5364,360507,4,Jump (JML/JSL),Modified by Lunar Magic.
5365,360588,5,Jump (JML/JSL),"Hijacked by UberASMTool.

JML : NOP, jumps to the routine that executes global ""load"" code and level specific ""load"" code."
5366,360617,4,Jump (JML/JSL),Modified by Lunar Magic.
5367,360639,4,Jump (JML/JSL),Modified by Lunar Magic.
5368,360643,4,Jump (JML/JSL),Modified by Lunar Magic.
5369,360647,4,Jump (JML/JSL),Modified by Lunar Magic.
5370,360659,3,Jump (JMP/JSR),Modified by Lunar Magic.
5371,361389,5,Code,Modified by Lunar Magic.
5372,361400,5,Jump (JML/JSL),"Modified by Lunar Magic, for a jump to the ExGFX processing routine at $0FF7F0."
5373,361691,8,Hex Edit,"Modified by AddmusicK.

Changes the table of vanilla level song numbers."
5374,361760,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, fixes layer 2 interaction on the first frame of entering a level."
5375,361813,17,Code,"Modified by AddmusicK.

Modifies part of the level loading routine to change how $0DDA works."
5376,361859,4,Jump (JML/JSL),"Hijacked by the Midway Point Timer Reset patch by WhiteYoshiEgg.

JML, it hijacks the original routine that sets the level timer to backup its initial value to free RAM."
5377,361989,5,Code,Modified by Lunar Magic.
5378,362145,17,Code,Modified by Lunar Magic.
5379,362231,4,Jump (JML/JSL),Modified by Lunar Magic.
5380,362397,5,Code,Modified by Lunar Magic.
5381,363032,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
5382,363109,4,Jump (JML/JSL),Modified by Lunar Magic.
5383,363252,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
5384,363298,1,Code,Modified by Lunar Magic.
5385,363333,4,Jump (JML/JSL),Modified by Lunar Magic.
5386,363494,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
5387,363571,4,Jump (JML/JSL),Modified by Lunar Magic.
5388,363737,3,Opcode,"Modified by Lunar Magic. Changes ""AND.W #$01F0"" to ""AND.W #$3FF0""."
5389,363818,4,Jump (JML/JSL),Modified by Lunar Magic.
5390,363940,5,Jump (JML/JSL),"Modified by Lunar Magic.

JSL : NOP, jumps to the routine inserted at $0EFD00."
5391,363953,3,Code,Modified by Lunar Magic.
5392,363961,3,Code,Modified by Lunar Magic.
5393,363978,2,Code,Modified by Lunar Magic.
5394,364050,3,Code,Modified by Lunar Magic.
5395,373085,3,Code,Modified by Lunar Magic. Part of the Sprite 19 fix.
5396,373102,32,Code,"Modified by the Automatic Intro Message Dismiss patch, by KevinM.


Modifies the game code to dismiss a message automatically if it's the intro message. All other messages are unaffected.


Also inserts labels at $05B15A, $05B18B and $05B18E."
5397,373155,7,Code,Modified by Lunar Magic.
5398,377868,5,Code,Modified by Lunar Magic.
5399,378663,5,Jump (JML/JSL),"Modified by On/Off Layer 2 Generator Fix, by GreenHammerBro.


JML : NOP, modifies the on/off Layer 2 scroll command to reset the ""hit ground"" flag when rising."
5400,378717,6,Jump (JML/JSL),"Modified by On/Off Layer 2 Generator Fix, by GreenHammerBro.


JML : NOP #2, modifies the on/off Layer 2 scroll command to set a ""hit ground"" flag, shaking the screen and playing a sound only once."
5401,378812,4,Jump (JML/JSL),"Modified by the Platform-Dependent Fast BG Scroll patch, by JamesD28.


JML, modifies the fast BG scroll sprite to run a custom speed up/slow down routine."
5402,380006,2,Hex Edit,"Modified by Course Clear Coins, by MarioFanGamer.


BRA $1C, disables awarding a 1-up if the tens and ones digit of the timer are both equal to the tens digit of bonus stars received. Optionally enabled."
5403,380006,2,Hex Edit,"Hijacked by the Yoshi Coin Counter Patch, by Darolac.


BRA $1C, disables awarding a 1-up if the tens and ones digit of the timer are both equal to the tens digit of bonus stars received."
5404,380036,5,Jump (JML/JSL),Hijacked by NSMB Star Coins: This one saves all collected coins through beating a level with a goal post/sphere.
5405,380241,2,Data,"Modified by Course Clear Coins, by MarioFanGamer.


Replaces the red ""★"" on the ""COURSE CLEAR!"" text with a yellow coin icon."
5406,380614,4,Table,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the table used to increment the score at the level end to adapt to the new score system.

Changes from [$0001,$000A] to [$0010,$0100], since the patch uses the decimal flag (so $0010 = 10, not 16) and it doesn't store the score as ""actual score""/10 (so to add 10, you have to increase the score address by 10 rather than 1)."
5407,380662,16,Code,"Modified by the 8 Digits Score patch by Isikoro.

Modifies the code that adds score at the level end to account for the new score system."
5408,380690,12,Hex Edit,"Modified by Course Clear Coins, by MarioFanGamer.


INC $13CC : BRA $07 : NOP #7, modifies the ""COURSE CLEAR!"" bonus star awarding routine to award coins instead."
5409,380693,9,Jump (JML/JSL),Modified by the Trust Fund patch. Loads Yoshi Coin count then jumps to the main code with a JML : NOP #2.
5410,382875,6,Code,Modified by Lunar Magic.
5411,382891,5,Jump (JML/JSL),"Hijacked by the Individual Dragon Coin Save patch by worldpeace, JackTheSpades and LX5.

JML : NOP, it jumps to a routine that computes the value of $13BF for the level currently being entered, and sets the number of Dragon Coins collected in the level based on how many they were collected before."
5412,382905,4,Jump (JML/JSL),Modified by Lunar Magic.
5413,382909,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it jumps to an initialization routine."
5414,382926,4,Jump (JML/JSL),Modified by Lunar Magic.
5415,382926,4,Jump (JML/JSL),"Modified by Lunar Magic.

JSL, it jumps to the routine at $05DC50."
5416,382932,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it jumps to an initialization routine."
5417,382946,5,Jump (JML/JSL),"Modified by Lunar Magic. Transfers Y into X, then JSLs to a routine that uses long addressing to index secondary entrance table $05F800 or its expanded version."
5418,382954,5,Jump (JML/JSL),"Modified by Lunar Magic. Transfers Y into X, then JSLs to a routine that uses long addressing to index secondary entrance table $05FA00 or its expanded version."
5419,383004,5,Jump (JMP/JSR),"Modified by Lunar Magic. Transfers Y into X, then JSLs to a routine that uses long addressing to index secondary entrance table $05FC00 or its expanded version."
5420,383030,5,Code,Modified by Lunar Magic.
5421,383030,5,Code,"Modified by Lunar Magic.

TYX : JSL, it copies the Y register into X and then jumps to the routine at $03BCE0."
5422,383042,4,Jump (JML/JSL),The main jump of Kaijyuu's Multi Midway Points 1.7 Patch.
5423,383042,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it's the main entry point for the multiple midway points patch included in retry."
5424,383148,5,Code,"Hijacked by the Individual Dragon Coin Save patch by worldpeace, JackTheSpades and LX5.

It writes the original code (STA $0E : LDA $1F11,y) to restore it in case you patch the new version over an old one (which used this location as a jump point)."
5425,383153,4,Jump (JML/JSL),Modified by Lunar Magic.
5426,383153,4,Jump (JML/JSL),"Modified by Lunar Magic.

JSL, it jumps to the routine at $05DCD0."
5427,383159,39,Code,"Modified by UberASMTool.

Inserts code that sets the current sublevel number in $010B, in a way that's compatible with older versions of the LevelNum patch."
5428,383159,39,Code,"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

It's the LevelNum patch, which sets the current sublevel number in $010B."
5429,383159,39,Code,"Modified by UberASM and other patches and tools.


Stores the current level number to $010B. Differs from the levelnum.ips patch in that this one uses no freespace."
5430,383161,3,Jump (JMP/JSR),Modified by the Message Box Expansion patch. Jumps to the LevelNum code at $05DC46.
5431,383161,3,Jump (JMP/JSR),"Hijacked by Pixi.

Inserts a JSR to the LevelNum routine inserted at $05DC46."
5432,383202,4,Jump (JML/JSL),"Modified by Lunar Magic.


Stores the current level number plus one to $FE, address used to load custom palettes."
5433,383206,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it jumps to an initialization routine. This is run between the objects and sprites initialization codes."
5434,383221,4,Jump (JML/JSL),Modified by Lunar Magic.
5435,383227,2,Opcode,"Modified by Lunar Magic. Changes ""AND.b #$3F"" to ""AND.b #$1F""."
5436,383345,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it's part of the code that fixes the bug where sprites always face left when loading a level."
5437,383353,4,Code,Modified by Lunar Magic.
5438,383357,4,Jump (JML/JSL),Modified by Lunar Magic.
5439,383357,4,Jump (JML/JSL),"Modified by Lunar Magic.

JSL, it jumps to the routine at $05DD30."
5440,383364,4,Jump (JML/JSL),"Modified by Sprite Initial Facing Fix, by Alcaro.


JSL, modifies a portion of the level load player position init routine to set $94 - $97 and $D1 - $D4 equivalently."
5441,383393,4,Jump (JML/JSL),"Hijacked by Lunar Magic. Main hijack of the Dynamic Levels patch. It builds a lookup table though $7E:0BF6, $7E:0C56, $7E:0CB6 and $7E:0CD6 for indexing the map16 tables, sets $7E:13D7 (level height) value, $7E:1936 (level height - #$0010), $7E:0BF4 (sprite loader settings) and $7E:0BF5 (dynamic level settings)."
5442,383427,1,Opcode,Modified by Lunar Magic.
5443,383447,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it modifies the level loading routine to set Mario's entrance depending on the current checkpoint."
5444,383454,4,Jump (JML/JSL),Jumps to secondary exit handling code so Kaijyuu's Multi Midway Point 1.7 Patch can use them as midway points without messing with the original midway entrance.
5445,383454,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, jumps to the code that handles secondary exits for the multiple midway points patch included in retry."
5446,383459,4,Jump (JML/JSL),"Modified by Lunar Magic.


Used to handle LM's seperate midway point entrance functionality. The three 512-byte tables associated with it can be found in order at read3(read3($05D9E4)+$0A)."
5447,383464,4,Code,Modified by Lunar Magic.
5448,383468,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, fixes vanilla midway entrances when using the patch."
5449,383484,4,Jump (JML/JSL),"Modified by Sprite Initial Facing Fix, by Alcaro.


JML, modifies a portion of the level load player position init routine to set $94 - $97 and $D1 - $D4 equivalently."
5450,383484,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it's part of the code that fixes the bug where sprites always face left when loading a level."
5451,383491,4,Jump (JML/JSL),"Modified by Sprite Initial Facing Fix, by Alcaro.


JSL, modifies a portion of the level load player position init routine to set $94 - $97 and $D1 - $D4 equivalently."
5452,383491,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it's part of the code that fixes the bug where sprites always face left when loading a level."
5453,383511,5,Jump (JML/JSL),Modified by Lunar Magic.
5454,383615,1,Code,Modified by Lunar Magic.
5455,383619,1,Code,Modified by Lunar Magic.
5456,383626,4,Jump (JML/JSL),Hijacked by Lunar Magic. Rebuilds the level height table for chocolate island special levels.
5457,383651,4,Jump (JML/JSL),A hijack from Kaijyuu's Multi Midway Points 1.7 Patch that makes secondary exits compatible with 'No Yoshi' intros.
5458,383651,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it's the code that makes secondary exits compatible with ""No Yoshi"" intros in the multiple midway points patch included in retry."
5459,383666,4,Jump (JML/JSL),"Hijacked by the Level Entrance Repointer Patch, by JamesD28 and Smallhacker. 

JML, hijacks the level entrance routine to load data from a level between 0 and 1FF, then jumps back."
5460,383718,1,Opcode,Modified by Lunar Magic.
5461,383839,4,Jump (JML/JSL),Hijacked by Lunar Magic. Rebuilds the level height table for chocolate island special levels.
5462,383938,6,Code,Modified by Lunar Magic.
5463,383945,2,Data,"Modified by the Extended ""Extended OW Level Names"" patch. It changes the position of the life counter on the overworld to the bottom right corner."
5464,383986,4,Jump (JML/JSL),"Modified by 999 lives, handles the lives' code during the overworld and when exchanging them."
5465,383986,5,Jump (JML/JSL),"Modified by the Death Counter Version 1.2 patch by Thomas.


JSL, jumps to a custom routine that erases Mario's lives from the overworld border, and draws the death counter tiles on to the overworld border. Immediately returns again (RTL) after exiting from this custom routine."
5466,384070,7,Code,"Modified by the Message Box Expansion patch. LevelNum, stores the current level number to $010B."
5467,384070,7,Code,"Hijacked by Pixi.

Small routine that stores the current sublevel number in $010B."
5468,384080,45,Code,"Modified by Lunar Magic.

It's a routine that handles screen exits, by checking if the ""u"" bit in $7E19D8,x (x = screen number where Mario is) is set: if not, the vanilla exit system is used, otherwise LM's modified system is used."
5469,384129,3,24-bit Pointer,Modified by Lunar Magic. The location of secondary entrance table $05FE00 or its expanded version in ROMs modified with Lunar Magic 2.50+.
5470,384176,14,Code,Modified by Lunar Magic.
5471,384208,30,Code,"Modified by Lunar Magic.

It's a small routine inserted the first time the overworld is saved."
5472,384221,5,Jump (JML/JSL),"Modified by the Level Depending On Event patch, by Deflaktor.


JSL, hijacks the level loading routine to change the level number if a certain event has been passed. A remaining byte is NOP'd out."
5473,384226,4,Jump (JML/JSL),"Modified by the Level Depending On RAM Address patch, by Deflaktor.


JML, hijacks the level loading routine to change the level number if a certain RAM address is not 0."
5474,384256,29,Code,Modified by Lunar Magic.
5475,384304,70,Code,Modified by Lunar Magic.
5476,384384,20,Code,Modified by Lunar Magic.
5477,384416,96,Data,"Used by LM for the initial flags of each level (as stored to $1EA2).


If the overworld expansion hijack from LM v2.53 is applied, the table is instead moved to $03BE80, while these bytes are left unused."
5478,384512,512,Data,"Added by Lunar Magic as a fifth byte of each level's secondary level header. Format: LWPYX---

L - Slippery flag

W - Water flag

P - Flag to use X/Y position method 2

Y - Bit 5 of the entrance Y position for method 2

X - Bit 4 of the entrance X position for method 2

(X/Y are switched in vertical levels)"
5479,456000,182,Jump (JML/JSL),"Used by Lunar Magic as a routine to get a particular Map16 tile's VRAM data (tile number/YXPPCCCT for each of its four tiles). To use, A/X/Y must be 16-bit, and A must contain the tile number multiplied by 2. It returns the lower two bytes of the pointer in A and the bank byte in both the high byte of Y and in $0C (for usages as a 24-bit pointer at $0A).

Alternative entries to the routine are at $06F5D0 (which returns the bank byte in $06 for a pointer at $04 instead of $0A), and $06F5E4 (which directly stores the full pointer into $65).


Pages 0/1 are handled via the original system (a pointer table to data at $0FBE).

Pages 2-7F are then handled by directly indexing their data tables. Each set of 0x10 pages uses a different table; they can each be found with the following calculations:
02-0F: read1($06F557)<<16|(read2($06F553)+$1000&$FFFF)

10-1F: read1($06F560)<<16|(read2($06F55C)+$8000&$FFFF)

20-2F: read1($06F56B)<<16|read2($06F567)+1

30-3F: read1($06F574)<<16|(read2($06F570)+$8000&$FFFF)+1

40-4F: read1($06F598)<<16|read2($06F594)

50-5F: read1($06F5A1)<<16|(read2($06F59D)+$8000&$FFFF)

60-6F: read1($06F5AC)<<16|read2($06F5A8)+1

70-7F: read1($06F5B5)<<16|(read2($06F5B1)+$8000&$FFFF)+1


In addition, if page 2 is set to use tileset-specific Map16 (which can be determined by checking if $06F547 is non-zero), then its data can be found at (read1($06F58A)<<16|read2($06F586))+$1000. In that table, each tileset receives 0x800 bytes, so you can find a particular tile's data by indexing as 0ttttbbb bbbbb000, where tttt is the FG/BG tileset and bbbbbbbb is the low byte of the tile number."
5480,456200,60,Jump (JMP/JSR),"Used by Lunar Magic as a routine to get a Map16 tile's true acts-like (act as) setting (i.e. a value less than 0x200). It returns the 16-bit result in $03, as well as the low byte in $1693 and high byte in Y.


Additionally, the tables used to hold the Map16 tile acts-like settings can be found at the following locations:
Pages 00-3F: read3($06F624)

Pages 40-7F: read3($06F63A)

Each block in these tables receives two bytes, as its 16-bit acts-like setting. To find the true acts-like setting (i.e. a value less than 0x200), simply perform repeated lookups on these tables until a valid value is returned."
5481,456228,3,24-bit Pointer,"Hijacked by GPS.

It inserts a long pointer to the table of acts like settings for block in the range $0000-$3FFF."
5482,456250,3,24-bit Pointer,"Hijacked by GPS.

It inserts a long pointer to the table of acts like settings for block in the range $4000-$7FFF. Only inserted if !__insert_pages_40_plus == 1."
5483,456315,4,Jump (JML/JSL),"Hijacked by GPS.

JML, jumps to code that checks for the new ""WallFeet"" and ""WallBody"" offsets."
5484,456336,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioBelow"" offset for custom blocks. The code then jumps back to $06F602."
5485,456336,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario hits a tile from below.
5486,456352,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioAbove"" offset for custom blocks. The code then jumps back to $06F602."
5487,456352,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario touches a tile from above.
5488,456368,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioSide"" offset for custom blocks. The code then jumps back to $06F602."
5489,456368,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario touches a tile horizontally.
5490,456384,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""TopCorner"" offset for custom blocks. The code then jumps back to $06F602."
5491,456384,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario touches a tile on the top corners (which corner doesn't matter als long as they are from the top side).
5492,456400,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioBody"" offset for custom blocks. The code then jumps back to $06F602."
5493,456400,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario touches a tile with the lower half of his body (i.e. excluding his head).
5494,456416,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioHead"" offset for custom blocks. The code then jumps back to $06F602."
5495,456416,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario touches a tile with the upper half of his body (i.e. the head but not the rest of the body).
5496,456471,4,Jump (JML/JSL),"Hijacked by GPS.

JML, jumps to code that fixes a bug regarding the ""SpriteH"" offset."
5497,456480,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""SpriteV"" offset for custom blocks. The code then jumps back to $06F602."
5498,456480,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if a sprite touches a tile vertically (which side doesn't matter)
5499,456496,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""SpriteH"" offset for custom blocks. The code then jumps back to $06F602."
5500,456496,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if a sprite touches a tile horizontally (which side doesn't matter)
5501,456576,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioCape"" offset for custom blocks. The code then jumps back to $06F602."
5502,456576,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario touches a tile with his cape.
5503,456640,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""MarioFireball"" offset for custom blocks. The code then jumps back to $06F602."
5504,456640,16,Hex Edit,Used by Lunar Magic. This area allows you to insert custom Map16 interactions if Mario's fireball touches a tile.
5505,456656,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""WallFeet"" offset for custom blocks. The code then jumps back to $06F602."
5506,456672,16,Jump (JML/JSL),"Hijacked by GPS.

Hijacks part of Lunar Magic's map16 code to run the ""WallBody"" offset for custom blocks. The code then jumps back to $06F602."
5507,520618,32,Data,Modified by Goal Tape Gives Score patch. Changes bonus star reward table into a score reward table.
5508,520797,5,Code,Modified by Goal Tape Gives Score patch. Makes goal always give score on hit.
5509,520812,1,Data,"Modified by PIXI's poison mushroom patch.

Sprite's $1656 value. Note that the actual hijack location depends on the sprite slot chosen. For example, if the sprite is inserted in slot $85, then the hijack location is ($07F26C + ($85) = $07F2F1)."
5510,521013,1,Data,"Modified by PIXI's poison mushroom patch.

Sprite's $1662 value. Note that the actual hijack location depends on the sprite slot chosen. For example, if the sprite is inserted in slot $85, then the hijack location is ($07F3BA + ($85) = $07F43F)."
5511,521214,1,Data,"Modified by PIXI's poison mushroom patch.

Sprite's $166E value. Note that the actual hijack location depends on the sprite slot chosen. For example, if the sprite is inserted in slot $85, then the hijack location is ($07F3FE + ($85) = $07F483)."
5512,521276,1,Data,"Modified by Item Box Sprite Fix, by Davros/Romi.


db $36, modifies P-Switch sprite tweaker info 166E to ensure proper palette in custom state."
5513,521297,1,Data,"Modified by Item Box Sprite Fix, by Davros/Romi.


db $36, modifies Throw Block sprite tweaker info 166E to ensure proper palette in custom state."
5514,521415,1,Data,"Modified by PIXI's poison mushroom patch.

Sprite's $167A value. Note that the actual hijack location depends on the sprite slot chosen. For example, if the sprite is inserted in slot $85, then the hijack location is ($07F4C7 + ($85) = $07F54C)."
5515,521616,1,Data,"Modified by PIXI's poison mushroom patch.

Sprite's $1686 value. Note that the actual hijack location depends on the sprite slot chosen. For example, if the sprite is inserted in slot $85, then the hijack location is ($07F590 + ($85) = $07F615)."
5516,521817,1,Data,"Modified by PIXI's poison mushroom patch.

Sprite's $190F value. Note that the actual hijack location depends on the sprite slot chosen. For example, if the sprite is inserted in slot $85, then the hijack location is ($07F659 + ($85) = $07F6DE)."
5517,522111,6,Jump (JML/JSL),"Modified by the ""Takes 5 fireballs to kill"" Work-around Patch.


This hijack extends the sprite tables reset routine to also reset the new ""fireball hit counter"" sprite table, defined by the freeRAM provided."
5518,522117,5,Jump (JML/JSL),"Hijacked by Pixi.

Jumps to a routine that clears the init bit when changing sprites, works with $018151."
5519,824374,4,Jump (JML/JSL),Hijacked by Lunar Magic. Rebuilds the level height table for credits. The credits still uses the level layout like a normal level.
5520,824391,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Staff roll"" song number."
5521,827115,96,Code,Modified by Lunar Magic.
5522,828428,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Yoshis are home"" song number."
5523,828866,1,Hex Edit,"Modified by AddmusicK.

Changes the ""Cast list"" song number."
5524,830991,2,Code,Modified by Lunar Magic.
5525,833134,300,24-bit Pointer,GPS pointer table for shared routine. Tool caps at 100 routines with the pointers being 3 bytes long each (taking 300 bytes in total if you hit the cap).
5526,837966,4,Jump (JML/JSL),Modified by Skippable Castle Cutscenes: Adds a check which allows the player to skip the cutscene.
5527,893190,4,Jump (JML/JSL),"Modified by ObjecTool 0.5, by 0x400 and imamelia.

JML, It adds support for new extended objects ($98+)."
5528,893973,5,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML : NOP, it runs the custom midway object code. (only if !use_custom_midway_bar = 1)"
5529,893973,5,Jump (JML/JSL),"Modified by ObjecTool 0.5, by 0x400 and imamelia.

JML : NOP, it allows the user to place object 2D into the level and therefore adds support for custom normal objects."
5530,894258,1,Code,Modified by Lunar Magic.
5531,894262,2,Code,Modified by Lunar Magic.
5532,894507,4,Jump (JML/JSL),Modified by Lunar Magic.
5533,894609,4,Jump (JML/JSL),"Hijacked by the Retry System (+ Multiple Checkpoints) v2.06b patch by worldpeace and LX5.

JML, it modifies the midway bar object code to spawn the midway when another one in the level has been collected."
5534,895254,4,Jump (JML/JSL),Modified by Lunar Magic.
5535,895268,4,Jump (JML/JSL),"Modified by the ""Beat level by collecting all of the coins"" patch. Jumps to a routine which counts how many coin objects are in the level."
5536,895331,17,Code,Modified by Lunar Magic. Increments $6B-$6C/$6E-$6F by the current level height ($13D7) instead of constant #$01B0.Implementation
5537,895446,25,Code,Modified by Lunar Magic. Decrements $6B-$6C/$6E-$6F/$04-$05 by the current level height ($13D7) instead of constant #$01B0. Also decrements $1BA1.Implementation
5538,895471,22,Code,Modified by Lunar Magic. Increments $6B-$6C/$6E-$6F/$04-$05 by the current level height ($13D7) instead of constant #$01B0. Also increments $1BA1.Implementation
5539,897751,4,Jump (JML/JSL),"Hijacked by the Individual Dragon Coin Save patch by worldpeace, JackTheSpades and LX5.

JML, it modifies the Dragon Coin object code to not generate the coin in case it's been collected already."
5540,897816,4,Jump (JML/JSL),Modified by Lunar Magic.
5541,897924,4,Jump (JML/JSL),Modified by Lunar Magic.
5542,899804,39,Code,Modified by Forest Treetop Fix. Makes forest treetops able to be positioned at any Y position inside a level.
5543,899862,13,Code,Modified by Lunar Magic.
5544,909712,7,Code,Used by Lunar Magic. Routine that indexes secondary entrance table $05F800 or its expanded version with long addressing. $0DE191 is the 24-bit pointer to the location of secondary entrance table $05F800 or its expanded version in ROMs modified with Lunar Magic 2.50+.
5545,909719,7,Code,Used by Lunar Magic. Routine that indexes secondary entrance table $05FA00 or its expanded version with long addressing. $0DE198 is the 24-bit pointer to the location of secondary entrance table $05FA00 or its expanded version in ROMs modified with Lunar Magic 2.50+.
5546,909726,7,Code,Used by Lunar Magic. Routine that indexes secondary entrance table $05FC00 or its expanded version with long addressing. $0DE19F is the 24-bit pointer to the location of secondary entrance table $05FC00 or its expanded version in ROMs modified with Lunar Magic 2.50+.
5547,913546,79,Code,"Modified by Lunar Magic.

It's a subroutine (which ends in RTS) inserted the first time a level is saved in LM."
5548,913744,13,Code,"Modified by Lunar Magic.

Small piece of code inserted the first time a level is saved in LM."
5549,913760,35,Code,"Modified by Lunar Magic.

It's a subroutine (which ends in RTS) inserted the first time the time limit setting is bypassed in LM."
5550,913789,4,Jump (JML/JSL),"Hijacked by the Midway Point Timer Reset patch by WhiteYoshiEgg.

JML, it hijacks Lunar Magic's custom routine that sets the level timer to backup its initial value."
5551,913856,178,Code,"Modified by Lunar Magic.

It's a subroutine (which ends in RTS) inserted the first time a level is saved in LM."
5552,914064,59,Code,"Modified by Lunar Magic.

It's a subroutine (which ends in RTS) inserted the first time a level is saved in LM."
5553,914123,8,Table,"Modified by Lunar Magic.

It's an AND table (which goes from $01 to $80) inserted the first time a level is saved in LM. It's used by the code at $0DF290."
5554,950272,28928,Code,"Modified by AddmusicK.

First, an header is inserted, containing the following:

- The identifier characters ""@AMK"".

- Version number (which seems to be kept at $00 in all versions of the program).

- Long pointer to the table of sample groups pointers.

- Long pointer to the table of music data pointers.

- 21 ""$00"" bytes, probably meant for future expansions.


Then, the main code of the tool is inserted, which handles uploading music to the SPC700 and playing it, and the rest of the space is cleared out by filling it with ""$55"" bytes (""rep $7100 : db $55"" done before inserting the custom code). The space is cleared out until $0EF0FF, since $0EF100-$0EFFFF is used by Lunar Magic."
5555,979184,3856,Miscellaneous,"Originally empty and not modified by Lunar Magic, however if $0EF30C-$0EF30E contains an address to a sprite extra byte table and have $0EF30F holds a value of $42, Lunar magic will enable extra bit customization for placing sprites.


Additionally, Lunar Magic inserts a 55 bytes routine at $0EFD00 (ends in RTL), which is used to get the BG Map16 page during level loading, and a 48 bytes table at $0EFD50, read from in the routine.Extra Bytes Data"
5556,979200,512,Table,"Modified by LM.


This table contains the bank bytes of every level's sprite data pointer."
5557,979724,4,Data,"Hijacked by Pixi.

Writes the pointer to sprite size table, and then a $42 byte, so that Lunar Magic will enable extra bit customization for placing sprites."
5558,979728,512,Table,"Used by LM as a table of Layer 2-related data for each level. Format: bbBB-LD-

D    = What type of data the layer 2 is: object (0) or tilemap (1)

L    = Flag to indicate the usage of the high nibble

BB   = When L bit is set: Map16 bank to use for the BG

bbBB = When L bit is clear: used as the high byte for all BG Map16 tiles (deprecated?)

--   = Unused"
5559,980317,3,24-bit Pointer,Used by Lunar Magic as a 24-bit pointer to the custom overworld sprite data table. Will be $FFFFFF if no custom sprites are being used.
5560,980480,1536,24-bit Pointer,"Used by LM for a pointer table to each level's custom palette.


If a level's pointer is $000000, that means it has no custom palette and the data should be interpreted from the level header instead."
5561,982352,24,Table,"Used by Lunar Magic. This is a table of eight 24-bit pointers to the BG Map16 data in ascending order, where each pointer corresponds to a set of 0x10 pages. If a pointer is $000000, then that set of BG Map16 pages is currently unused."
5562,1015808,28753,Data,"Modified by AddmusicK.

This is where AMK's custom SPC engine (main.bin) is inserted in the ROM, to then be uploaded to the SPC700 ram. The remaining bytes are cleared out by filling them with ""$55"" bytes (""REP $7051 : db $55"" done before inserting the custom data). The space is cleared out until $0FF050, since $0FF051-$0FFFFF is used by Lunar Magic."
5563,1044640,160,Hex Edit,"Not actually ""used"" for anything, but Lunar Magic writes the following string here:
CodeLunar Magic Version X.XX Public 

©YYYY FuSoYa, Defender of Relm h

ttp://fusoya.eludevisibility.org

                                

I am Naaall, and I love fiiiish!

where X.XX is the version number and YYYY is the publication year of the LM version used."
5564,1046016,384,24-bit Pointer,Used by Lunar Magic for a table of 24-bit pointers to ExGFX80-FF (pointers for 100-FFF can be found at $read3($0FF937)). A pointer of 000000 indicates the file isn't inserted.
5565,1046512,67,Jump (JML/JSL),"Used by Lunar Magic as a routine to handle processing ExGFX files during level load.

A table of every level's ExGFX files can be found at read3($0FF7FF). Each level receives 32 bytes, with two bytes per ExGFX file; some additional data is also stored in the high byte of certain files. More information can be found here."
5566,1046784,110,Jump (JML/JSL),"Used by Lunar Magic as a routine to decompress a 4bpp GFX file to a specified location in RAM. To use it, load the 16-bit GFX file number into A and 24-bit destination RAM address in $00.

Note that it won't work on GFX32/33."
5567,1047452,4,Jump (JML/JSL),"Modified by 32x32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


JML, overwrites Lunar Magic code to skip uploading player graphics during overworld path transitions, preventing graphical bugs."
5568,1047700,4,Jump (JML/JSL),"Modified by 32x32 Player Tilemap Patch, by ExE Boss and Ladida. Edit applied by the main patch.


JML, overwrites Lunar Magic code to correct player palette mirrors prior to palette upload, preventing graphical bugs."
5569,7340032,96,Mario A,Overworld level setting flags. Mirrored at $7E1EA2.
5570,7340128,15,Mario A,"Overworld event flags, bitwise. Mirrored at $7E1F02."
5571,7340143,1,Mario A,Current submap for Mario. Mirrored at $7E1F11.
5572,7340144,1,Mario A,Current submap for Luigi. Mirrored at $7E1F12.
5573,7340145,4,Mario A,Player animation on the overworld Mirrored at $7E1F13.
5574,7340149,2,Mario A,Overworld X position of Mario. Mirrored at $7E1F17.
5575,7340151,2,Mario A,Overworld Y position of Mario. Mirrored at $7E1F19.
5576,7340153,2,Mario A,Overworld X position of Luigi. Mirrored at $7E1F1B.
5577,7340155,2,Mario A,Overworld Y position of Luigi. Mirrored at $7E1F1D.
5578,7340157,2,Mario A,Pointer to Mario's overworld X position. Mirrored at $7E1F1F.
5579,7340159,2,Mario A,Pointer to Mario's overworld Y position. Mirrored at $7E1F21.
5580,7340161,2,Mario A,Pointer to Luigi's overworld X position. Mirrored at $7E1F23.
5581,7340163,2,Mario A,Pointer to Luigi's overworld Y position. Mirrored at $7E1F25.
5582,7340165,4,Mario A,"Switch block flags (Green, Yellow, Blue and Red). Mirrored at $7E1F27."
5583,7340169,3,Mario A,Empty. Cleared on reset and titlescreen load. Mirrored at $7E1F2B.
5584,7340172,1,Mario A,Number of events triggered. Mirrored at $7E1F2E.
5585,7340173,2,Mario A,Checksum complement.
5586,7340175,96,Mario B,Overworld level setting flags. Mirrored at $7E1EA2.
5587,7340271,15,Mario B,"Overworld event flags, bitwise. Mirrored at $7E1F02."
5588,7340286,1,Mario B,Current submap for Mario. Mirrored at $7E1F11.
5589,7340287,1,Mario B,Current submap for Luigi. Mirrored at $7E1F12.
5590,7340288,4,Mario B,Player animation on the overworld Mirrored at $7E1F13.
5591,7340292,2,Mario B,Overworld X position of Mario. Mirrored at $7E1F17.
5592,7340294,2,Mario B,Overworld Y position of Mario. Mirrored at $7E1F19.
5593,7340296,2,Mario B,Overworld X position of Luigi. Mirrored at $7E1F1B.
5594,7340298,2,Mario B,Overworld Y position of Luigi. Mirrored at $7E1F1D.
5595,7340300,2,Mario B,Pointer to Mario's overworld X position. Mirrored at $7E1F1F.
5596,7340302,2,Mario B,Pointer to Mario's overworld Y position. Mirrored at $7E1F21.
5597,7340304,2,Mario B,Pointer to Luigi's overworld X position. Mirrored at $7E1F23.
5598,7340306,2,Mario B,Pointer to Luigi's overworld Y position. Mirrored at $7E1F25.
5599,7340308,4,Mario B,"Switch block flags (Green, Yellow, Blue and Red). Mirrored at $7E1F27."
5600,7340312,3,Mario B,Empty. Cleared on reset and titlescreen load. Mirrored at $7E1F2B.
5601,7340315,1,Mario B,Number of events triggered. Mirrored at $7E1F2E.
5602,7340316,2,Mario B,Checksum complement.
5603,7340318,96,Mario C,Overworld level setting flags. Mirrored at $7E1EA2.
5604,7340414,15,Mario C,"Overworld event flags, bitwise. Mirrored at $7E1F02."
5605,7340429,1,Mario C,Current submap for Mario. Mirrored at $7E1F11.
5606,7340430,1,Mario C,Current submap for Luigi. Mirrored at $7E1F12.
5607,7340431,4,Mario C,Player animation on the overworld Mirrored at $7E1F13.
5608,7340435,2,Mario C,Overworld X position of Mario. Mirrored at $7E1F17.
5609,7340437,2,Mario C,Overworld Y position of Mario. Mirrored at $7E1F19.
5610,7340439,2,Mario C,Overworld X position of Luigi. Mirrored at $7E1F1B.
5611,7340441,2,Mario C,Overworld Y position of Luigi. Mirrored at $7E1F1D.
5612,7340443,2,Mario C,Pointer to Mario's overworld X position. Mirrored at $7E1F1F.
5613,7340445,2,Mario C,Pointer to Mario's overworld Y position. Mirrored at $7E1F21.
5614,7340447,2,Mario C,Pointer to Luigi's overworld X position. Mirrored at $7E1F23.
5615,7340449,2,Mario C,Pointer to Luigi's overworld Y position. Mirrored at $7E1F25.
5616,7340451,4,Mario C,"Switch block flags (Green, Yellow, Blue and Red). Mirrored at $7E1F27."
5617,7340455,3,Mario C,Empty. Cleared on reset and titlescreen load. Mirrored at $7E1F2B.
5618,7340458,1,Mario C,Number of events triggered. Mirrored at $7E1F2E.
5619,7340459,2,Mario C,Checksum complement.
5620,7340461,143,Backup,"Contains a copy of ""Mario A"" file, after saving.Last two represent the checksum complement. Mirrored at $700000."
5621,7340604,143,Backup,"Contains a copy of ""Mario B"" file, after saving.Last two represent the checksum complement. Mirrored at $70008F."
5622,7340747,143,Backup,"Contains a copy of ""Mario C"" file, after saving.Last two represent the checksum complement. Mirrored at $70011E."
